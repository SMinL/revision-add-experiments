[
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis , rank y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis , rank y-axis in descending order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "rank",
      "y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Show the number of fate from each fate , and could you order Y-axis from low to high order ?",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC'}",
    "record_name": "2763@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of fate from each fate , and could you order Y-axis from low to high order ?",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "fate",
      "from",
      "each",
      "fate",
      ",",
      "and",
      "could",
      "you",
      "order",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Fate",
      ")",
      "ASC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "How many singers are from each country , show by the the total number in asc .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC'}",
    "record_name": "690@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many singers are from each country , show by the the total number in asc .",
    "question_toks": [
      "How",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      ",",
      "show",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "what is the total number of last names of all candidates ? , show from low to high by the y-axis .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC'}",
    "record_name": "2879@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "what is the total number of last names of all candidates ? , show from low to high by the y-axis .",
    "question_toks": [
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "last",
      "names",
      "of",
      "all",
      "candidates",
      "?",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "last_name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Candidates, columns = [*,candidate_id, candidate_details]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]@SEP@Table Candidates, columns = [candidate_id, candidate_details]@SEP@Table Candidate_Assessments, columns = [candidate_id, qualification, assessment_date, asessment_outcome_code]"
  },
  {
    "nl_queries": "Find the number of web accelerators used for each Operating system , I want to display by the y-axis in ascending .",
    "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) ASC",
    "db_id": "browser_web",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) ASC'}",
    "record_name": "372@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of web accelerators used for each Operating system , I want to display by the y-axis in ascending .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "web",
      "accelerators",
      "used",
      "for",
      "each",
      "Operating",
      "system",
      ",",
      "I",
      "want",
      "to",
      "display",
      "by",
      "the",
      "y-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Operating_system",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "web_client_accelerator",
      "GROUP",
      "BY",
      "Operating_system",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]",
    "choose_schema_rat": "Table accelerator_compatible_browser, columns = [*,accelerator_id, browser_id, compatible_since_year]"
  },
  {
    "nl_queries": "Show the number of games for each away team in a bar chart , could you show bars in desc order ?",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team DESC'}",
    "record_name": "1493@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of games for each away team in a bar chart , could you show bars in desc order ?",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "away",
      "team",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "show",
      "bars",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Away_team",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "List the phone numbers of all employees , and count them by a bar chart , and list in asc by the names please .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC'}",
    "record_name": "435@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the phone numbers of all employees , and count them by a bar chart , and list in asc by the names please .",
    "question_toks": [
      "List",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "names",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]@SEP@Table Artist, columns = [ArtistId, Name]@SEP@Table Genre, columns = [GenreId, Name]@SEP@Table MediaType, columns = [MediaTypeId, Name]@SEP@Table Playlist, columns = [PlaylistId, Name]@SEP@Table Track, columns = [TrackId, Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice]"
  },
  {
    "nl_queries": "List the number of games in each season and group by home team in a group line chart , could you rank by the Season in ascending please ?",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC'}",
    "record_name": "1482@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season and group by home team in a group line chart , could you rank by the Season in ascending please ?",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      ",",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "Season",
      "in",
      "ascending",
      "please",
      "?"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Give me a bar chart showing the total number of each minister , I want to list in asc by the total number .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC'}",
    "record_name": "2519@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart showing the total number of each minister , I want to list in asc by the total number .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "minister",
      ",",
      "I",
      "want",
      "to",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "What about the average amounts of payments by each method code ? You can give me a bar chart , and could you rank in ascending by the the average of amount payment please ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC'}",
    "record_name": "2012@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What about the average amounts of payments by each method code ? You can give me a bar chart , and could you rank in ascending by the the average of amount payment please ?",
    "question_toks": [
      "What",
      "about",
      "the",
      "average",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "How many parties of the time they left office , binning the left office time into Year interval , and then split by the minister's name , I want to display in ascending by the Y .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC', 'binning': 'BIN Left_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY YEAR'}",
    "record_name": "2521@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they left office , binning the left office time into Year interval , and then split by the minister's name , I want to display in ascending by the Y .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "left",
      "office",
      ",",
      "binning",
      "the",
      "left",
      "office",
      "time",
      "into",
      "Year",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      ",",
      "I",
      "want",
      "to",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "ASC",
      "BIN",
      "Left_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show me the comparison of the total number of every ship type with a bar graph , and sort by the Y in asc .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC'}",
    "record_name": "2758@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the comparison of the total number of every ship type with a bar graph , and sort by the Y in asc .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "comparison",
      "of",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "with",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "Y",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa by each year using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa by each year using a bar chart .",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Return a bar chart on how many singers are from each country ? , list by the y axis in ascending .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC'}",
    "record_name": "690@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on how many singers are from each country ? , list by the y axis in ascending .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\"}",
    "record_name": "2030",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "distributing",
      "the",
      "payment",
      "date",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show the number of games for each away team in a pie chart .",
    "VQL": "Visualize PIE SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team'}",
    "record_name": "1492",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show the number of games for each away team in a pie chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "away",
      "team",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "For all course_name from courses table , group by the course name and count them with a bar chart .",
    "VQL": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
    "db_id": "student_assessment",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name'}",
    "record_name": "2880",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For all course_name from courses table , group by the course name and count them with a bar chart .",
    "question_toks": [
      "For",
      "all",
      "course_name",
      "from",
      "courses",
      "table",
      ",",
      "group",
      "by",
      "the",
      "course",
      "name",
      "and",
      "count",
      "them",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and sort names in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and sort names in ascending order .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "sort",
      "names",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled , rank from high to low by the Y-axis .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled , rank from high to low by the Y-axis .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      ",",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Plot date claim settled by the number of date claim settled as a line chart , and list by the X from low to high .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC'}",
    "record_name": "2021@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Plot date claim settled by the number of date claim settled as a line chart , and list by the X from low to high .",
    "question_toks": [
      "Plot",
      "date",
      "claim",
      "settled",
      "by",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "ASC"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Return a bar chart on how many singers are from each country ? , sort the total number in desc order .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC'}",
    "record_name": "690@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on how many singers are from each country ? , sort the total number in desc order .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "sort",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "List the number of games for each away team and group by home team in a stacked bar chart The x-axis is away team , and rank in desc by the total number .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) DESC'}",
    "record_name": "1487@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of games for each away team and group by home team in a stacked bar chart The x-axis is away team , and rank in desc by the total number .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "away",
      "team",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "stacked",
      "bar",
      "chart",
      "The",
      "x-axis",
      "is",
      "away",
      "team",
      ",",
      "and",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Away_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality'}",
    "record_name": "2586",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "What is the total number of each fate ? Give me the result in a bar graph .",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate'}",
    "record_name": "2763",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of each fate ? Give me the result in a bar graph .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "each",
      "fate",
      "?",
      "Give",
      "me",
      "the",
      "result",
      "in",
      "a",
      "bar",
      "graph",
      "."
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "Show the proportion of all ministers using a pie chart .",
    "VQL": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister'}",
    "record_name": "2526",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show the proportion of all ministers using a pie chart .",
    "question_toks": [
      "Show",
      "the",
      "proportion",
      "of",
      "all",
      "ministers",
      "using",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Please use a bar chart to show the total amount of payment by each payment method code , could you sort by the names from high to low ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2011@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the total amount of payment by each payment method code , could you sort by the names from high to low ?",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "names",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Compute the total the total number across class as a pie chart .",
    "VQL": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2647",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Compute the total the total number across class as a pie chart .",
    "question_toks": [
      "Compute",
      "the",
      "total",
      "the",
      "total",
      "number",
      "across",
      "class",
      "as",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "How many parties of the time they leave office , binning the leave office into WEEKDAY interval , display by the how many left office in descending please .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) DESC', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY'}",
    "record_name": "2525@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they leave office , binning the leave office into WEEKDAY interval , display by the how many left office in descending please .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "leave",
      "office",
      ",",
      "binning",
      "the",
      "leave",
      "office",
      "into",
      "WEEKDAY",
      "interval",
      ",",
      "display",
      "by",
      "the",
      "how",
      "many",
      "left",
      "office",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "DESC",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "List the description of all aircrafts , and count them by a bar chart , list y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC'}",
    "record_name": "34@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the description of all aircrafts , and count them by a bar chart , list y-axis in descending order .",
    "question_toks": [
      "List",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Create a bar chart showing how many class across class , show by the X-axis in ascending .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC'}",
    "record_name": "2643@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many class across class , show by the X-axis in ascending .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "class",
      "across",
      "class",
      ",",
      "show",
      "by",
      "the",
      "X-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the Year interval and then shows the average amount of each payment , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "2003",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the Year interval and then shows the average amount of each payment , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "average",
      "amount",
      "of",
      "each",
      "payment",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Give me a pie to show the average of tonnage from different type .",
    "VQL": "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE'}",
    "record_name": "2764",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show the average of tonnage from different type .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "the",
      "average",
      "of",
      "tonnage",
      "from",
      "different",
      "type",
      "."
    ],
    "query": "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the description of all aircrafts , and show by the y axis in asc please .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC'}",
    "record_name": "34@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the description of all aircrafts , and show by the y axis in asc please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "asc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "I want to know the proportion of the total number for each minister .",
    "VQL": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister'}",
    "record_name": "2518",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of the total number for each minister .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "number",
      "for",
      "each",
      "minister",
      "."
    ],
    "query": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Give me a bar chart showing the total number of each minister , and show by the x-axis in asc .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC'}",
    "record_name": "2519@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart showing the total number of each minister , and show by the x-axis in asc .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "minister",
      ",",
      "and",
      "show",
      "by",
      "the",
      "x-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "For all course_name from courses table , group by the course name and count them with a bar chart , and list in ascending by the x axis please .",
    "VQL": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC'}",
    "record_name": "2880@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For all course_name from courses table , group by the course name and count them with a bar chart , and list in ascending by the x axis please .",
    "question_toks": [
      "For",
      "all",
      "course_name",
      "from",
      "courses",
      "table",
      ",",
      "group",
      "by",
      "the",
      "course",
      "name",
      "and",
      "count",
      "them",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "x",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name",
      "ORDER",
      "BY",
      "course_name",
      "ASC"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team , order in asc by the X-axis please .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC'}",
    "record_name": "1484@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team , order in asc by the X-axis please .",
    "question_toks": [
      "Give",
      "me",
      "line",
      "charts",
      "of",
      "worldwide",
      "gross",
      "the",
      "number",
      "of",
      "season",
      "over",
      "year",
      "season",
      "by",
      "major",
      "genres",
      "Away_team",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "X-axis",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , order by the y axis in desc .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\"}",
    "record_name": "2030@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , order by the y axis in desc .",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "List",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the descriptions for the aircrafts ? , and show by the Description in descending .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC'}",
    "record_name": "34@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the descriptions for the aircrafts ? , and show by the Description in descending .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?",
      ",",
      "and",
      "show",
      "by",
      "the",
      "Description",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "For each type , how many ships are there Plot them as bar chart , rank by the X-axis in ascending .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC'}",
    "record_name": "2762@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each type , how many ships are there Plot them as bar chart , rank by the X-axis in ascending .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "how",
      "many",
      "ships",
      "are",
      "there",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "X-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What is the total number of ships with different nationalities and ship types ? , and sort X in desc order please .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC'}",
    "record_name": "2755@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of ships with different nationalities and ship types ? , and sort X in desc order please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "ships",
      "with",
      "different",
      "nationalities",
      "and",
      "ship",
      "types",
      "?",
      ",",
      "and",
      "sort",
      "X",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "1999",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Bar chart x axis type y axis the total number , and show X-axis in asc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC'}",
    "record_name": "2762@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis type y axis the total number , and show X-axis in asc order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "type",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "and",
      "show",
      "X-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Bar graph to show the total number from different nationality , list in ascending by the the total number .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2587@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the total number from different nationality , list in ascending by the the total number .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "nationality",
      ",",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team , I want to display X in descending order please .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC'}",
    "record_name": "1484@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team , I want to display X in descending order please .",
    "question_toks": [
      "Give",
      "me",
      "line",
      "charts",
      "of",
      "worldwide",
      "gross",
      "the",
      "number",
      "of",
      "season",
      "over",
      "year",
      "season",
      "by",
      "major",
      "genres",
      "Away_team",
      ",",
      "I",
      "want",
      "to",
      "display",
      "X",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Display a bar chart for what are the age and hometown of teachers ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher'}",
    "record_name": "711",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the age and hometown of teachers ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country . Show the proportion .",
    "VQL": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "689",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show all countries and the number of singers in each country . Show the proportion .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      ".",
      "Show",
      "the",
      "proportion",
      "."
    ],
    "query": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type Show bar chart , sort Y in asc order .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC'}",
    "record_name": "2765@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the average tonnage of ships of each type Show bar chart , sort Y in asc order .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "sort",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Tonnage",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What are the age and hometown of teachers . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher'}",
    "record_name": "711",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the age and hometown of teachers . Visualize by bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Show names and seatings for all tracks opened after 2000 .",
    "VQL": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , Seating FROM track WHERE year_opened > 2000', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000'}",
    "record_name": "2645",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show names and seatings for all tracks opened after 2000 .",
    "question_toks": [
      "Show",
      "names",
      "and",
      "seatings",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      "."
    ],
    "query": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "Seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]"
  },
  {
    "nl_queries": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality . Show bar chart .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality'}",
    "record_name": "2587",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality . Show bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the phone numbers for each employee ? , could you list Y-axis from low to high order ?",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC'}",
    "record_name": "435@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the phone numbers for each employee ? , could you list Y-axis from low to high order ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      "?",
      ",",
      "could",
      "you",
      "list",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Count the section_description , and group by section_description with a bar chart , and could you rank the number of section description in ascending order please ?",
    "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC",
    "db_id": "student_transcripts_tracking",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC'}",
    "record_name": "2902@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          26,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the section_description , and group by section_description with a bar chart , and could you rank the number of section description in ascending order please ?",
    "question_toks": [
      "Count",
      "the",
      "section_description",
      ",",
      "and",
      "group",
      "by",
      "section_description",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "the",
      "number",
      "of",
      "section",
      "description",
      "in",
      "ascending",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "section_description",
      ",",
      "COUNT",
      "(",
      "section_description",
      ")",
      "FROM",
      "Sections",
      "GROUP",
      "BY",
      "section_description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "section_description",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]",
    "choose_schema_rat": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type .",
    "VQL": "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE'}",
    "record_name": "2764",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show different types of ships and the average tonnage of ships of each type .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "."
    ],
    "query": "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "I want to see trend of the number of season by season",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season'}",
    "record_name": "1494",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend of the number of season by season",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "season",
      "by",
      "season"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Season"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show me the comparison of the total number of every ship type with a bar graph .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type'}",
    "record_name": "2758",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the comparison of the total number of every ship type with a bar graph .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "comparison",
      "of",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "with",
      "a",
      "bar",
      "graph",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "2004",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Please compare the frequency of the position of the pilots using a bar chart , and could you order by the bars from high to low ?",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC'}",
    "record_name": "2585@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please compare the frequency of the position of the pilots using a bar chart , and could you order by the bars from high to low ?",
    "question_toks": [
      "Please",
      "compare",
      "the",
      "frequency",
      "of",
      "the",
      "position",
      "of",
      "the",
      "pilots",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "order",
      "by",
      "the",
      "bars",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "Position",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]@SEP@Table aircraft, columns = [*,Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion]"
  },
  {
    "nl_queries": "What is the number of singers for each country ? Show a bar chart , and list from low to high by the y-axis .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC'}",
    "record_name": "693@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the number of singers for each country ? Show a bar chart , and list from low to high by the y-axis .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "?",
      "Show",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "List the number of the description of all aircrafts , show by the Description in descending .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC'}",
    "record_name": "34@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the description of all aircrafts , show by the Description in descending .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "show",
      "by",
      "the",
      "Description",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Return a trend line with sorting the payment day in ascending order to show the total amount of payment by each payment day .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2014",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a trend line with sorting the payment day in ascending order to show the total amount of payment by each payment day .",
    "question_toks": [
      "Return",
      "a",
      "trend",
      "line",
      "with",
      "sorting",
      "the",
      "payment",
      "day",
      "in",
      "ascending",
      "order",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "day",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Stacked bar chart of the number of left office for with each Minister in each left office , could you sort by the Y in descending please ?",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY'}",
    "record_name": "2523@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Stacked bar chart of the number of left office for with each Minister in each left office , could you sort by the Y in descending please ?",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "left",
      "office",
      "for",
      "with",
      "each",
      "Minister",
      "in",
      "each",
      "left",
      "office",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "DESC",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show all ministers who do not belong to Progress Party , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister\"}",
    "record_name": "2517",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all ministers who do not belong to Progress Party , and count them by a bar chart",
    "question_toks": [
      "Show",
      "all",
      "ministers",
      "who",
      "do",
      "not",
      "belong",
      "to",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Can you draw a bar chart to show the number of positions of the pilots ? , and I want to rank by the Y from low to high .",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC'}",
    "record_name": "2585@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you draw a bar chart to show the number of positions of the pilots ? , and I want to rank by the Y from low to high .",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "number",
      "of",
      "positions",
      "of",
      "the",
      "pilots",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Position",
      ")",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Plot how many minister by grouped by minister as a bar graph",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister'}",
    "record_name": "2519",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot how many minister by grouped by minister as a bar graph",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "minister",
      "by",
      "grouped",
      "by",
      "minister",
      "as",
      "a",
      "bar",
      "graph"
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type Show bar chart , display in ascending by the the total number .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC'}",
    "record_name": "2762@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the number of ships of each type Show bar chart , display in ascending by the the total number .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type . Show bar chart .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE'}",
    "record_name": "2765",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the average tonnage of ships of each type . Show bar chart .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the number of games for each home team in a pie chart .",
    "VQL": "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team'}",
    "record_name": "1496",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show the number of games for each home team in a pie chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "home",
      "team",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , and could you show in desc by the bar please ?",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\"}",
    "record_name": "2030@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , and could you show in desc by the bar please ?",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "List",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "bar",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Show me how many type by type in a histogram , and order in asc by the X .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC'}",
    "record_name": "2758@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many type by type in a histogram , and order in asc by the X .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "type",
      "by",
      "type",
      "in",
      "a",
      "histogram",
      ",",
      "and",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis , and list in asc by the total number .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis , and list in asc by the total number .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "and",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Stack bar chart of how many home team vs Away_team based on home team",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team'}",
    "record_name": "1488",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stack bar chart of how many home team vs Away_team based on home team",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "home",
      "team",
      "vs",
      "Away_team",
      "based",
      "on",
      "home",
      "team"
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Home_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "List the number of games in each season and group by away team in a group line chart .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season'}",
    "record_name": "1484",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season and group by away team in a group line chart .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Season"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Create a bar chart showing age across hometown , could you display by the X in descending ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC'}",
    "record_name": "711@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing age across hometown , could you display by the X in descending ?",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "age",
      "across",
      "hometown",
      ",",
      "could",
      "you",
      "display",
      "by",
      "the",
      "X",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Visualize a bar chart for what is the age and hometown of every teacher ? , show Y-axis from high to low order please .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC'}",
    "record_name": "711@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what is the age and hometown of every teacher ? , show Y-axis from high to low order please .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?",
      ",",
      "show",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Show me how many type by type in a histogram",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type'}",
    "record_name": "2758",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many type by type in a histogram",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "type",
      "by",
      "type",
      "in",
      "a",
      "histogram"
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What is the total number of different nationalities of all ships ? Give me a bar graph , and I want to list by the Y from low to high .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC'}",
    "record_name": "2760@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of different nationalities of all ships ? Give me a bar graph , and I want to list by the Y from low to high .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "different",
      "nationalities",
      "of",
      "all",
      "ships",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "by",
      "the",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type in a bar chart .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE'}",
    "record_name": "2765",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the average tonnage of ships of each type in a bar chart .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What are the phone numbers for each employee , and count them by a bar chart , I want to show in descending by the how many phone .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC'}",
    "record_name": "435@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the phone numbers for each employee , and count them by a bar chart , I want to show in descending by the how many phone .",
    "question_toks": [
      "What",
      "are",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "how",
      "many",
      "phone",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the phone numbers of all employees , list by the total number in desc .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC'}",
    "record_name": "435@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the phone numbers of all employees , list by the total number in desc .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "list",
      "by",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]@SEP@Table Invoice, columns = [InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total]"
  },
  {
    "nl_queries": "Bar graph to show the average of amount payment from different payment method code , rank Payment_Method_Code in asc order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2012@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the average of amount payment from different payment method code , rank Payment_Method_Code in asc order .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "different",
      "payment",
      "method",
      "code",
      ",",
      "rank",
      "Payment_Method_Code",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Visualize a bar chart for what is the age and hometown of every teacher ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher'}",
    "record_name": "711",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what is the age and hometown of every teacher ?",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Show the number of games in each season and group by home team in a group line chart The x-axis is season , show Season in asc order .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1489@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Show the number of games in each season and group by home team in a group line chart The x-axis is season , show Season in asc order .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      "The",
      "x-axis",
      "is",
      "season",
      ",",
      "show",
      "Season",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the took office into WEEKDAY interval , could you rank y-axis in ascending order ?",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) ASC', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY'}",
    "record_name": "2524@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the took office into WEEKDAY interval , could you rank y-axis in ascending order ?",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "took",
      "office",
      "into",
      "WEEKDAY",
      "interval",
      ",",
      "could",
      "you",
      "rank",
      "y-axis",
      "in",
      "ascending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "ASC",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "What is the number of singers for each country ? Show a bar chart , and I want to rank y-axis in desc order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC'}",
    "record_name": "693@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the number of singers for each country ? Show a bar chart , and I want to rank y-axis in desc order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "?",
      "Show",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "y-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class , and could you display bar from low to high order please ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC'}",
    "record_name": "2648@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the race class and number of races in each class , and could you display bar from low to high order please ?",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      ",",
      "and",
      "could",
      "you",
      "display",
      "bar",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Draw a bar chart of description versus the number of description , show in ascending by the bars .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC'}",
    "record_name": "34@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of description versus the number of description , show in ascending by the bars .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "description",
      "versus",
      "the",
      "number",
      "of",
      "description",
      ",",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type Show bar chart , show in descending by the y-axis .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC'}",
    "record_name": "2765@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the average tonnage of ships of each type Show bar chart , show in descending by the y-axis .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Tonnage",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Find the number of web accelerators used for each Operating system , I want to display in ascending by the X .",
    "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system ASC",
    "db_id": "browser_web",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system ASC'}",
    "record_name": "372@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of web accelerators used for each Operating system , I want to display in ascending by the X .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "web",
      "accelerators",
      "used",
      "for",
      "each",
      "Operating",
      "system",
      ",",
      "I",
      "want",
      "to",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Operating_system",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "web_client_accelerator",
      "GROUP",
      "BY",
      "Operating_system",
      "ORDER",
      "BY",
      "Operating_system",
      "ASC"
    ],
    "choose_schema": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]",
    "choose_schema_rat": "Table accelerator_compatible_browser, columns = [*,accelerator_id, browser_id, compatible_since_year]"
  },
  {
    "nl_queries": "Create a bar chart showing age across hometown , I want to order x axis from low to high order please .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC'}",
    "record_name": "711@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing age across hometown , I want to order x axis from low to high order please .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "age",
      "across",
      "hometown",
      ",",
      "I",
      "want",
      "to",
      "order",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different classes of races , and how many races correspond to each ? , and list x axis in asc order please .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC'}",
    "record_name": "2648@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different classes of races , and how many races correspond to each ? , and list x axis in asc order please .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?",
      ",",
      "and",
      "list",
      "x",
      "axis",
      "in",
      "asc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "What is the total number of different nationalities of all ships ? Give me a bar graph , and sort by the Y-axis from high to low .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC'}",
    "record_name": "2760@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of different nationalities of all ships ? Give me a bar graph , and sort by the Y-axis from high to low .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "different",
      "nationalities",
      "of",
      "all",
      "ships",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "List the number of games in each season and group by away team in a group line chart , and order in asc by the X-axis please .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC'}",
    "record_name": "1484@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season and group by away team in a group line chart , and order in asc by the X-axis please .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      ",",
      "and",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "X-axis",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the phone numbers of all employees , and I want to show in asc by the y axis .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC'}",
    "record_name": "435@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the phone numbers of all employees , and I want to show in asc by the y axis .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "List the number of games in each season and group by away team in a group line chart , could you list x axis from low to high order ?",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC'}",
    "record_name": "1484@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season and group by away team in a group line chart , could you list x axis from low to high order ?",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "List the description of all aircrafts , and count them by a bar chart , list in asc by the Y .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC'}",
    "record_name": "34@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the description of all aircrafts , and count them by a bar chart , list in asc by the Y .",
    "question_toks": [
      "List",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Plot the number of payment method code by grouped by payment method code as a bar graph , and list by the total number from high to low .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC'}",
    "record_name": "2010@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of payment method code by grouped by payment method code as a bar graph , and list by the total number from high to low .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "payment",
      "method",
      "code",
      "by",
      "grouped",
      "by",
      "payment",
      "method",
      "code",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "list",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "For each type , what is the average tonnage , and rank by the Y in desc please .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC'}",
    "record_name": "2765@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each type , what is the average tonnage , and rank by the Y in desc please .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "what",
      "is",
      "the",
      "average",
      "tonnage",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Y",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Tonnage",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the took office into Year interval , and then split by the minister's name , and sort Y in desc order .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC', 'binning': 'BIN Took_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY YEAR'}",
    "record_name": "2520@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the took office into Year interval , and then split by the minister's name , and sort Y in desc order .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "took",
      "office",
      "into",
      "Year",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      ",",
      "and",
      "sort",
      "Y",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "DESC",
      "BIN",
      "Took_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the description of all aircrafts , and I want to rank X in desc order .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC'}",
    "record_name": "34@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the description of all aircrafts , and I want to rank X in desc order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "X",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "What are the number of the descriptions for the aircrafts ?",
    "VQL": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "33",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the number of the descriptions for the aircrafts ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?"
    ],
    "query": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart , and order Y-axis from low to high order .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart , and order Y-axis from low to high order .",
    "question_toks": [
      "Bin",
      "the",
      "settlement",
      "date",
      "for",
      "each",
      "settlement",
      "case",
      "into",
      "the",
      "day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]"
  },
  {
    "nl_queries": "Tell me the trend about the claim dates using a trend line .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled'}",
    "record_name": "2021",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Tell me the trend about the claim dates using a trend line .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "claim",
      "dates",
      "using",
      "a",
      "trend",
      "line",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Plot the number of phone by grouped by phone as a bar graph , and I want to show in descending by the y axis .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC'}",
    "record_name": "435@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of phone by grouped by phone as a bar graph , and I want to show in descending by the y axis .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "phone",
      "by",
      "grouped",
      "by",
      "phone",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Customer, columns = [*,CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you show from low to high by the total number ?",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC'}",
    "record_name": "3269@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you show from low to high by the total number ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "could",
      "you",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the phone numbers of all employees , display Phone in ascending order .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC'}",
    "record_name": "435@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the phone numbers of all employees , display Phone in ascending order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "display",
      "Phone",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Show me how many home team by home team in a histogram , and I want to show by the bar in ascending .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team ASC'}",
    "record_name": "1491@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many home team by home team in a histogram , and I want to show by the bar in ascending .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "home",
      "team",
      "by",
      "home",
      "team",
      "in",
      "a",
      "histogram",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "bar",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Home_team",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "What are the different classes of races , and how many races correspond to each Show bar chart , and could you sort by the X-axis from low to high ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC'}",
    "record_name": "2648@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different classes of races , and how many races correspond to each Show bar chart , and could you sort by the X-axis from low to high ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Give me a bar graph for what is the total number of last names of all candidates ? , I want to show from high to low by the how many last name .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC'}",
    "record_name": "2879@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar graph for what is the total number of last names of all candidates ? , I want to show from high to low by the how many last name .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "graph",
      "for",
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "last",
      "names",
      "of",
      "all",
      "candidates",
      "?",
      ",",
      "I",
      "want",
      "to",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "how",
      "many",
      "last",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "last_name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table People, columns = [*,person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]@SEP@Table Candidates, columns = [candidate_id, candidate_details]@SEP@Table Candidate_Assessments, columns = [candidate_id, qualification, assessment_date, asessment_outcome_code]"
  },
  {
    "nl_queries": "For each type , how many ships are there . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE'}",
    "record_name": "2762",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each type , how many ships are there . Plot them as bar chart .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "how",
      "many",
      "ships",
      "are",
      "there",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show sum(population) vs mean lifeexpectancy as scatter plot use a different color for each Continent",
    "VQL": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show sum(population) vs mean lifeexpectancy as scatter plot use a different color for each Continent",
    "question_toks": [
      "Show",
      "sum(population)",
      "vs",
      "mean",
      "lifeexpectancy",
      "as",
      "scatter",
      "plot",
      "use",
      "a",
      "different",
      "color",
      "for",
      "each",
      "Continent"
    ],
    "query": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart , show Y from low to high order please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart , show Y from low to high order please .",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Return a bar chart showing the total number of ships' nationalities .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality'}",
    "record_name": "2760",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing the total number of ships' nationalities .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "ships'",
      "nationalities",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Stacked bar chart of how many nationality for with each Type in each nationality , and could you show by the names in desc ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC'}",
    "record_name": "2755@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar chart of how many nationality for with each Type in each nationality , and could you show by the names in desc ?",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "nationality",
      "for",
      "with",
      "each",
      "Type",
      "in",
      "each",
      "nationality",
      ",",
      "and",
      "could",
      "you",
      "show",
      "by",
      "the",
      "names",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What is the total number of different nationalities of all ships ? Give me a bar graph , and list in asc by the X please .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2760@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of different nationalities of all ships ? Give me a bar graph , and list in asc by the X please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "different",
      "nationalities",
      "of",
      "all",
      "ships",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "X",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the trend about the total amount of each payment about the payment day , line chart . Note that , you should order the payment day in ascending order .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2014",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the total amount of each payment about the payment day , line chart . Note that , you should order the payment day in ascending order .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "total",
      "amount",
      "of",
      "each",
      "payment",
      "about",
      "the",
      "payment",
      "day",
      ",",
      "line",
      "chart",
      ".",
      "Note",
      "that",
      ",",
      "you",
      "should",
      "order",
      "the",
      "payment",
      "day",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Stacked bar chart of the number of left office for with each Minister in each left office , list the number of left office in desc order .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC', 'binning': 'BIN Left_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY YEAR'}",
    "record_name": "2521@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Stacked bar chart of the number of left office for with each Minister in each left office , list the number of left office in desc order .",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "left",
      "office",
      "for",
      "with",
      "each",
      "Minister",
      "in",
      "each",
      "left",
      "office",
      ",",
      "list",
      "the",
      "number",
      "of",
      "left",
      "office",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "DESC",
      "BIN",
      "Left_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality , and display by the names in desc .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2587@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality , and display by the names in desc .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      ",",
      "and",
      "display",
      "by",
      "the",
      "names",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart , and sort total number in ascending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart , and sort total number in ascending order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "day",
      "of",
      "the",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Stacked bar chart of how many away team for with each Home_team in each away team , and could you list y axis in desc order ?",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) DESC'}",
    "record_name": "1487@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar chart of how many away team for with each Home_team in each away team , and could you list y axis in desc order ?",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "away",
      "team",
      "for",
      "with",
      "each",
      "Home_team",
      "in",
      "each",
      "away",
      "team",
      ",",
      "and",
      "could",
      "you",
      "list",
      "y",
      "axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Away_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "List the number of games for each home team and group by away team in a stacked bar chart . The x-axis is home team .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team'}",
    "record_name": "1488",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of games for each home team and group by away team in a stacked bar chart . The x-axis is home team .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "home",
      "team",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "stacked",
      "bar",
      "chart",
      ".",
      "The",
      "x-axis",
      "is",
      "home",
      "team",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Home_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Stack bar chart of the number of type vs Nationality based on type , list by the bar in ascending .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC'}",
    "record_name": "2756@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stack bar chart of the number of type vs Nationality based on type , list by the bar in ascending .",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "type",
      "vs",
      "Nationality",
      "based",
      "on",
      "type",
      ",",
      "list",
      "by",
      "the",
      "bar",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Return a bar chart on how many singers are from each country ? , list by the bar from high to low .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC'}",
    "record_name": "690@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on how many singers are from each country ? , list by the bar from high to low .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "list",
      "by",
      "the",
      "bar",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "For each type , what is the average tonnage , show from low to high by the Type .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC'}",
    "record_name": "2765@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each type , what is the average tonnage , show from low to high by the Type .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "what",
      "is",
      "the",
      "average",
      "tonnage",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Type",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , and display Y-axis in asc order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , and display Y-axis in asc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "Y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , and order in desc by the X-axis .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , and order in desc by the X-axis .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "and",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Bin the claim date into Year interval and count them for visualizing a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into Year interval and count them for visualizing a bar chart .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "List the number of games in each season with a line chart .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game BIN Season BY YEAR'}",
    "record_name": "1495",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "List the number of games in each season with a line chart .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Plot season by how many season as a line chart , and could you rank by the X from high to low please ?",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1495@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Plot season by how many season as a line chart , and could you rank by the X from high to low please ?",
    "question_toks": [
      "Plot",
      "season",
      "by",
      "how",
      "many",
      "season",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "X",
      "from",
      "high",
      "to",
      "low",
      "please",
      "?"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3269",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality , and could you display total number from low to high order ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2587@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality , and could you display total number from low to high order ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      ",",
      "and",
      "could",
      "you",
      "display",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]@SEP@Table aircraft, columns = [*,Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion]"
  },
  {
    "nl_queries": "Show the number of games for each away team in a bar chart , and I want to sort by the the number of away team from low to high .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC'}",
    "record_name": "1493@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of games for each away team in a bar chart , and I want to sort by the the number of away team from low to high .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "away",
      "team",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "the",
      "number",
      "of",
      "away",
      "team",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show the number of games for each away team in a bar chart , and I want to sort by the X in asc please .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team ASC'}",
    "record_name": "1493@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of games for each away team in a bar chart , and I want to sort by the X in asc please .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "away",
      "team",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "X",
      "in",
      "asc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Away_team",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Give me a bar chart showing the total number of each minister , display by the bars in desc please .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC'}",
    "record_name": "2519@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart showing the total number of each minister , display by the bars in desc please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "minister",
      ",",
      "display",
      "by",
      "the",
      "bars",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Bar chart x axis type y axis the total number , list by the Y in desc please .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC'}",
    "record_name": "2762@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis type y axis the total number , list by the Y in desc please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "type",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "list",
      "by",
      "the",
      "Y",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Create a bar chart showing how many class across class",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class'}",
    "record_name": "2643",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many class across class",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "class",
      "across",
      "class"
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Give me a bar graph for what is the total number of last names of all candidates ? , I want to rank in asc by the how many last name please .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC'}",
    "record_name": "2879@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar graph for what is the total number of last names of all candidates ? , I want to rank in asc by the how many last name please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "graph",
      "for",
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "last",
      "names",
      "of",
      "all",
      "candidates",
      "?",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "in",
      "asc",
      "by",
      "the",
      "how",
      "many",
      "last",
      "name",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "last_name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table People, columns = [*,person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]@SEP@Table Candidates, columns = [*,candidate_id, candidate_details]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]@SEP@Table Candidates, columns = [candidate_id, candidate_details]@SEP@Table Candidate_Assessments, columns = [candidate_id, qualification, assessment_date, asessment_outcome_code]"
  },
  {
    "nl_queries": "What are the age and hometown of teachers Visualize by bar chart , rank y axis from high to low order please .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC'}",
    "record_name": "711@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the age and hometown of teachers Visualize by bar chart , rank y axis from high to low order please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "rank",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Show the number of games for each away team in a bar chart , I want to display by the Y-axis in desc .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) DESC'}",
    "record_name": "1493@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of games for each away team in a bar chart , I want to display by the Y-axis in desc .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "away",
      "team",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "display",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show me how many home team by home team in a histogram , I want to sort by the y axis from high to low .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC'}",
    "record_name": "1491@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many home team by home team in a histogram , I want to sort by the y axis from high to low .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "home",
      "team",
      "by",
      "home",
      "team",
      "in",
      "a",
      "histogram",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Plot season by how many season as a line chart , and display by the X-axis in asc .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1495@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Plot season by how many season as a line chart , and display by the X-axis in asc .",
    "question_toks": [
      "Plot",
      "season",
      "by",
      "how",
      "many",
      "season",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "display",
      "by",
      "the",
      "X-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Bar graph to show the total number from different nationality , sort total number in desc order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2587@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the total number from different nationality , sort total number in desc order .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "nationality",
      ",",
      "sort",
      "total",
      "number",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]@SEP@Table aircraft, columns = [*,Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion]"
  },
  {
    "nl_queries": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart , and rank y axis in descending order .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart , and rank y axis in descending order .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type in a bar chart .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE'}",
    "record_name": "2762",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the number of ships of each type in a bar chart .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country Show bar chart , and could you sort from high to low by the Y-axis ?",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC'}",
    "record_name": "690@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all countries and the number of singers in each country Show bar chart , and could you sort from high to low by the Y-axis ?",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Plot the number of phone by grouped by phone as a bar graph , could you list bar in descending order ?",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC'}",
    "record_name": "435@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of phone by grouped by phone as a bar graph , could you list bar in descending order ?",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "phone",
      "by",
      "grouped",
      "by",
      "phone",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "could",
      "you",
      "list",
      "bar",
      "in",
      "descending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "DESC"
    ],
    "choose_schema": "Table Customer, columns = [*,CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "day",
      "of",
      "the",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Give me a bar chart for mean tonnage of each type , and show from low to high by the bar .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC'}",
    "record_name": "2765@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for mean tonnage of each type , and show from low to high by the bar .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "mean",
      "tonnage",
      "of",
      "each",
      "type",
      ",",
      "and",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What are the number of the descriptions for the aircrafts ? , sort bar in ascending order .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC'}",
    "record_name": "34@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the descriptions for the aircrafts ? , sort bar in ascending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?",
      ",",
      "sort",
      "bar",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "What are the age and hometown of teachers Visualize by bar chart , and I want to show Y from low to high order please .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC'}",
    "record_name": "711@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the age and hometown of teachers Visualize by bar chart , and I want to show Y from low to high order please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "A bar chart about what is the age and hometown of every teacher ? , list from high to low by the bars .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC'}",
    "record_name": "711@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what is the age and hometown of every teacher ? , list from high to low by the bars .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?",
      ",",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "List the description of all aircrafts , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "34",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the description of all aircrafts , and count them by a bar chart",
    "question_toks": [
      "List",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Tell me the trend about the claim dates using a trend line , and sort by the Date_Claim_Settled in desc .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC'}",
    "record_name": "2021@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Tell me the trend about the claim dates using a trend line , and sort by the Date_Claim_Settled in desc .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "claim",
      "dates",
      "using",
      "a",
      "trend",
      "line",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "Date_Claim_Settled",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "DESC"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show the number of games for each home team in a bar chart , and list by the X in ascending .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team ASC'}",
    "record_name": "1491@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of games for each home team in a bar chart , and list by the X in ascending .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "home",
      "team",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "X",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Home_team",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show the number of singers in each country with a bar chart , display by the the number of country in asc .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC'}",
    "record_name": "693@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of singers in each country with a bar chart , display by the the number of country in asc .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "the",
      "number",
      "of",
      "country",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different classes of races , and how many races correspond to each ? , and rank y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC'}",
    "record_name": "2648@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different classes of races , and how many races correspond to each ? , and rank y-axis in descending order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?",
      ",",
      "and",
      "rank",
      "y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "What are the number of the descriptions for the aircrafts ?",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "34",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the descriptions for the aircrafts ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?"
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "What is the total number of every ship type by categorizing by nationality ? , list by the bar in ascending .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC'}",
    "record_name": "2756@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of every ship type by categorizing by nationality ? , list by the bar in ascending .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "by",
      "categorizing",
      "by",
      "nationality",
      "?",
      ",",
      "list",
      "by",
      "the",
      "bar",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Return a trend line to show the average amount of payment by each payment day .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2015",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a trend line to show the average amount of payment by each payment day .",
    "question_toks": [
      "Return",
      "a",
      "trend",
      "line",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "day",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Draw a bar chart of country versus the total number , rank y axis in ascending order .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC'}",
    "record_name": "690@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of country versus the total number , rank y axis in ascending order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "country",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "rank",
      "y",
      "axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Show the number of singers in each country with a pie chart .",
    "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country'}",
    "record_name": "698",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show the number of singers in each country with a pie chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bar chart x axis away team y axis the number of away team",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team'}",
    "record_name": "1493",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis away team y axis the number of away team",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "away",
      "team",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "away",
      "team"
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Stacked bar of took office and how many took office colored by Minister",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY WEEKDAY'}",
    "record_name": "2522",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Stacked bar of took office and how many took office colored by Minister",
    "question_toks": [
      "Stacked",
      "bar",
      "of",
      "took",
      "office",
      "and",
      "how",
      "many",
      "took",
      "office",
      "colored",
      "by",
      "Minister"
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Create a pie chart showing total number of amount payment across payment method code .",
    "VQL": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2013",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing total number of amount payment across payment method code .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "total",
      "number",
      "of",
      "amount",
      "payment",
      "across",
      "payment",
      "method",
      "code",
      "."
    ],
    "query": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type Show bar chart , and show from low to high by the bar .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC'}",
    "record_name": "2765@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the average tonnage of ships of each type Show bar chart , and show from low to high by the bar .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What are the age and hometown of teachers Visualize by bar chart , and rank Hometown in asc order .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC'}",
    "record_name": "711@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the age and hometown of teachers Visualize by bar chart , and rank Hometown in asc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "Hometown",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Give me a pie chart show the proportion of the number of course names in the course table .",
    "VQL": "Visualize PIE SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
    "db_id": "student_assessment",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name', 'binning': ''}, 'VQL': 'Visualize PIE SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name'}",
    "record_name": "2881",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie chart show the proportion of the number of course names in the course table .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "chart",
      "show",
      "the",
      "proportion",
      "of",
      "the",
      "number",
      "of",
      "course",
      "names",
      "in",
      "the",
      "course",
      "table",
      "."
    ],
    "query": "Visualize PIE SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Create a pie chart showing how many away team across away team .",
    "VQL": "Visualize PIE SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team'}",
    "record_name": "1492",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing how many away team across away team .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "how",
      "many",
      "away",
      "team",
      "across",
      "away",
      "team",
      "."
    ],
    "query": "Visualize PIE SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart , and I want to sort by the y axis in descending .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart , and I want to sort by the y axis in descending .",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show the average of age from each country , and show from low to high by the X please .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "696@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the average of age from each country , and show from low to high by the X please .",
    "question_toks": [
      "Show",
      "the",
      "average",
      "of",
      "age",
      "from",
      "each",
      "country",
      ",",
      "and",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the took office into WEEKDAY interval",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party BIN Took_office BY WEEKDAY'}",
    "record_name": "2524",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the took office into WEEKDAY interval",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "took",
      "office",
      "into",
      "WEEKDAY",
      "interval"
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Stacked bar chart of how many away team for with each Home_team in each away team , and sort from low to high by the bars .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team ASC'}",
    "record_name": "1487@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar chart of how many away team for with each Home_team in each away team , and sort from low to high by the bars .",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "away",
      "team",
      "for",
      "with",
      "each",
      "Home_team",
      "in",
      "each",
      "away",
      "team",
      ",",
      "and",
      "sort",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Away_team",
      "ORDER",
      "BY",
      "Away_team",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Bar graph to show the average of amount payment from different payment method code , could you list the average of amount payment from high to low order ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC'}",
    "record_name": "2012@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the average of amount payment from different payment method code , could you list the average of amount payment from high to low order ?",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "different",
      "payment",
      "method",
      "code",
      ",",
      "could",
      "you",
      "list",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country . Show bar chart .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "690",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all countries and the number of singers in each country . Show bar chart .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Give me the proportion of the total number of every ship type .",
    "VQL": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type'}",
    "record_name": "2757",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me the proportion of the total number of every ship type .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "."
    ],
    "query": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "I want to see trend the number of season over season by Home_team , and show x-axis in ascending order .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC'}",
    "record_name": "1482@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend the number of season over season by Home_team , and show x-axis in ascending order .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "number",
      "of",
      "season",
      "over",
      "season",
      "by",
      "Home_team",
      ",",
      "and",
      "show",
      "x-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show me the comparison of the total number of all ships' nationalities with a bar graph , and order Nationality in asc order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2760@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the comparison of the total number of all ships' nationalities with a bar graph , and order Nationality in asc order .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "comparison",
      "of",
      "the",
      "total",
      "number",
      "of",
      "all",
      "ships'",
      "nationalities",
      "with",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "order",
      "Nationality",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Stacked bar chart of how many away team for with each Home_team in each away team , and I want to sort X-axis from high to low order please .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team DESC'}",
    "record_name": "1487@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar chart of how many away team for with each Home_team in each away team , and I want to sort X-axis from high to low order please .",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "away",
      "team",
      "for",
      "with",
      "each",
      "Home_team",
      "in",
      "each",
      "away",
      "team",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Away_team",
      "ORDER",
      "BY",
      "Away_team",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Give me a pie to show how many home team from different home team .",
    "VQL": "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team'}",
    "record_name": "1496",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show how many home team from different home team .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "how",
      "many",
      "home",
      "team",
      "from",
      "different",
      "home",
      "team",
      "."
    ],
    "query": "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Show the number of games in each season and group by away team in a group line chart The x-axis is season , list by the X-axis in asc .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1490@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Show the number of games in each season and group by away team in a group line chart The x-axis is season , list by the X-axis in asc .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      "The",
      "x-axis",
      "is",
      "season",
      ",",
      "list",
      "by",
      "the",
      "X-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "List the number of games in each season with a line chart , and show x-axis in ascending order .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1495@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "List the number of games in each season with a line chart , and show x-axis in ascending order .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "show",
      "x-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show me a stacked bar graph , the x-axis is the nationality of ship , and the y-axis is their total number of different nationality and split by ship type , and could you display y axis in descending order ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC'}",
    "record_name": "2755@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a stacked bar graph , the x-axis is the nationality of ship , and the y-axis is their total number of different nationality and split by ship type , and could you display y axis in descending order ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "stacked",
      "bar",
      "graph",
      ",",
      "the",
      "x-axis",
      "is",
      "the",
      "nationality",
      "of",
      "ship",
      ",",
      "and",
      "the",
      "y-axis",
      "is",
      "their",
      "total",
      "number",
      "of",
      "different",
      "nationality",
      "and",
      "split",
      "by",
      "ship",
      "type",
      ",",
      "and",
      "could",
      "you",
      "display",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made , could you list y-axis from low to high order ?",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made , could you list y-axis from low to high order ?",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made",
      ",",
      "could",
      "you",
      "list",
      "y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis , sort by the y-axis from low to high .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis , sort by the y-axis from low to high .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "sort",
      "by",
      "the",
      "y-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Give me the payment Id , and the amount for all the payments processed with Visa using a scatter chart .",
    "VQL": "Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': \"SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': ''}, 'VQL': \"Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\"}",
    "record_name": "2032",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Give me the payment Id , and the amount for all the payments processed with Visa using a scatter chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "payment",
      "Id",
      ",",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "using",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "Payment_ID",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type with a pie chart .",
    "VQL": "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE'}",
    "record_name": "2761",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show different types of ships and the number of ships of each type with a pie chart .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each class , display in asc by the Y-axis .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC'}",
    "record_name": "2648@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each class , display in asc by the Y-axis .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "class",
      ",",
      "display",
      "in",
      "asc",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Return a bar chart on how many singers are from each country ?",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "690",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on how many singers are from each country ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bar chart x axis minister y axis how many minister , list names from low to high order .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC'}",
    "record_name": "2527@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis minister y axis how many minister , list names from low to high order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "minister",
      "y",
      "axis",
      "how",
      "many",
      "minister",
      ",",
      "list",
      "names",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different classes of races , and how many races correspond to each ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2648",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different classes of races , and how many races correspond to each ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Create a bar chart showing age across hometown , and I want to rank Y from high to low order .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC'}",
    "record_name": "711@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing age across hometown , and I want to rank Y from high to low order .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "age",
      "across",
      "hometown",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Draw a bar chart showing the total number of every ship type by categorizing by nationality , and list x-axis in descending order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC'}",
    "record_name": "2756@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart showing the total number of every ship type by categorizing by nationality , and list x-axis in descending order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "by",
      "categorizing",
      "by",
      "nationality",
      ",",
      "and",
      "list",
      "x-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the number of games for each home team in a bar chart .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team'}",
    "record_name": "1491",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of games for each home team in a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "home",
      "team",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Bar graph to show the average of amount payment from different payment method code , and could you rank in ascending by the the average of amount payment please ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC'}",
    "record_name": "2012@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the average of amount payment from different payment method code , and could you rank in ascending by the the average of amount payment please ?",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "different",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Stack bar chart of how many home team vs Away_team based on home team , display how many home team from low to high order .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC'}",
    "record_name": "1488@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stack bar chart of how many home team vs Away_team based on home team , display how many home team from low to high order .",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "home",
      "team",
      "vs",
      "Away_team",
      "based",
      "on",
      "home",
      "team",
      ",",
      "display",
      "how",
      "many",
      "home",
      "team",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Home_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Bar chart x axis minister y axis how many minister , display the number of minister in descending order .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC'}",
    "record_name": "2527@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis minister y axis how many minister , display the number of minister in descending order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "minister",
      "y",
      "axis",
      "how",
      "many",
      "minister",
      ",",
      "display",
      "the",
      "number",
      "of",
      "minister",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "I want to see trend of the number of season by season , and order by the X-axis in ascending .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC'}",
    "record_name": "1494@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend of the number of season by season , and order by the X-axis in ascending .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "season",
      "by",
      "season",
      ",",
      "and",
      "order",
      "by",
      "the",
      "X-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class with a bar chart .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2648",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the race class and number of races in each class with a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Compute the total how many country across country as a pie chart .",
    "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country'}",
    "record_name": "698",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Compute the total how many country across country as a pie chart .",
    "question_toks": [
      "Compute",
      "the",
      "total",
      "how",
      "many",
      "country",
      "across",
      "country",
      "as",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Please use a bar chart to show the total amount of payment by each payment method code .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2011",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the total amount of payment by each payment method code .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "For each type , what is the average tonnage . Plot them as pie chart .",
    "VQL": "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE'}",
    "record_name": "2764",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "For each type , what is the average tonnage . Plot them as pie chart .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "what",
      "is",
      "the",
      "average",
      "tonnage",
      ".",
      "Plot",
      "them",
      "as",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Plot the number of phone by grouped by phone as a bar graph",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "db_id": "chinook_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone'}",
    "record_name": "435",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of phone by grouped by phone as a bar graph",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "phone",
      "by",
      "grouped",
      "by",
      "phone",
      "as",
      "a",
      "bar",
      "graph"
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone"
    ],
    "choose_schema": "Table Customer, columns = [*,CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Stack bar chart of how many took office vs Minister based on took office , list by the y-axis from high to low please .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC', 'binning': 'BIN Took_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY YEAR'}",
    "record_name": "2520@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 0
    },
    "question": "Stack bar chart of how many took office vs Minister based on took office , list by the y-axis from high to low please .",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "took",
      "office",
      "vs",
      "Minister",
      "based",
      "on",
      "took",
      "office",
      ",",
      "list",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "DESC",
      "BIN",
      "Took_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , sort names in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , sort names in ascending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "sort",
      "names",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type Show bar chart , list in ascending by the names .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC'}",
    "record_name": "2762@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the number of ships of each type Show bar chart , list in ascending by the names .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "List the phone numbers of all employees , and count them by a bar chart , and rank X-axis in desc order please .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC'}",
    "record_name": "435@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the phone numbers of all employees , and count them by a bar chart , and rank X-axis in desc order please .",
    "question_toks": [
      "List",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "X-axis",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled , order Y-axis from low to high order .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled , order Y-axis from low to high order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      ",",
      "order",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country in a bar chart , and order Y from low to high order .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC'}",
    "record_name": "690@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all countries and the number of singers in each country in a bar chart , and order Y from low to high order .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show the number of games in each season and group by home team in a group line chart The x-axis is season , I want to show in ascending by the x-axis .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1489@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Show the number of games in each season and group by home team in a group line chart The x-axis is season , I want to show in ascending by the x-axis .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      "The",
      "x-axis",
      "is",
      "season",
      ",",
      "I",
      "want",
      "to",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class .",
    "VQL": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2647",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show the race class and number of races in each class .",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      "."
    ],
    "query": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "The trend about the the number of season of different Home_team over the season , order from high to low by the x-axis please .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1489@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "The trend about the the number of season of different Home_team over the season , order from high to low by the x-axis please .",
    "question_toks": [
      "The",
      "trend",
      "about",
      "the",
      "the",
      "number",
      "of",
      "season",
      "of",
      "different",
      "Home_team",
      "over",
      "the",
      "season",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x-axis",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "What is the age of every singer ? Return a bar chart in descending order of age ?",
    "VQL": "Visualize BAR SELECT Name , Age FROM singer ORDER BY age DESC",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Age FROM singer ORDER BY age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Age FROM singer ORDER BY age DESC'}",
    "record_name": "697",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the age of every singer ? Return a bar chart in descending order of age ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "of",
      "every",
      "singer",
      "?",
      "Return",
      "a",
      "bar",
      "chart",
      "in",
      "descending",
      "order",
      "of",
      "age",
      "?"
    ],
    "query": "Visualize BAR SELECT Name , Age FROM singer ORDER BY age DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Age",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "choose_schema": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Create a bar chart showing age across hometown",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher'}",
    "record_name": "711",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing age across hometown",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "age",
      "across",
      "hometown"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "What is the total number of different nationalities of all ships ? Give me a bar graph , list X-axis in desc order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2760@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of different nationalities of all ships ? Give me a bar graph , list X-axis in desc order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "different",
      "nationalities",
      "of",
      "all",
      "ships",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "graph",
      ",",
      "list",
      "X-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart , order from high to low by the y axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart , order from high to low by the y axis .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled , and sort y-axis in ascending order please .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled , and sort y-axis in ascending order please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      ",",
      "and",
      "sort",
      "y-axis",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Bar graph to show the total number from different nationality",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality'}",
    "record_name": "2587",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the total number from different nationality",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "nationality"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "For each type , how many ships are there Plot them as bar chart , list y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC'}",
    "record_name": "2762@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each type , how many ships are there Plot them as bar chart , list y-axis in asc order .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "how",
      "many",
      "ships",
      "are",
      "there",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "list",
      "y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "I want to see trend the number of season over season by Home_team",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season'}",
    "record_name": "1482",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend the number of season over season by Home_team",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "number",
      "of",
      "season",
      "over",
      "season",
      "by",
      "Home_team"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Season"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Compare the frequency of each payment method code using a bar chart , I want to display by the x axis in asc .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2010@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the frequency of each payment method code using a bar chart , I want to display by the x axis in asc .",
    "question_toks": [
      "Compare",
      "the",
      "frequency",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "display",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the names and surface areas of the 5 largest countries . Visualize by bar chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , and list from high to low by the Y-axis .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , and list from high to low by the Y-axis .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "and",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Give me a histogram to show the date and the amount for all the payments processed with Visa , order y axis in descending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\"}",
    "record_name": "2030@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram to show the date and the amount for all the payments processed with Visa , order y axis in descending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "to",
      "show",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "order",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Compare the total number of each fate with a bar chart , list X-axis in asc order .",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC'}",
    "record_name": "2763@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of each fate with a bar chart , list X-axis in asc order .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "each",
      "fate",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "X-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "Fate",
      "ASC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "Give me a histogram for how many singers are from each country ?",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "690",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for how many singers are from each country ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bar chart of the number of position from each position",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position'}",
    "record_name": "2585",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the number of position from each position",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "position",
      "from",
      "each",
      "position"
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the descriptions for the aircrafts ? , and sort by the names in ascending please .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC'}",
    "record_name": "34@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the descriptions for the aircrafts ? , and sort by the names in ascending please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "names",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]@SEP@Table pilot, columns = [*,Pilot_Id, Name, Age]"
  },
  {
    "nl_queries": "Bar graph to show the number of last name from different last name , sort by the Y from low to high please .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC'}",
    "record_name": "2879@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of last name from different last name , sort by the Y from low to high please .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "last",
      "name",
      "from",
      "different",
      "last",
      "name",
      ",",
      "sort",
      "by",
      "the",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "last_name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table People, columns = [*,person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]"
  },
  {
    "nl_queries": "Bar chart x axis minister y axis how many minister , could you sort by the X-axis in descending ?",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC'}",
    "record_name": "2527@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis minister y axis how many minister , could you sort by the X-axis in descending ?",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "minister",
      "y",
      "axis",
      "how",
      "many",
      "minister",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "X-axis",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show me how many home team by home team in a histogram , and I want to order how many home team in ascending order .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) ASC'}",
    "record_name": "1491@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many home team by home team in a histogram , and I want to order how many home team in ascending order .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "home",
      "team",
      "by",
      "home",
      "team",
      "in",
      "a",
      "histogram",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "how",
      "many",
      "home",
      "team",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "How many total amounts of payments by each method code ? You can give me a bar chart , list by the y axis in desc .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC'}",
    "record_name": "2011@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total amounts of payments by each method code ? You can give me a bar chart , list by the y axis in desc .",
    "question_toks": [
      "How",
      "many",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Return a histogram on what are the names and seatings for all tracks opened after 2000 , ordered by seating ?",
    "VQL": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating'}",
    "record_name": "2646",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on what are the names and seatings for all tracks opened after 2000 , ordered by seating ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "what",
      "are",
      "the",
      "names",
      "and",
      "seatings",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      ",",
      "ordered",
      "by",
      "seating",
      "?"
    ],
    "query": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000",
      "ORDER",
      "BY",
      "seating"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]"
  },
  {
    "nl_queries": "What are the names and seatings for all tracks opened after 2000 , ordered by seating . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating'}",
    "record_name": "2646",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and seatings for all tracks opened after 2000 , ordered by seating . Visualize by bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "seatings",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      ",",
      "ordered",
      "by",
      "seating",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000",
      "ORDER",
      "BY",
      "seating"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]"
  },
  {
    "nl_queries": "Show me how many home team by home team in a histogram , rank from high to low by the bar please .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC'}",
    "record_name": "1491@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many home team by home team in a histogram , rank from high to low by the bar please .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "home",
      "team",
      "by",
      "home",
      "team",
      "in",
      "a",
      "histogram",
      ",",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "bar",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Home_team",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Plot date claim settled by the number of date claim settled as a line chart , and I want to order in desc by the X .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC'}",
    "record_name": "2021@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Plot date claim settled by the number of date claim settled as a line chart , and I want to order in desc by the X .",
    "question_toks": [
      "Plot",
      "date",
      "claim",
      "settled",
      "by",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "DESC"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country in a bar chart , show Y-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC'}",
    "record_name": "690@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all countries and the number of singers in each country in a bar chart , show Y-axis from high to low order .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bar graph to show how many nationality from different nationality , and order Nationality in asc order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2760@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show how many nationality from different nationality , and order Nationality in asc order .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "nationality",
      "from",
      "different",
      "nationality",
      ",",
      "and",
      "order",
      "Nationality",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What is the total number of each fate ? Give me the result in a bar graph , list X-axis in asc order .",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC'}",
    "record_name": "2763@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of each fate ? Give me the result in a bar graph , list X-axis in asc order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "each",
      "fate",
      "?",
      "Give",
      "me",
      "the",
      "result",
      "in",
      "a",
      "bar",
      "graph",
      ",",
      "list",
      "X-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "Fate",
      "ASC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "Bar chart x axis left office y axis the number of left office",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party BIN Left_office BY WEEKDAY'}",
    "record_name": "2525",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis left office y axis the number of left office",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "left",
      "office",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "left",
      "office"
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Visualize a bar chart for what is the age and hometown of every teacher ? , and rank Hometown in asc order .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC'}",
    "record_name": "711@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what is the age and hometown of every teacher ? , and rank Hometown in asc order .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?",
      ",",
      "and",
      "rank",
      "Hometown",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Bar chart x axis away team y axis the number of away team , and show by the X-axis in desc .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team DESC'}",
    "record_name": "1493@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis away team y axis the number of away team , and show by the X-axis in desc .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "away",
      "team",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "away",
      "team",
      ",",
      "and",
      "show",
      "by",
      "the",
      "X-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Away_team",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a scatter chart shows their average life expectancy and the total population of each continent",
    "VQL": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a scatter chart shows their average life expectancy and the total population of each continent",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "scatter",
      "chart",
      "shows",
      "their",
      "average",
      "life",
      "expectancy",
      "and",
      "the",
      "total",
      "population",
      "of",
      "each",
      "continent"
    ],
    "query": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "What are the descriptions for the aircrafts , and count them by a bar chart , and order by the total number in descending please .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC'}",
    "record_name": "34@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the descriptions for the aircrafts , and count them by a bar chart , and order by the total number in descending please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "List the number of games for each away team and group by home team in a stacked bar chart The x-axis is away team , could you display from low to high by the Y ?",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) ASC'}",
    "record_name": "1487@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of games for each away team and group by home team in a stacked bar chart The x-axis is away team , could you display from low to high by the Y ?",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "away",
      "team",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "stacked",
      "bar",
      "chart",
      "The",
      "x-axis",
      "is",
      "away",
      "team",
      ",",
      "could",
      "you",
      "display",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Y",
      "?"
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Away_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show me the comparison of the total number of all ships' nationalities with a bar graph .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality'}",
    "record_name": "2760",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the comparison of the total number of all ships' nationalities with a bar graph .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "comparison",
      "of",
      "the",
      "total",
      "number",
      "of",
      "all",
      "ships'",
      "nationalities",
      "with",
      "a",
      "bar",
      "graph",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class with a bar chart , could you show in ascending by the total number ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC'}",
    "record_name": "2648@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the race class and number of races in each class with a bar chart , could you show in ascending by the total number ?",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart , and display y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart , and display y-axis in asc order .",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show names and seatings , ordered by seating for all tracks opened after 2000 . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating'}",
    "record_name": "2646",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show names and seatings , ordered by seating for all tracks opened after 2000 . Plot them as bar chart .",
    "question_toks": [
      "Show",
      "names",
      "and",
      "seatings",
      ",",
      "ordered",
      "by",
      "seating",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000",
      "ORDER",
      "BY",
      "seating"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]"
  },
  {
    "nl_queries": "Show the number of singers in each country with a bar chart , and sort bar from high to low order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "693@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of singers in each country with a bar chart , and sort bar from high to low order .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "bar",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Return a histogram on what are the names and areas of countries with the top 5 largest area ?",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on what are the names and areas of countries with the top 5 largest area ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "what",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "What is the number of singers for each country ? Show a bar chart .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country'}",
    "record_name": "693",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the number of singers for each country ? Show a bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "?",
      "Show",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "I want to see trend of the number of season by season , and order in descending by the X .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC'}",
    "record_name": "1494@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend of the number of season by season , and order in descending by the X .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "season",
      "by",
      "season",
      ",",
      "and",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Draw a bar chart of country versus the total number , could you rank by the bar in desc ?",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC'}",
    "record_name": "690@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of country versus the total number , could you rank by the bar in desc ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "country",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "bar",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "For each type , what is the average tonnage , and show X in desc order .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC'}",
    "record_name": "2765@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each type , what is the average tonnage , and show X in desc order .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "what",
      "is",
      "the",
      "average",
      "tonnage",
      ",",
      "and",
      "show",
      "X",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the left office into Weekday interval , and then split by the minister's name , and display in ascending by the Y-axis .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY'}",
    "record_name": "2523@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the left office into Weekday interval , and then split by the minister's name , and display in ascending by the Y-axis .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "left",
      "office",
      "into",
      "Weekday",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      ",",
      "and",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "ASC",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Create a bar chart showing how many class across class , could you order Y-axis in desc order ?",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC'}",
    "record_name": "2643@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many class across class , could you order Y-axis in desc order ?",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "class",
      "across",
      "class",
      ",",
      "could",
      "you",
      "order",
      "Y-axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made , I want to sort in descending by the how many date claim made please .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made , I want to sort in descending by the how many date claim made please .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "how",
      "many",
      "date",
      "claim",
      "made",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the Year interval and then compute the total amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "1996",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the Year interval and then compute the total amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "then",
      "compute",
      "the",
      "total",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Find the number of web accelerators used for each Operating system , show from high to low by the total number .",
    "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC",
    "db_id": "browser_web",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC'}",
    "record_name": "372@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of web accelerators used for each Operating system , show from high to low by the total number .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "web",
      "accelerators",
      "used",
      "for",
      "each",
      "Operating",
      "system",
      ",",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Operating_system",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "web_client_accelerator",
      "GROUP",
      "BY",
      "Operating_system",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]",
    "choose_schema_rat": "Table accelerator_compatible_browser, columns = [*,accelerator_id, browser_id, compatible_since_year]"
  },
  {
    "nl_queries": "Please compare the frequency of the position of the pilots using a bar chart , and could you list in descending by the Y-axis ?",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC'}",
    "record_name": "2585@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please compare the frequency of the position of the pilots using a bar chart , and could you list in descending by the Y-axis ?",
    "question_toks": [
      "Please",
      "compare",
      "the",
      "frequency",
      "of",
      "the",
      "position",
      "of",
      "the",
      "pilots",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Position",
      ")",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "What is the total number of each ship type ? Give me a pie chart .",
    "VQL": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type'}",
    "record_name": "2757",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What is the total number of each ship type ? Give me a pie chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "?",
      "Give",
      "me",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then compute the average amount of each payment , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "2007",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then compute the average amount of each payment , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "compute",
      "the",
      "average",
      "amount",
      "of",
      "each",
      "payment",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Visualize a bar chart for what is the age and hometown of every teacher ? , and I want to display by the y axis in ascending .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC'}",
    "record_name": "711@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what is the age and hometown of every teacher ? , and I want to display by the y axis in ascending .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "List the number of the phone numbers of all employees , I want to show in descending by the y axis .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC'}",
    "record_name": "435@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the phone numbers of all employees , I want to show in descending by the y axis .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "I",
      "want",
      "to",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Show the number of games in each season and group by away team in a group line chart The x-axis is season , could you display in desc by the X-axis ?",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1490@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Show the number of games in each season and group by away team in a group line chart The x-axis is season , could you display in desc by the X-axis ?",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      "The",
      "x-axis",
      "is",
      "season",
      ",",
      "could",
      "you",
      "display",
      "in",
      "desc",
      "by",
      "the",
      "X-axis",
      "?"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "What are the age and hometown of teachers Visualize by bar chart , and rank in descending by the X-axis please .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC'}",
    "record_name": "711@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the age and hometown of teachers Visualize by bar chart , and rank in descending by the X-axis please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "X-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then compute the average amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "2001",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then compute the average amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "compute",
      "the",
      "average",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Stack bar chart of how many took office vs Minister based on took office",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister', 'binning': 'BIN Took_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY YEAR'}",
    "record_name": "2520",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 0
    },
    "question": "Stack bar chart of how many took office vs Minister based on took office",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "took",
      "office",
      "vs",
      "Minister",
      "based",
      "on",
      "took",
      "office"
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "BIN",
      "Took_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class , and could you rank Y-axis in desc order ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC'}",
    "record_name": "2648@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the race class and number of races in each class , and could you rank Y-axis in desc order ?",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "Y-axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Which ministers are not a part of the Progress Party , and count them by a pie chart",
    "VQL": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister\", 'binning': ''}, 'VQL': \"Visualize PIE SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister\"}",
    "record_name": "2516",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Which ministers are not a part of the Progress Party , and count them by a pie chart",
    "question_toks": [
      "Which",
      "ministers",
      "are",
      "not",
      "a",
      "part",
      "of",
      "the",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "pie",
      "chart"
    ],
    "query": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Give me a histogram to show the date and the amount for all the payments processed with Visa , and show in asc by the Y-axis please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\"}",
    "record_name": "2030@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram to show the date and the amount for all the payments processed with Visa , and show in asc by the Y-axis please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "to",
      "show",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "and",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "Y-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team , and order in asc by the names .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team ASC'}",
    "record_name": "1488@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team , and order in asc by the names .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "home",
      "team",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "stacked",
      "bar",
      "chart",
      "The",
      "x-axis",
      "is",
      "home",
      "team",
      ",",
      "and",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Home_team",
      "ORDER",
      "BY",
      "Home_team",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Bar graph to show how many nationality from different nationality",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality'}",
    "record_name": "2760",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show how many nationality from different nationality",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "nationality",
      "from",
      "different",
      "nationality"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Give me a bar chart for mean tonnage of each type , show by the bar in desc .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC'}",
    "record_name": "2765@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for mean tonnage of each type , show by the bar in desc .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "mean",
      "tonnage",
      "of",
      "each",
      "type",
      ",",
      "show",
      "by",
      "the",
      "bar",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Bar graph to show the number of last name from different last name , I want to order Y-axis from high to low order .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC'}",
    "record_name": "2879@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of last name from different last name , I want to order Y-axis from high to low order .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "last",
      "name",
      "from",
      "different",
      "last",
      "name",
      ",",
      "I",
      "want",
      "to",
      "order",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "last_name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table People, columns = [*,person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]"
  },
  {
    "nl_queries": "Show all ministers who do not belong to Progress Party , and count them by a pie chart",
    "VQL": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister\", 'binning': ''}, 'VQL': \"Visualize PIE SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister\"}",
    "record_name": "2516",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show all ministers who do not belong to Progress Party , and count them by a pie chart",
    "question_toks": [
      "Show",
      "all",
      "ministers",
      "who",
      "do",
      "not",
      "belong",
      "to",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "pie",
      "chart"
    ],
    "query": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Return a bar chart showing the total number of ships' nationalities , and order Nationality in asc order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2760@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing the total number of ships' nationalities , and order Nationality in asc order .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "ships'",
      "nationalities",
      ",",
      "and",
      "order",
      "Nationality",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches , I want to display from low to high by the bars .",
    "VQL": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC\"}",
    "record_name": "1481@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          "\"Knee problem\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches , I want to display from low to high by the bars .",
    "question_toks": [
      "How",
      "many",
      "injured",
      "players",
      "not",
      "suffering",
      "from",
      "injury",
      "of",
      "'Knee",
      "problem'",
      "in",
      "each",
      "match",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "grouping",
      "by",
      "number",
      "of",
      "matches",
      ",",
      "I",
      "want",
      "to",
      "display",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Number_of_matches",
      ",",
      "COUNT",
      "(",
      "Number_of_matches",
      ")",
      "FROM",
      "injury_accident",
      "WHERE",
      "injury",
      "!",
      "=",
      "'Knee",
      "problem'",
      "GROUP",
      "BY",
      "Number_of_matches",
      "ORDER",
      "BY",
      "Number_of_matches",
      "ASC"
    ],
    "choose_schema": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "What is the total number of each fate ? Give me the result in a bar graph , and could you order Y-axis from low to high order ?",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC'}",
    "record_name": "2763@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of each fate ? Give me the result in a bar graph , and could you order Y-axis from low to high order ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "each",
      "fate",
      "?",
      "Give",
      "me",
      "the",
      "result",
      "in",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "could",
      "you",
      "order",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Fate",
      ")",
      "ASC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "Show names and seatings , ordered by seating for all tracks opened after 2000 in a bar chart .",
    "VQL": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating'}",
    "record_name": "2646",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show names and seatings , ordered by seating for all tracks opened after 2000 in a bar chart .",
    "question_toks": [
      "Show",
      "names",
      "and",
      "seatings",
      ",",
      "ordered",
      "by",
      "seating",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000",
      "ORDER",
      "BY",
      "seating"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]"
  },
  {
    "nl_queries": "Give me a bar graph for what is the total number of last names of all candidates ?",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name",
    "db_id": "student_assessment",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name'}",
    "record_name": "2879",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar graph for what is the total number of last names of all candidates ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "graph",
      "for",
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "last",
      "names",
      "of",
      "all",
      "candidates",
      "?"
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name"
    ],
    "choose_schema": "Table Candidates, columns = [*,candidate_id, candidate_details]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]@SEP@Table Candidates, columns = [candidate_id, candidate_details]@SEP@Table Candidate_Assessments, columns = [candidate_id, qualification, assessment_date, asessment_outcome_code]"
  },
  {
    "nl_queries": "List all the student details in reversed lexicographical order , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC",
    "db_id": "student_transcripts_tracking",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC'}",
    "record_name": "2900",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List all the student details in reversed lexicographical order , and count them by a bar chart",
    "question_toks": [
      "List",
      "all",
      "the",
      "student",
      "details",
      "in",
      "reversed",
      "lexicographical",
      "order",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_student_details",
      ",",
      "COUNT",
      "(",
      "other_student_details",
      ")",
      "FROM",
      "Students",
      "GROUP",
      "BY",
      "other_student_details",
      "ORDER",
      "BY",
      "other_student_details",
      "DESC"
    ],
    "choose_schema": "Table Students, columns = [*,student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details]",
    "choose_schema_rat": "Table Students, columns = [*,student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details]@SEP@Table Student_Enrolment, columns = [*,student_enrolment_id, degree_program_id, semester_id, student_id, other_details]@SEP@Table Student_Enrolment_Courses, columns = [*,student_course_id, course_id, student_enrolment_id]@SEP@Table Transcript_Contents, columns = [*,student_course_id, transcript_id]"
  },
  {
    "nl_queries": "Show the number of singers in each country with a bar chart .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country'}",
    "record_name": "693",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of singers in each country with a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "What is the proportion of positions of pilots ?",
    "VQL": "Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position'}",
    "record_name": "2584",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What is the proportion of positions of pilots ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "proportion",
      "of",
      "positions",
      "of",
      "pilots",
      "?"
    ],
    "query": "Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis , I want to sort by the y axis in descending .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis , I want to sort by the y axis in descending .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "How many total amounts of payments by each method code ? You can give me a bar chart , and order x-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2011@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total amounts of payments by each method code ? You can give me a bar chart , and order x-axis in ascending order .",
    "question_toks": [
      "How",
      "many",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "x-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and display by the Continent from high to low .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC'}",
    "record_name": "3269@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and display by the Continent from high to low .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Continent",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show the number of fate from each fate",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate'}",
    "record_name": "2763",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of fate from each fate",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "fate",
      "from",
      "each",
      "fate"
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "Tell me the trend about the claim dates using a trend line , and could you show Date_Claim_Settled from low to high order please ?",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC'}",
    "record_name": "2021@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Tell me the trend about the claim dates using a trend line , and could you show Date_Claim_Settled from low to high order please ?",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "claim",
      "dates",
      "using",
      "a",
      "trend",
      "line",
      ",",
      "and",
      "could",
      "you",
      "show",
      "Date_Claim_Settled",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "ASC"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "What are the descriptions for the aircrafts , and count them by a bar chart , and order by the x-axis from low to high .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC'}",
    "record_name": "34@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the descriptions for the aircrafts , and count them by a bar chart , and order by the x-axis from low to high .",
    "question_toks": [
      "What",
      "are",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the phone numbers of all employees .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "db_id": "chinook_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone'}",
    "record_name": "435",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the phone numbers of all employees .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? Get the payment Id , the date and the amount for visualizing a scatter chart .",
    "VQL": "Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': \"SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': ''}, 'VQL': \"Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\"}",
    "record_name": "2032",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Which Payments were processed with Visa ? Get the payment Id , the date and the amount for visualizing a scatter chart .",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "Get",
      "the",
      "payment",
      "Id",
      ",",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "visualizing",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "Payment_ID",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "How many total amounts of payments by each method code ? You can give me a bar chart , and I want to sort total number in asc order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC'}",
    "record_name": "2011@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total amounts of payments by each method code ? You can give me a bar chart , and I want to sort total number in asc order .",
    "question_toks": [
      "How",
      "many",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "total",
      "number",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show the number of fate from each fate , I want to show by the x-axis in descending .",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC'}",
    "record_name": "2763@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of fate from each fate , I want to show by the x-axis in descending .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "fate",
      "from",
      "each",
      "fate",
      ",",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "x-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "Fate",
      "DESC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , show by the names in asc .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC'}",
    "record_name": "3269@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , show by the names in asc .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "show",
      "by",
      "the",
      "names",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Bar chart of the number of course name from each course name , and I want to show y axis from low to high order .",
    "VQL": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) ASC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) ASC'}",
    "record_name": "2880@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the number of course name from each course name , and I want to show y axis from low to high order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "course",
      "name",
      "from",
      "each",
      "course",
      "name",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "course_name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Show all ministers who do not belong to Progress Party , and count them by a bar chart , and order in asc by the Y .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC\"}",
    "record_name": "2517@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all ministers who do not belong to Progress Party , and count them by a bar chart , and order in asc by the Y .",
    "question_toks": [
      "Show",
      "all",
      "ministers",
      "who",
      "do",
      "not",
      "belong",
      "to",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show me the comparison of the total number of every ship type with a bar graph , list Type in desc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC'}",
    "record_name": "2758@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the comparison of the total number of every ship type with a bar graph , list Type in desc order .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "comparison",
      "of",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "with",
      "a",
      "bar",
      "graph",
      ",",
      "list",
      "Type",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What about the proportion of the total amounts of payments by each method code ? You can give me a pie chart .",
    "VQL": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2013",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What about the proportion of the total amounts of payments by each method code ? You can give me a pie chart .",
    "question_toks": [
      "What",
      "about",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "List the number of the phone numbers of all employees .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "db_id": "chinook_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone'}",
    "record_name": "435",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the phone numbers of all employees .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "List the number of games in each season with a line chart , show by the X-axis in ascending .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC'}",
    "record_name": "1494@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season with a line chart , show by the X-axis in ascending .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "X-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Give me a bar chart for the number of country of each country , and list in descending by the the number of country .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC'}",
    "record_name": "693@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the number of country of each country , and list in descending by the the number of country .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "number",
      "of",
      "country",
      "of",
      "each",
      "country",
      ",",
      "and",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "the",
      "number",
      "of",
      "country",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Return a histogram on what are the age and hometown of teachers ? , could you show by the x axis from high to low ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC'}",
    "record_name": "711@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on what are the age and hometown of teachers ? , could you show by the x axis from high to low ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "what",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?",
      ",",
      "could",
      "you",
      "show",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Visualize a pie chart with what are the names and seatings for all tracks opened after 2000 ?",
    "VQL": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , Seating FROM track WHERE year_opened > 2000', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000'}",
    "record_name": "2645",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize a pie chart with what are the names and seatings for all tracks opened after 2000 ?",
    "question_toks": [
      "Visualize",
      "a",
      "pie",
      "chart",
      "with",
      "what",
      "are",
      "the",
      "names",
      "and",
      "seatings",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      "?"
    ],
    "query": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "Seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]"
  },
  {
    "nl_queries": "For each type , what is the average tonnage , I want to sort Y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC'}",
    "record_name": "2765@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each type , what is the average tonnage , I want to sort Y-axis in asc order .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "what",
      "is",
      "the",
      "average",
      "tonnage",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "Y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Tonnage",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "List the number of games in each season with a line chart , and order in descending by the X .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC'}",
    "record_name": "1494@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season with a line chart , and order in descending by the X .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show me the proportion on what are the names and seatings for all tracks opened after 2000 ?",
    "VQL": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , Seating FROM track WHERE year_opened > 2000', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000'}",
    "record_name": "2645",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me the proportion on what are the names and seatings for all tracks opened after 2000 ?",
    "question_toks": [
      "Show",
      "me",
      "the",
      "proportion",
      "on",
      "what",
      "are",
      "the",
      "names",
      "and",
      "seatings",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      "?"
    ],
    "query": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "Seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]"
  },
  {
    "nl_queries": "Draw a bar chart of operating system versus the total number , list from low to high by the X-axis .",
    "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system ASC",
    "db_id": "browser_web",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system ASC'}",
    "record_name": "372@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of operating system versus the total number , list from low to high by the X-axis .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "operating",
      "system",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Operating_system",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "web_client_accelerator",
      "GROUP",
      "BY",
      "Operating_system",
      "ORDER",
      "BY",
      "Operating_system",
      "ASC"
    ],
    "choose_schema": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]",
    "choose_schema_rat": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]"
  },
  {
    "nl_queries": "Bar graph to show how many nationality from different nationality , order in descending by the x axis please .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2760@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show how many nationality from different nationality , order in descending by the x axis please .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "nationality",
      "from",
      "different",
      "nationality",
      ",",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "x",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Stack bar chart of the number of type vs Nationality based on type , I want to rank the number of type in asc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC'}",
    "record_name": "2756@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stack bar chart of the number of type vs Nationality based on type , I want to rank the number of type in asc order .",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "type",
      "vs",
      "Nationality",
      "based",
      "on",
      "type",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "the",
      "number",
      "of",
      "type",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Bin the claim date into Year interval and count them for visualizing a bar chart , and could you order by the the number of date claim settled from high to low ?",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into Year interval and count them for visualizing a bar chart , and could you order by the the number of date claim settled from high to low ?",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "order",
      "by",
      "the",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Bar chart of sum amount payment from each payment method code , and could you sort in asc by the Y ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC'}",
    "record_name": "2011@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of sum amount payment from each payment method code , and could you sort in asc by the Y ?",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "sum",
      "amount",
      "payment",
      "from",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "Y",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Show me the comparison of the total number of all ships' nationalities with a bar graph , and display from low to high by the how many nationality .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC'}",
    "record_name": "2760@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the comparison of the total number of all ships' nationalities with a bar graph , and display from low to high by the how many nationality .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "comparison",
      "of",
      "the",
      "total",
      "number",
      "of",
      "all",
      "ships'",
      "nationalities",
      "with",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "display",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "how",
      "many",
      "nationality",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show me a stacked bar graph , the x-axis is the nationality of ship , and the y-axis is their total number of different nationality and split by ship type , and show X-axis in desc order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC'}",
    "record_name": "2755@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a stacked bar graph , the x-axis is the nationality of ship , and the y-axis is their total number of different nationality and split by ship type , and show X-axis in desc order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "stacked",
      "bar",
      "graph",
      ",",
      "the",
      "x-axis",
      "is",
      "the",
      "nationality",
      "of",
      "ship",
      ",",
      "and",
      "the",
      "y-axis",
      "is",
      "their",
      "total",
      "number",
      "of",
      "different",
      "nationality",
      "and",
      "split",
      "by",
      "ship",
      "type",
      ",",
      "and",
      "show",
      "X-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Bar chart x axis type y axis the total number , and show names from high to low order please .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC'}",
    "record_name": "2762@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis type y axis the total number , and show names from high to low order please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "type",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "and",
      "show",
      "names",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What are the number of the descriptions for the aircrafts ? , I want to rank by the how many description in ascending .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC'}",
    "record_name": "34@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the descriptions for the aircrafts ? , I want to rank by the how many description in ascending .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "how",
      "many",
      "description",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Give me a histogram for how many singers are from each country ? , and sort the total number in desc order .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC'}",
    "record_name": "690@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for how many singers are from each country ? , and sort the total number in desc order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "and",
      "sort",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "What are the phone numbers for each employee , and count them by a bar chart , sort in ascending by the y-axis please .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC'}",
    "record_name": "435@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the phone numbers for each employee , and count them by a bar chart , sort in ascending by the y-axis please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "in",
      "ascending",
      "by",
      "the",
      "y-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each year using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each year using a bar chart .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "I want to know the proportion of the total number for each position .",
    "VQL": "Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position'}",
    "record_name": "2584",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of the total number for each position .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "number",
      "for",
      "each",
      "position",
      "."
    ],
    "query": "Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "What are the names and seatings for all tracks opened after 2000 , ordered by seating . Show the proportion .",
    "VQL": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , Seating FROM track WHERE year_opened > 2000', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000'}",
    "record_name": "2645",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the names and seatings for all tracks opened after 2000 , ordered by seating . Show the proportion .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "seatings",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      ",",
      "ordered",
      "by",
      "seating",
      ".",
      "Show",
      "the",
      "proportion",
      "."
    ],
    "query": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "Seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]"
  },
  {
    "nl_queries": "Show me how many home team by home team in a histogram",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team'}",
    "record_name": "1491",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many home team by home team in a histogram",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "home",
      "team",
      "by",
      "home",
      "team",
      "in",
      "a",
      "histogram"
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "List the number of the phone numbers of all employees , and sort in descending by the names .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC'}",
    "record_name": "435@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the phone numbers of all employees , and sort in descending by the names .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "and",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]@SEP@Table Artist, columns = [ArtistId, Name]@SEP@Table Genre, columns = [GenreId, Name]@SEP@Table MediaType, columns = [MediaTypeId, Name]@SEP@Table Playlist, columns = [PlaylistId, Name]@SEP@Table Track, columns = [TrackId, Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice]"
  },
  {
    "nl_queries": "Compare the frequency of each payment method code using a bar chart .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2010",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the frequency of each payment method code using a bar chart .",
    "question_toks": [
      "Compare",
      "the",
      "frequency",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "What is the proportion of classes of all races ? Give me a pie chart .",
    "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM race GROUP BY Class",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , COUNT(Class) FROM race GROUP BY Class'}",
    "record_name": "2642",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What is the proportion of classes of all races ? Give me a pie chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "proportion",
      "of",
      "classes",
      "of",
      "all",
      "races",
      "?",
      "Give",
      "me",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Class , COUNT(Class) FROM race GROUP BY Class",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Show me the comparison of the total number of every ship type with a bar graph , and display in desc by the Y-axis .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC'}",
    "record_name": "2758@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the comparison of the total number of every ship type with a bar graph , and display in desc by the Y-axis .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "comparison",
      "of",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "with",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "display",
      "in",
      "desc",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Stacked bar chart of how many away team for with each Home_team in each away team",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team'}",
    "record_name": "1487",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar chart of how many away team for with each Home_team in each away team",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "away",
      "team",
      "for",
      "with",
      "each",
      "Home_team",
      "in",
      "each",
      "away",
      "team"
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Away_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Display a bar chart for what are the age and hometown of teachers ? , could you sort in descending by the Age ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC'}",
    "record_name": "711@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the age and hometown of teachers ? , could you sort in descending by the Age ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?",
      ",",
      "could",
      "you",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "Age",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Stacked bar of took office and how many took office colored by Minister , and display by the Y-axis in descending .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY'}",
    "record_name": "2522@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Stacked bar of took office and how many took office colored by Minister , and display by the Y-axis in descending .",
    "question_toks": [
      "Stacked",
      "bar",
      "of",
      "took",
      "office",
      "and",
      "how",
      "many",
      "took",
      "office",
      "colored",
      "by",
      "Minister",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Y-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "DESC",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Can you draw a bar chart to show the number of positions of the pilots ? , rank in descending by the total number please .",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC'}",
    "record_name": "2585@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you draw a bar chart to show the number of positions of the pilots ? , rank in descending by the total number please .",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "number",
      "of",
      "positions",
      "of",
      "the",
      "pilots",
      "?",
      ",",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "total",
      "number",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Position",
      ")",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality Show bar chart , display in asc by the total number .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2587@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality Show bar chart , display in asc by the total number .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      "Show",
      "bar",
      "chart",
      ",",
      "display",
      "in",
      "asc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Bar graph to show the number of last name from different last name",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name",
    "db_id": "student_assessment",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name'}",
    "record_name": "2879",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of last name from different last name",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "last",
      "name",
      "from",
      "different",
      "last",
      "name"
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name"
    ],
    "choose_schema": "Table People, columns = [*,person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart , sort by the how many date payment made in asc .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart , sort by the how many date payment made in asc .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "how",
      "many",
      "date",
      "payment",
      "made",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "what is the total number of last names of all candidates ? , and order x-axis in ascending order .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC'}",
    "record_name": "2879@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "what is the total number of last names of all candidates ? , and order x-axis in ascending order .",
    "question_toks": [
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "last",
      "names",
      "of",
      "all",
      "candidates",
      "?",
      ",",
      "and",
      "order",
      "x-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "last_name",
      "ASC"
    ],
    "choose_schema": "Table Candidates, columns = [*,candidate_id, candidate_details]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]@SEP@Table Candidates, columns = [candidate_id, candidate_details]@SEP@Table Candidate_Assessments, columns = [candidate_id, qualification, assessment_date, asessment_outcome_code]"
  },
  {
    "nl_queries": "Show the average age of singers for each country with a bar chart , and order in asc by the x axis .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "696@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the average age of singers for each country with a bar chart , and order in asc by the x axis .",
    "question_toks": [
      "Show",
      "the",
      "average",
      "age",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "List the number of the phone numbers of all employees , and show Y from low to high order please .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC'}",
    "record_name": "435@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the phone numbers of all employees , and show Y from low to high order please .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "and",
      "show",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Create a bar chart showing how many class across class , and list from high to low by the x-axis please .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC'}",
    "record_name": "2643@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many class across class , and list from high to low by the x-axis please .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "class",
      "across",
      "class",
      ",",
      "and",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Draw a bar chart of description versus the number of description , show by the x-axis in descending .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC'}",
    "record_name": "34@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of description versus the number of description , show by the x-axis in descending .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "description",
      "versus",
      "the",
      "number",
      "of",
      "description",
      ",",
      "show",
      "by",
      "the",
      "x-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Compare the total number of each minister using a bar graph , list the number of minister in ascending order .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC'}",
    "record_name": "2527@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of each minister using a bar graph , list the number of minister in ascending order .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "each",
      "minister",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "list",
      "the",
      "number",
      "of",
      "minister",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "How many total amounts of payments by each method code ? You can give me a bar chart .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2011",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total amounts of payments by each method code ? You can give me a bar chart .",
    "question_toks": [
      "How",
      "many",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show the age of each singer in a bar chart from the oldest to the youngest .",
    "VQL": "Visualize BAR SELECT Name , Age FROM singer ORDER BY age DESC",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Age FROM singer ORDER BY age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Age FROM singer ORDER BY age DESC'}",
    "record_name": "697",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the age of each singer in a bar chart from the oldest to the youngest .",
    "question_toks": [
      "Show",
      "the",
      "age",
      "of",
      "each",
      "singer",
      "in",
      "a",
      "bar",
      "chart",
      "from",
      "the",
      "oldest",
      "to",
      "the",
      "youngest",
      "."
    ],
    "query": "Visualize BAR SELECT Name , Age FROM singer ORDER BY age DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Age",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "choose_schema": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code , and could you display by the bar in descending ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2012@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the average amount of payment by each payment method code , and could you display by the bar in descending ?",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "could",
      "you",
      "display",
      "by",
      "the",
      "bar",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each year using a bar chart , and sort y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each year using a bar chart , and sort y-axis in asc order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "I want to see trend the number of season over season by Away_team , order in descending by the X .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1490@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend the number of season over season by Away_team , order in descending by the X .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "number",
      "of",
      "season",
      "over",
      "season",
      "by",
      "Away_team",
      ",",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Compare the total number of each minister using a bar graph , and list by the X in ascending .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC'}",
    "record_name": "2527@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of each minister using a bar graph , and list by the X in ascending .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "each",
      "minister",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "list",
      "by",
      "the",
      "X",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Display a bar chart for what are the age and hometown of teachers ? , show from low to high by the Y .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC'}",
    "record_name": "711@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the age and hometown of teachers ? , show from low to high by the Y .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the description of all aircrafts , and order bars in ascending order .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC'}",
    "record_name": "34@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the description of all aircrafts , and order bars in ascending order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "order",
      "bars",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank in ascending by the Y .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank in ascending by the Y .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show the number of games for each home team in a bar chart , sort by the y-axis in desc please .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC'}",
    "record_name": "1491@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of games for each home team in a bar chart , sort by the y-axis in desc please .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "home",
      "team",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "y-axis",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and could you show by the y axis from high to low ?",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and could you show by the y axis from high to low ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "could",
      "you",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality Show bar chart , list by the x axis in ascending .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2587@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality Show bar chart , list by the x axis in ascending .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      "Show",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "What are the names and areas of countries with the top 5 largest area . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and areas of countries with the top 5 largest area . Visualize by bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Create a pie chart showing the number of nationality across nationality .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality'}",
    "record_name": "2759",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing the number of nationality across nationality .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "nationality",
      "across",
      "nationality",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Which ministers are not a part of the Progress Party , and count them by a bar chart , order in asc by the Y .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC\"}",
    "record_name": "2517@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which ministers are not a part of the Progress Party , and count them by a bar chart , order in asc by the Y .",
    "question_toks": [
      "Which",
      "ministers",
      "are",
      "not",
      "a",
      "part",
      "of",
      "the",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Visualize a bar chart for what are the different classes of races , and how many races correspond to each ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2648",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the different classes of races , and how many races correspond to each ?",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type in a bar chart , and could you sort by the x-axis in ascending please ?",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC'}",
    "record_name": "2765@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the average tonnage of ships of each type in a bar chart , and could you sort by the x-axis in ascending please ?",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "x-axis",
      "in",
      "ascending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show me how many type by type in a histogram , and I want to sort by the Y-axis in asc .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC'}",
    "record_name": "2758@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many type by type in a histogram , and I want to sort by the Y-axis in asc .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "type",
      "by",
      "type",
      "in",
      "a",
      "histogram",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "Y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class with a bar chart , and list x axis in asc order please .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC'}",
    "record_name": "2648@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the race class and number of races in each class with a bar chart , and list x axis in asc order please .",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "x",
      "axis",
      "in",
      "asc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Show me how many in each class of all races using a bar chart , and sort by the the number of class in ascending .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC'}",
    "record_name": "2643@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many in each class of all races using a bar chart , and sort by the the number of class in ascending .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "in",
      "each",
      "class",
      "of",
      "all",
      "races",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "the",
      "number",
      "of",
      "class",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "What is the total number of ships with different nationalities and ship types ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality'}",
    "record_name": "2755",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of ships with different nationalities and ship types ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "ships",
      "with",
      "different",
      "nationalities",
      "and",
      "ship",
      "types",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Compute the total the total number across country as a pie chart .",
    "VQL": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "689",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Compute the total the total number across country as a pie chart .",
    "question_toks": [
      "Compute",
      "the",
      "total",
      "the",
      "total",
      "number",
      "across",
      "country",
      "as",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Please compare the frequency of the position of the pilots using a bar chart .",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position'}",
    "record_name": "2585",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please compare the frequency of the position of the pilots using a bar chart .",
    "question_toks": [
      "Please",
      "compare",
      "the",
      "frequency",
      "of",
      "the",
      "position",
      "of",
      "the",
      "pilots",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Show me how many type by type in a histogram , and I want to display x axis in descending order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC'}",
    "record_name": "2758@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many type by type in a histogram , and I want to display x axis in descending order .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "type",
      "by",
      "type",
      "in",
      "a",
      "histogram",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "x",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the description of all aircrafts .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "34",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the description of all aircrafts .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type in a bar chart , I want to list from low to high by the names .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC'}",
    "record_name": "2762@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the number of ships of each type in a bar chart , I want to list from low to high by the names .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , rank in asc by the x-axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\"}",
    "record_name": "2030@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , rank in asc by the x-axis .",
    "question_toks": [
      "Show",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "distributing",
      "the",
      "payment",
      "date",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "in",
      "asc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "What about the average amounts of payments by each method code ? You can give me a bar chart , could you list by the Payment_Method_Code from low to high ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2012@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What about the average amounts of payments by each method code ? You can give me a bar chart , could you list by the Payment_Method_Code from low to high ?",
    "question_toks": [
      "What",
      "about",
      "the",
      "average",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "by",
      "the",
      "Payment_Method_Code",
      "from",
      "low",
      "to",
      "high",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show me how many in each class of all races using a bar chart , and I want to order in descending by the Class .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC'}",
    "record_name": "2643@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many in each class of all races using a bar chart , and I want to order in descending by the Class .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "in",
      "each",
      "class",
      "of",
      "all",
      "races",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "Class",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Plot date claim settled by the number of date claim settled as a line chart",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled'}",
    "record_name": "2021",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Plot date claim settled by the number of date claim settled as a line chart",
    "question_toks": [
      "Plot",
      "date",
      "claim",
      "settled",
      "by",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      "as",
      "a",
      "line",
      "chart"
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and list X-axis in desc order please .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and list X-axis in desc order please .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "list",
      "X-axis",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Stacked bar chart of how many nationality for with each Type in each nationality , and show by the names in ascending .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC'}",
    "record_name": "2755@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar chart of how many nationality for with each Type in each nationality , and show by the names in ascending .",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "nationality",
      "for",
      "with",
      "each",
      "Type",
      "in",
      "each",
      "nationality",
      ",",
      "and",
      "show",
      "by",
      "the",
      "names",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "For each type , what is the average tonnage .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE'}",
    "record_name": "2765",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each type , what is the average tonnage .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "what",
      "is",
      "the",
      "average",
      "tonnage",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What other details can you tell me about students in reverse alphabetical order , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC",
    "db_id": "student_transcripts_tracking",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC'}",
    "record_name": "2900",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What other details can you tell me about students in reverse alphabetical order , and count them by a bar chart",
    "question_toks": [
      "What",
      "other",
      "details",
      "can",
      "you",
      "tell",
      "me",
      "about",
      "students",
      "in",
      "reverse",
      "alphabetical",
      "order",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_student_details",
      ",",
      "COUNT",
      "(",
      "other_student_details",
      ")",
      "FROM",
      "Students",
      "GROUP",
      "BY",
      "other_student_details",
      "ORDER",
      "BY",
      "other_student_details",
      "DESC"
    ],
    "choose_schema": "Table Students, columns = [*,student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details]",
    "choose_schema_rat": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]@SEP@Table Student_Enrolment_Courses, columns = [*,student_course_id, course_id, student_enrolment_id]@SEP@Table Departments, columns = [*,department_id, department_name, department_description, other_details]@SEP@Table Degree_Programs, columns = [*,degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details]@SEP@Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]@SEP@Table Semesters, columns = [*,semester_id, semester_name, semester_description, other_details]@SEP@Table Student_Enrolment, columns = [*,student_enrolment_id, degree_program_id, semester_id, student_id, other_details]@SEP@Table Transcripts, columns = [*,transcript_id, transcript_date, other_details]@SEP@Table Students, columns = [*,student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details]@SEP@Table Transcript_Contents, columns = [*,student_course_id, transcript_id]"
  },
  {
    "nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code , sort by the the average of amount payment in ascending .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC'}",
    "record_name": "2012@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the average amount of payment by each payment method code , sort by the the average of amount payment in ascending .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "sort",
      "by",
      "the",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "I want to see trend the number of season over season by Away_team , and list Season in descending order .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1490@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend the number of season over season by Away_team , and list Season in descending order .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "number",
      "of",
      "season",
      "over",
      "season",
      "by",
      "Away_team",
      ",",
      "and",
      "list",
      "Season",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "List the number of games in each season and group by home team in a group line chart , order by the X-axis from high to low .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season DESC'}",
    "record_name": "1482@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season and group by home team in a group line chart , order by the X-axis from high to low .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      ",",
      "order",
      "by",
      "the",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Display a bar chart for what are the age and hometown of teachers ? , and order x-axis in ascending order please .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC'}",
    "record_name": "711@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the age and hometown of teachers ? , and order x-axis in ascending order please .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?",
      ",",
      "and",
      "order",
      "x-axis",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "List the number of the description of all aircrafts .",
    "VQL": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "33",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "List the number of the description of all aircrafts .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      "."
    ],
    "query": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , show Amount_Payment from high to low order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\"}",
    "record_name": "2030@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , show Amount_Payment from high to low order .",
    "question_toks": [
      "Show",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "distributing",
      "the",
      "payment",
      "date",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "Amount_Payment",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Give me a bar chart showing the total number of each minister , and sort y axis in descending order please .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC'}",
    "record_name": "2519@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart showing the total number of each minister , and sort y axis in descending order please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "minister",
      ",",
      "and",
      "sort",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "I want to see trend of the number of season by season , order by the x-axis in asc .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC'}",
    "record_name": "1494@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend of the number of season by season , order by the x-axis in asc .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "season",
      "by",
      "season",
      ",",
      "order",
      "by",
      "the",
      "x-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "A bar chart about what is the age and hometown of every teacher ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher'}",
    "record_name": "711",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what is the age and hometown of every teacher ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "What is the total number of every ship type by categorizing by nationality ?",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type'}",
    "record_name": "2756",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of every ship type by categorizing by nationality ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "by",
      "categorizing",
      "by",
      "nationality",
      "?"
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What is the age and hometown of every teacher Visualize by bar chart , could you rank from high to low by the x-axis please ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC'}",
    "record_name": "711@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the age and hometown of every teacher Visualize by bar chart , could you rank from high to low by the x-axis please ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x-axis",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "What are the number of the descriptions for the aircrafts ? , and rank by the Y-axis in desc please .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC'}",
    "record_name": "34@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the descriptions for the aircrafts ? , and rank by the Y-axis in desc please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Show the number of games in each season and group by home team in a group line chart The x-axis is season , and display in desc by the X .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1489@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Show the number of games in each season and group by home team in a group line chart The x-axis is season , and display in desc by the X .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      "The",
      "x-axis",
      "is",
      "season",
      ",",
      "and",
      "display",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries by a bar chart .",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the names and surface areas of the 5 largest countries by a bar chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the descriptions for the aircrafts ?",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "34",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the descriptions for the aircrafts ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?"
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "How many parties of the time they leave office , binning the leave office into WEEKDAY interval , show by the y-axis in ascending .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY'}",
    "record_name": "2525@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they leave office , binning the leave office into WEEKDAY interval , show by the y-axis in ascending .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "leave",
      "office",
      ",",
      "binning",
      "the",
      "leave",
      "office",
      "into",
      "WEEKDAY",
      "interval",
      ",",
      "show",
      "by",
      "the",
      "y-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "ASC",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Bar graph to show the total number from different nationality , I want to show by the X-axis from low to high .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2587@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the total number from different nationality , I want to show by the X-axis from low to high .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "nationality",
      ",",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Show the number of games in each season and group by home team in a group line chart The x-axis is season , list by the Season from high to low .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1489@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Show the number of games in each season and group by home team in a group line chart The x-axis is season , list by the Season from high to low .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      "The",
      "x-axis",
      "is",
      "season",
      ",",
      "list",
      "by",
      "the",
      "Season",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "What is the number of singers for each country ? Return a pie chart .",
    "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country'}",
    "record_name": "698",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What is the number of singers for each country ? Return a pie chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "?",
      "Return",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Stack bar chart of how many home team vs Away_team based on home team , and I want to sort from high to low by the Home_team .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC'}",
    "record_name": "1488@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stack bar chart of how many home team vs Away_team based on home team , and I want to sort from high to low by the Home_team .",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "home",
      "team",
      "vs",
      "Away_team",
      "based",
      "on",
      "home",
      "team",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Home_team",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Home_team",
      "ORDER",
      "BY",
      "Home_team",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "What are the phone numbers for each employee , and count them by a bar chart , and list from low to high by the X please .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC'}",
    "record_name": "435@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the phone numbers for each employee , and count them by a bar chart , and list from low to high by the X please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Compute the total the total number across nationality as a pie chart .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality'}",
    "record_name": "2586",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Compute the total the total number across nationality as a pie chart .",
    "question_toks": [
      "Compute",
      "the",
      "total",
      "the",
      "total",
      "number",
      "across",
      "nationality",
      "as",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "What are the descriptions for the aircrafts , and count them by a bar chart , I want to display in descending by the names .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC'}",
    "record_name": "34@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the descriptions for the aircrafts , and count them by a bar chart , I want to display in descending by the names .",
    "question_toks": [
      "What",
      "are",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]@SEP@Table pilot, columns = [*,Pilot_Id, Name, Age]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the phone numbers for each employee ? , I want to list by the y axis in descending please .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC'}",
    "record_name": "435@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the phone numbers for each employee ? , I want to list by the y axis in descending please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      "?",
      ",",
      "I",
      "want",
      "to",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Compare the total number of each fate with a bar chart .",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate'}",
    "record_name": "2763",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of each fate with a bar chart .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "each",
      "fate",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "Give me a bar graph for what is the total number of last names of all candidates ? , sort in asc by the x axis .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC'}",
    "record_name": "2879@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar graph for what is the total number of last names of all candidates ? , sort in asc by the x axis .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "graph",
      "for",
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "last",
      "names",
      "of",
      "all",
      "candidates",
      "?",
      ",",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "last_name",
      "ASC"
    ],
    "choose_schema": "Table Candidates, columns = [*,candidate_id, candidate_details]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]@SEP@Table Candidates, columns = [candidate_id, candidate_details]@SEP@Table Candidate_Assessments, columns = [candidate_id, qualification, assessment_date, asessment_outcome_code]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the Year interval and then shows the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "1995",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the Year interval and then shows the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Bar chart x axis minister y axis how many minister",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister'}",
    "record_name": "2527",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis minister y axis how many minister",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "minister",
      "y",
      "axis",
      "how",
      "many",
      "minister"
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "What is the age and hometown of every teacher . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher'}",
    "record_name": "711",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the age and hometown of every teacher . Visualize by bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "What are the descriptions for the aircrafts , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "34",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the descriptions for the aircrafts , and count them by a bar chart",
    "question_toks": [
      "What",
      "are",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "What is the total number of ships with different nationalities and ship types ? , sort in descending by the total number .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC'}",
    "record_name": "2755@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of ships with different nationalities and ship types ? , sort in descending by the total number .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "ships",
      "with",
      "different",
      "nationalities",
      "and",
      "ship",
      "types",
      "?",
      ",",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the average of age from each country , I want to list from low to high by the total number .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC'}",
    "record_name": "696@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the average of age from each country , I want to list from low to high by the total number .",
    "question_toks": [
      "Show",
      "the",
      "average",
      "of",
      "age",
      "from",
      "each",
      "country",
      ",",
      "I",
      "want",
      "to",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Age",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Plot season by how many season as a line chart , list in desc by the x axis please .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1495@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Plot season by how many season as a line chart , list in desc by the x axis please .",
    "question_toks": [
      "Plot",
      "season",
      "by",
      "how",
      "many",
      "season",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "x",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart , show from high to low by the Y .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart , show from high to low by the Y .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "day",
      "of",
      "the",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type in a bar chart , display y-axis in desc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC'}",
    "record_name": "2762@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the number of ships of each type in a bar chart , display y-axis in desc order .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "y-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code , rank x-axis from low to high order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2012@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the average amount of payment by each payment method code , rank x-axis from low to high order .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "rank",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Stacked bar chart of how many nationality for with each Type in each nationality , and show Y-axis in ascending order please .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC'}",
    "record_name": "2755@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar chart of how many nationality for with each Type in each nationality , and show Y-axis in ascending order please .",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "nationality",
      "for",
      "with",
      "each",
      "Type",
      "in",
      "each",
      "nationality",
      ",",
      "and",
      "show",
      "Y-axis",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "The trend about the the number of season of different Home_team over the season , and rank from high to low by the Season .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1489@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "The trend about the the number of season of different Home_team over the season , and rank from high to low by the Season .",
    "question_toks": [
      "The",
      "trend",
      "about",
      "the",
      "the",
      "number",
      "of",
      "season",
      "of",
      "different",
      "Home_team",
      "over",
      "the",
      "season",
      ",",
      "and",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Season",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "For each type , how many ships are there Plot them as bar chart , list from high to low by the total number please .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC'}",
    "record_name": "2762@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each type , how many ships are there Plot them as bar chart , list from high to low by the total number please .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "how",
      "many",
      "ships",
      "are",
      "there",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What is the total number of each ship type ? Give me a bar chart , I want to show from low to high by the y axis .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC'}",
    "record_name": "2758@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of each ship type ? Give me a bar chart , I want to show from low to high by the y axis .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3269",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis , and rank Y-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis , and rank Y-axis in ascending order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "and",
      "rank",
      "Y-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Show the number of games for each home team in a bar chart , and display by the total number in asc .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) ASC'}",
    "record_name": "1491@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of games for each home team in a bar chart , and display by the total number in asc .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "home",
      "team",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "by",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Give me a bar chart for the number of country of each country , sort names in desc order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "693@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the number of country of each country , sort names in desc order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "number",
      "of",
      "country",
      "of",
      "each",
      "country",
      ",",
      "sort",
      "names",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]@SEP@Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]"
  },
  {
    "nl_queries": "List the phone numbers of all employees , and count them by a bar chart , I want to rank by the total number from high to low .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC'}",
    "record_name": "435@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the phone numbers of all employees , and count them by a bar chart , I want to rank by the total number from high to low .",
    "question_toks": [
      "List",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]@SEP@Table Invoice, columns = [InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total]"
  },
  {
    "nl_queries": "A stacked bar chart shows the total number of ships with different nationalities and split by ship type , and order how many nationality in ascending order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC'}",
    "record_name": "2755@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A stacked bar chart shows the total number of ships with different nationalities and split by ship type , and order how many nationality in ascending order .",
    "question_toks": [
      "A",
      "stacked",
      "bar",
      "chart",
      "shows",
      "the",
      "total",
      "number",
      "of",
      "ships",
      "with",
      "different",
      "nationalities",
      "and",
      "split",
      "by",
      "ship",
      "type",
      ",",
      "and",
      "order",
      "how",
      "many",
      "nationality",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different classes of races , and how many races correspond to each ? , sort from high to low by the names please .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC'}",
    "record_name": "2648@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different classes of races , and how many races correspond to each ? , sort from high to low by the names please .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?",
      ",",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "names",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]"
  },
  {
    "nl_queries": "Draw a bar chart of operating system versus the total number , display from high to low by the names please .",
    "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system DESC",
    "db_id": "browser_web",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system DESC'}",
    "record_name": "372@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of operating system versus the total number , display from high to low by the names please .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "operating",
      "system",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "names",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Operating_system",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "web_client_accelerator",
      "GROUP",
      "BY",
      "Operating_system",
      "ORDER",
      "BY",
      "Operating_system",
      "DESC"
    ],
    "choose_schema": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]",
    "choose_schema_rat": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]@SEP@Table browser, columns = [*,id, name, market_share]@SEP@Table accelerator_compatible_browser, columns = [*,accelerator_id, browser_id, compatible_since_year]"
  },
  {
    "nl_queries": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches , and rank by the y axis from low to high .",
    "VQL": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC\"}",
    "record_name": "1481@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          "\"Knee problem\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches , and rank by the y axis from low to high .",
    "question_toks": [
      "How",
      "many",
      "injured",
      "players",
      "not",
      "suffering",
      "from",
      "injury",
      "of",
      "'Knee",
      "problem'",
      "in",
      "each",
      "match",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "grouping",
      "by",
      "number",
      "of",
      "matches",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Number_of_matches",
      ",",
      "COUNT",
      "(",
      "Number_of_matches",
      ")",
      "FROM",
      "injury_accident",
      "WHERE",
      "injury",
      "!",
      "=",
      "'Knee",
      "problem'",
      "GROUP",
      "BY",
      "Number_of_matches",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Number_of_matches",
      ")",
      "ASC"
    ],
    "choose_schema": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Bar graph to show how many nationality from different nationality , display from low to high by the how many nationality .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC'}",
    "record_name": "2760@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show how many nationality from different nationality , display from low to high by the how many nationality .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "nationality",
      "from",
      "different",
      "nationality",
      ",",
      "display",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "how",
      "many",
      "nationality",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type . Show a pie chart .",
    "VQL": "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE'}",
    "record_name": "2761",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show different types of ships and the number of ships of each type . Show a pie chart .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Count the section_description , and group by section_description with a bar chart , and display by the the number of section description in desc please .",
    "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) DESC",
    "db_id": "student_transcripts_tracking",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) DESC'}",
    "record_name": "2902@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          26,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the section_description , and group by section_description with a bar chart , and display by the the number of section description in desc please .",
    "question_toks": [
      "Count",
      "the",
      "section_description",
      ",",
      "and",
      "group",
      "by",
      "section_description",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "by",
      "the",
      "the",
      "number",
      "of",
      "section",
      "description",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "section_description",
      ",",
      "COUNT",
      "(",
      "section_description",
      ")",
      "FROM",
      "Sections",
      "GROUP",
      "BY",
      "section_description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "section_description",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]",
    "choose_schema_rat": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]"
  },
  {
    "nl_queries": "Visualize a bar chart for what are the different classes of races , and how many races correspond to each ? , and sort in desc by the bars .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC'}",
    "record_name": "2648@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the different classes of races , and how many races correspond to each ? , and sort in desc by the bars .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?",
      ",",
      "and",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , I want to list x axis in desc order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , I want to list x axis in desc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "x",
      "axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Draw a bar chart of operating system versus the total number , and list by the Y in desc please .",
    "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC",
    "db_id": "browser_web",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC'}",
    "record_name": "372@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of operating system versus the total number , and list by the Y in desc please .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "operating",
      "system",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "and",
      "list",
      "by",
      "the",
      "Y",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Operating_system",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "web_client_accelerator",
      "GROUP",
      "BY",
      "Operating_system",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]",
    "choose_schema_rat": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]"
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort x axis from high to low order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort x axis from high to low order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "sort",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Compare the total number of each fate with a bar chart , show from high to low by the x axis .",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC'}",
    "record_name": "2763@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of each fate with a bar chart , show from high to low by the x axis .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "each",
      "fate",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "Fate",
      "DESC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "Bar chart x axis type y axis the total number , and order Y in asc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC'}",
    "record_name": "2762@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis type y axis the total number , and order Y in asc order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "type",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "and",
      "order",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What is the total number of each ship type ? Give me a bar chart , and list Type in desc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC'}",
    "record_name": "2758@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of each ship type ? Give me a bar chart , and list Type in desc order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "Type",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Bin the claim date into the Year interval and count them for visualizing a bar chart , could you list Y-axis in ascending order please ?",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Year interval and count them for visualizing a bar chart , could you list Y-axis in ascending order please ?",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "Y-axis",
      "in",
      "ascending",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart .",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , and list in asc by the sum population .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , and list in asc by the sum population .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "and",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "sum",
      "population",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Count the section_description , and group by section_description with a bar chart , and rank by the x-axis in ascending .",
    "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC",
    "db_id": "student_transcripts_tracking",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC'}",
    "record_name": "2902@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          26,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the section_description , and group by section_description with a bar chart , and rank by the x-axis in ascending .",
    "question_toks": [
      "Count",
      "the",
      "section_description",
      ",",
      "and",
      "group",
      "by",
      "section_description",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "x-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "section_description",
      ",",
      "COUNT",
      "(",
      "section_description",
      ")",
      "FROM",
      "Sections",
      "GROUP",
      "BY",
      "section_description",
      "ORDER",
      "BY",
      "section_description",
      "ASC"
    ],
    "choose_schema": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]",
    "choose_schema_rat": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]"
  },
  {
    "nl_queries": "Bar chart x axis minister y axis how many minister , and rank by the total number in ascending .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC'}",
    "record_name": "2527@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis minister y axis how many minister , and rank by the total number in ascending .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "minister",
      "y",
      "axis",
      "how",
      "many",
      "minister",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "total",
      "number",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "A bar chart about what is the age and hometown of every teacher ? , show y-axis in desc order .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC'}",
    "record_name": "711@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what is the age and hometown of every teacher ? , show y-axis in desc order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?",
      ",",
      "show",
      "y-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Show the average of age from each country , and rank by the x-axis in descending .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "696@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the average of age from each country , and rank by the x-axis in descending .",
    "question_toks": [
      "Show",
      "the",
      "average",
      "of",
      "age",
      "from",
      "each",
      "country",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "x-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Plot the number of payment method code by grouped by payment method code as a bar graph , and show by the Payment_Method_Code from low to high .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2010@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of payment method code by grouped by payment method code as a bar graph , and show by the Payment_Method_Code from low to high .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "payment",
      "method",
      "code",
      "by",
      "grouped",
      "by",
      "payment",
      "method",
      "code",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "show",
      "by",
      "the",
      "Payment_Method_Code",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Bar chart of the number of position from each position , and could you sort the number of position in asc order please ?",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC'}",
    "record_name": "2585@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the number of position from each position , and could you sort the number of position in asc order please ?",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "position",
      "from",
      "each",
      "position",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "the",
      "number",
      "of",
      "position",
      "in",
      "asc",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Position",
      ")",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]@SEP@Table aircraft, columns = [*,Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion]"
  },
  {
    "nl_queries": "Can you draw a bar chart to show the number of positions of the pilots ? , list in desc by the X please .",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC'}",
    "record_name": "2585@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you draw a bar chart to show the number of positions of the pilots ? , list in desc by the X please .",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "number",
      "of",
      "positions",
      "of",
      "the",
      "pilots",
      "?",
      ",",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "Position",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "I want to see trend the number of season over season by Away_team , list by the x axis in ascending .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1490@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend the number of season over season by Away_team , list by the x axis in ascending .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "number",
      "of",
      "season",
      "over",
      "season",
      "by",
      "Away_team",
      ",",
      "list",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Stack bar chart of how many home team vs Away_team based on home team , and order names in ascending order .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team ASC'}",
    "record_name": "1488@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stack bar chart of how many home team vs Away_team based on home team , and order names in ascending order .",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "home",
      "team",
      "vs",
      "Away_team",
      "based",
      "on",
      "home",
      "team",
      ",",
      "and",
      "order",
      "names",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Home_team",
      "ORDER",
      "BY",
      "Home_team",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Give me a bar chart for the number of country of each country",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country'}",
    "record_name": "693",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the number of country of each country",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "number",
      "of",
      "country",
      "of",
      "each",
      "country"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart , show by the Y-axis in desc .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart , show by the Y-axis in desc .",
    "question_toks": [
      "Bin",
      "the",
      "settlement",
      "date",
      "for",
      "each",
      "settlement",
      "case",
      "into",
      "the",
      "day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]"
  },
  {
    "nl_queries": "what is the total number of last names of all candidates ? , and could you sort by the names in descending ?",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC'}",
    "record_name": "2879@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "what is the total number of last names of all candidates ? , and could you sort by the names in descending ?",
    "question_toks": [
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "last",
      "names",
      "of",
      "all",
      "candidates",
      "?",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "names",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "last_name",
      "DESC"
    ],
    "choose_schema": "Table Candidates, columns = [*,candidate_id, candidate_details]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]@SEP@Table Candidates, columns = [candidate_id, candidate_details]@SEP@Table Candidate_Assessments, columns = [candidate_id, qualification, assessment_date, asessment_outcome_code]"
  },
  {
    "nl_queries": "Which ministers are not a part of the Progress Party , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister\"}",
    "record_name": "2517",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which ministers are not a part of the Progress Party , and count them by a bar chart",
    "question_toks": [
      "Which",
      "ministers",
      "are",
      "not",
      "a",
      "part",
      "of",
      "the",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Compare the total number of each minister using a bar graph , rank in descending by the x-axis .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC'}",
    "record_name": "2527@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of each minister using a bar graph , rank in descending by the x-axis .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "each",
      "minister",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "A pie chart showing the total number of each ship's nationality .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality'}",
    "record_name": "2759",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart showing the total number of each ship's nationality .",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship's",
      "nationality",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Bar chart of sum amount payment from each payment method code , and sort X in descending order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2011@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of sum amount payment from each payment method code , and sort X in descending order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "sum",
      "amount",
      "payment",
      "from",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "sort",
      "X",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "How many parties of the time they left office , binning the left office time into Year interval , and then split by the minister's name .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister', 'binning': 'BIN Left_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY YEAR'}",
    "record_name": "2521",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they left office , binning the left office time into Year interval , and then split by the minister's name .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "left",
      "office",
      ",",
      "binning",
      "the",
      "left",
      "office",
      "time",
      "into",
      "Year",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "BIN",
      "Left_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , list from high to low by the total number .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC'}",
    "record_name": "3269@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , list from high to low by the total number .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "List the description of all aircrafts , and count them by a bar chart , and sort bar in ascending order .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC'}",
    "record_name": "34@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the description of all aircrafts , and count them by a bar chart , and sort bar in ascending order .",
    "question_toks": [
      "List",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "bar",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Bar chart of the number of course name from each course name , and I want to show from low to high by the X-axis please .",
    "VQL": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC'}",
    "record_name": "2880@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the number of course name from each course name , and I want to show from low to high by the X-axis please .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "course",
      "name",
      "from",
      "each",
      "course",
      "name",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name",
      "ORDER",
      "BY",
      "course_name",
      "ASC"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Bar chart of sum amount payment from each payment method code , and show by the y axis from high to low .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC'}",
    "record_name": "2011@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of sum amount payment from each payment method code , and show by the y axis from high to low .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "sum",
      "amount",
      "payment",
      "from",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "What is the total number of ships with different nationalities and ship types ? , I want to order x-axis from low to high order please .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC'}",
    "record_name": "2755@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of ships with different nationalities and ship types ? , I want to order x-axis from low to high order please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "ships",
      "with",
      "different",
      "nationalities",
      "and",
      "ship",
      "types",
      "?",
      ",",
      "I",
      "want",
      "to",
      "order",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Stacked bar chart of how many nationality for with each Type in each nationality , I want to list how many nationality from high to low order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC'}",
    "record_name": "2755@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar chart of how many nationality for with each Type in each nationality , I want to list how many nationality from high to low order .",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "nationality",
      "for",
      "with",
      "each",
      "Type",
      "in",
      "each",
      "nationality",
      ",",
      "I",
      "want",
      "to",
      "list",
      "how",
      "many",
      "nationality",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "For all course_name from courses table , group by the course name and count them with a bar chart , I want to sort in descending by the x axis .",
    "VQL": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC'}",
    "record_name": "2880@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For all course_name from courses table , group by the course name and count them with a bar chart , I want to sort in descending by the x axis .",
    "question_toks": [
      "For",
      "all",
      "course_name",
      "from",
      "courses",
      "table",
      ",",
      "group",
      "by",
      "the",
      "course",
      "name",
      "and",
      "count",
      "them",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name",
      "ORDER",
      "BY",
      "course_name",
      "DESC"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Show the number of fate from each fate , sort x-axis in ascending order please .",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC'}",
    "record_name": "2763@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of fate from each fate , sort x-axis in ascending order please .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "fate",
      "from",
      "each",
      "fate",
      ",",
      "sort",
      "x-axis",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "Fate",
      "ASC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "I want to see trend the number of season over season by Away_team",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team BIN Season BY YEAR'}",
    "record_name": "1490",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend the number of season over season by Away_team",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "number",
      "of",
      "season",
      "over",
      "season",
      "by",
      "Away_team"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Draw a bar chart of country versus the total number , and rank from low to high by the X-axis .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC'}",
    "record_name": "690@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of country versus the total number , and rank from low to high by the X-axis .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "country",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "and",
      "rank",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "How many singers are from each country . Visualize by pie chart .",
    "VQL": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "689",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many singers are from each country . Visualize by pie chart .",
    "question_toks": [
      "How",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      ".",
      "Visualize",
      "by",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made , and could you order in asc by the Y-axis ?",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made , and could you order in asc by the Y-axis ?",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made",
      ",",
      "and",
      "could",
      "you",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "What is the average age of singers for each country ? Visualize with a bar chart , show X-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "696@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average age of singers for each country ? Visualize with a bar chart , show X-axis in ascending order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "?",
      "Visualize",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "X-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Compute the total the total number across type as a pie chart .",
    "VQL": "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE'}",
    "record_name": "2761",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Compute the total the total number across type as a pie chart .",
    "question_toks": [
      "Compute",
      "the",
      "total",
      "the",
      "total",
      "number",
      "across",
      "type",
      "as",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Create a bar chart showing age across hometown , show from low to high by the Y .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC'}",
    "record_name": "711@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing age across hometown , show from low to high by the Y .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "age",
      "across",
      "hometown",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality , and I want to list by the names in ascending .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2587@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality , and I want to list by the names in ascending .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "by",
      "the",
      "names",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "List the number of games in each season and group by away team in a group line chart , could you sort x-axis in desc order ?",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC'}",
    "record_name": "1484@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season and group by away team in a group line chart , could you sort x-axis in desc order ?",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      ",",
      "could",
      "you",
      "sort",
      "x-axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "How many singers are from each country , I want to show by the bar from low to high .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC'}",
    "record_name": "690@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many singers are from each country , I want to show by the bar from low to high .",
    "question_toks": [
      "How",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      ",",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "bar",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bar chart of the number of course name from each course name",
    "VQL": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
    "db_id": "student_assessment",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name'}",
    "record_name": "2880",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the number of course name from each course name",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "course",
      "name",
      "from",
      "each",
      "course",
      "name"
    ],
    "query": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Show me a stacked bar graph , the x-axis is the nationality of ship , and the y-axis is their total number of different nationality and split by ship type , sort x-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC'}",
    "record_name": "2755@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a stacked bar graph , the x-axis is the nationality of ship , and the y-axis is their total number of different nationality and split by ship type , sort x-axis in ascending order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "stacked",
      "bar",
      "graph",
      ",",
      "the",
      "x-axis",
      "is",
      "the",
      "nationality",
      "of",
      "ship",
      ",",
      "and",
      "the",
      "y-axis",
      "is",
      "their",
      "total",
      "number",
      "of",
      "different",
      "nationality",
      "and",
      "split",
      "by",
      "ship",
      "type",
      ",",
      "sort",
      "x-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort by the sum population in asc .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort by the sum population in asc .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "sum",
      "population",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "List the number of the description of all aircrafts , and show in ascending by the bars .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC'}",
    "record_name": "34@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the description of all aircrafts , and show in ascending by the bars .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "What are the number of the phone numbers for each employee ? , rank by the Y from high to low .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC'}",
    "record_name": "435@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the phone numbers for each employee ? , rank by the Y from high to low .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      "?",
      ",",
      "rank",
      "by",
      "the",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]@SEP@Table Customer, columns = [*,CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table InvoiceLine, columns = [*,InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "What is the total number of each ship type ? Give me a bar chart , sort by the y axis in desc .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC'}",
    "record_name": "2758@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of each ship type ? Give me a bar chart , sort by the y axis in desc .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "List the number of the description of all aircrafts .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "34",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the description of all aircrafts .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Please use a bar chart to show the total amount of payment by each payment method code , and rank by the Payment_Method_Code in ascending .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2011@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the total amount of payment by each payment method code , and rank by the Payment_Method_Code in ascending .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Payment_Method_Code",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "What about the average amounts of payments by each method code ? You can give me a bar chart , display from high to low by the X .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2012@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What about the average amounts of payments by each method code ? You can give me a bar chart , display from high to low by the X .",
    "question_toks": [
      "What",
      "about",
      "the",
      "average",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Bar chart x axis type y axis the total number",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE'}",
    "record_name": "2762",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis type y axis the total number",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "type",
      "y",
      "axis",
      "the",
      "total",
      "number"
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Draw a bar chart of country versus the total number , and sort the total number in desc order .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC'}",
    "record_name": "690@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of country versus the total number , and sort the total number in desc order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "country",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "and",
      "sort",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Show me the comparison of the total number of every ship type with a bar graph , sort X in asc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC'}",
    "record_name": "2758@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the comparison of the total number of every ship type with a bar graph , sort X in asc order .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "comparison",
      "of",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "with",
      "a",
      "bar",
      "graph",
      ",",
      "sort",
      "X",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Draw a bar chart of description versus the number of description , and could you sort by the y axis in asc ?",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC'}",
    "record_name": "34@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of description versus the number of description , and could you sort by the y axis in asc ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "description",
      "versus",
      "the",
      "number",
      "of",
      "description",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "I want to know the proportion of the total number for each payment method code .",
    "VQL": "Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2009",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of the total number for each payment method code .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "number",
      "for",
      "each",
      "payment",
      "method",
      "code",
      "."
    ],
    "query": "Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality'}",
    "record_name": "2586",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 . Visualize by bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Create a pie chart showing how many description across description .",
    "VQL": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "33",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing how many description across description .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "how",
      "many",
      "description",
      "across",
      "description",
      "."
    ],
    "query": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Plot season by how many season as a line chart , and could you sort by the x-axis in ascending ?",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1495@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Plot season by how many season as a line chart , and could you sort by the x-axis in ascending ?",
    "question_toks": [
      "Plot",
      "season",
      "by",
      "how",
      "many",
      "season",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "x-axis",
      "in",
      "ascending",
      "?"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Show names and seatings for all tracks opened after 2000 by a pie chart .",
    "VQL": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , Seating FROM track WHERE year_opened > 2000', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000'}",
    "record_name": "2645",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show names and seatings for all tracks opened after 2000 by a pie chart .",
    "question_toks": [
      "Show",
      "names",
      "and",
      "seatings",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "Seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]"
  },
  {
    "nl_queries": "Plot the number of payment method code by grouped by payment method code as a bar graph , order in descending by the Payment_Method_Code .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2010@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of payment method code by grouped by payment method code as a bar graph , order in descending by the Payment_Method_Code .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "payment",
      "method",
      "code",
      "by",
      "grouped",
      "by",
      "payment",
      "method",
      "code",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "Payment_Method_Code",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Bar graph to show the number of last name from different last name , list X-axis in desc order .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC'}",
    "record_name": "2879@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of last name from different last name , list X-axis in desc order .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "last",
      "name",
      "from",
      "different",
      "last",
      "name",
      ",",
      "list",
      "X-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "last_name",
      "DESC"
    ],
    "choose_schema": "Table People, columns = [*,person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]"
  },
  {
    "nl_queries": "Give me a histogram for how many singers are from each country ? , and could you display in ascending by the the total number ?",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC'}",
    "record_name": "690@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for how many singers are from each country ? , and could you display in ascending by the the total number ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "and",
      "could",
      "you",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "What are the number of the phone numbers for each employee ? , display in descending by the bars .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC'}",
    "record_name": "435@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the phone numbers for each employee ? , display in descending by the bars .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      "?",
      ",",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Bar graph to show the number of took office from different took office",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party BIN Took_office BY WEEKDAY'}",
    "record_name": "2524",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar graph to show the number of took office from different took office",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "took",
      "office",
      "from",
      "different",
      "took",
      "office"
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the day of the week interval and then compute the total amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "2000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the day of the week interval and then compute the total amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "compute",
      "the",
      "total",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team , and order Season from high to low order please .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC'}",
    "record_name": "1484@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team , and order Season from high to low order please .",
    "question_toks": [
      "Give",
      "me",
      "line",
      "charts",
      "of",
      "worldwide",
      "gross",
      "the",
      "number",
      "of",
      "season",
      "over",
      "year",
      "season",
      "by",
      "major",
      "genres",
      "Away_team",
      ",",
      "and",
      "order",
      "Season",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "What is the total number of every ship type by categorizing by nationality ? , and could you sort in desc by the the number of type please ?",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC'}",
    "record_name": "2756@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of every ship type by categorizing by nationality ? , and could you sort in desc by the the number of type please ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "by",
      "categorizing",
      "by",
      "nationality",
      "?",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "the",
      "number",
      "of",
      "type",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the number of games in each season and group by away team in a group line chart . The x-axis is season .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team BIN Season BY YEAR'}",
    "record_name": "1490",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Show the number of games in each season and group by away team in a group line chart . The x-axis is season .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      ".",
      "The",
      "x-axis",
      "is",
      "season",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show me how many type by type in a histogram , and sort by the y axis in desc .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC'}",
    "record_name": "2758@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many type by type in a histogram , and sort by the y axis in desc .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "type",
      "by",
      "type",
      "in",
      "a",
      "histogram",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "A bar chart about what is the age and hometown of every teacher ? , and I want to list in asc by the Age .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC'}",
    "record_name": "711@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what is the age and hometown of every teacher ? , and I want to list in asc by the Age .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "Age",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "A stacked bar chart shows the total number of ships with different nationalities and split by ship type , order by the Nationality from low to high .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC'}",
    "record_name": "2755@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A stacked bar chart shows the total number of ships with different nationalities and split by ship type , order by the Nationality from low to high .",
    "question_toks": [
      "A",
      "stacked",
      "bar",
      "chart",
      "shows",
      "the",
      "total",
      "number",
      "of",
      "ships",
      "with",
      "different",
      "nationalities",
      "and",
      "split",
      "by",
      "ship",
      "type",
      ",",
      "order",
      "by",
      "the",
      "Nationality",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart .",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality Show bar chart , display by the names in desc .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2587@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality Show bar chart , display by the names in desc .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      "Show",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "names",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season'}",
    "record_name": "1484",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team",
    "question_toks": [
      "Give",
      "me",
      "line",
      "charts",
      "of",
      "worldwide",
      "gross",
      "the",
      "number",
      "of",
      "season",
      "over",
      "year",
      "season",
      "by",
      "major",
      "genres",
      "Away_team"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Season"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Plot season by how many season as a line chart",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game BIN Season BY YEAR'}",
    "record_name": "1495",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Plot season by how many season as a line chart",
    "question_toks": [
      "Plot",
      "season",
      "by",
      "how",
      "many",
      "season",
      "as",
      "a",
      "line",
      "chart"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Show me the proportion of classes of all races using a pie chart .",
    "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM race GROUP BY Class",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , COUNT(Class) FROM race GROUP BY Class'}",
    "record_name": "2642",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me the proportion of classes of all races using a pie chart .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "proportion",
      "of",
      "classes",
      "of",
      "all",
      "races",
      "using",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Class , COUNT(Class) FROM race GROUP BY Class",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Give me a histogram to show the date and the amount for all the payments processed with Visa , and show Date_Payment_Made in ascending order please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\"}",
    "record_name": "2030@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram to show the date and the amount for all the payments processed with Visa , and show Date_Payment_Made in ascending order please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "to",
      "show",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "and",
      "show",
      "Date_Payment_Made",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the phone numbers of all employees , sort names from high to low order .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC'}",
    "record_name": "435@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the phone numbers of all employees , sort names from high to low order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "sort",
      "names",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]@SEP@Table Artist, columns = [ArtistId, Name]@SEP@Table Genre, columns = [GenreId, Name]@SEP@Table MediaType, columns = [MediaTypeId, Name]@SEP@Table Playlist, columns = [PlaylistId, Name]@SEP@Table Track, columns = [TrackId, Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice]"
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort names in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort names in ascending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "sort",
      "names",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Give me a histogram for how many singers are from each country ? , and I want to sort in ascending by the names .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC'}",
    "record_name": "690@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for how many singers are from each country ? , and I want to sort in ascending by the names .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "in",
      "ascending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]@SEP@Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type in a bar chart , could you list y axis in asc order ?",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC'}",
    "record_name": "2765@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the average tonnage of ships of each type in a bar chart , could you list y axis in asc order ?",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "y",
      "axis",
      "in",
      "asc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Tonnage",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Plot the number of payment method code by grouped by payment method code as a bar graph",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2010",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of payment method code by grouped by payment method code as a bar graph",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "payment",
      "method",
      "code",
      "by",
      "grouped",
      "by",
      "payment",
      "method",
      "code",
      "as",
      "a",
      "bar",
      "graph"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart , display by the y axis in ascending .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart , display by the y axis in ascending .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Plot the number of payment method code by grouped by payment method code as a bar graph , show by the y axis in asc .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC'}",
    "record_name": "2010@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of payment method code by grouped by payment method code as a bar graph , show by the y axis in asc .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "payment",
      "method",
      "code",
      "by",
      "grouped",
      "by",
      "payment",
      "method",
      "code",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Bar chart of sum amount payment from each payment method code , rank by the Payment_Method_Code in ascending .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2011@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of sum amount payment from each payment method code , rank by the Payment_Method_Code in ascending .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "sum",
      "amount",
      "payment",
      "from",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "rank",
      "by",
      "the",
      "Payment_Method_Code",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality , could you list in ascending by the x-axis ?",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC'}",
    "record_name": "2756@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality , could you list in ascending by the x-axis ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "stacked",
      "bar",
      "chart",
      "for",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "and",
      "categorize",
      "it",
      "by",
      "ship",
      "nationality",
      ",",
      "could",
      "you",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "x-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "How many total amounts of payments by each method code ? You can give me a bar chart , show in desc by the Payment_Method_Code .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2011@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total amounts of payments by each method code ? You can give me a bar chart , show in desc by the Payment_Method_Code .",
    "question_toks": [
      "How",
      "many",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "Payment_Method_Code",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Return a pie on what are the names and areas of countries with the top 5 largest area ?",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return a pie on what are the names and areas of countries with the top 5 largest area ?",
    "question_toks": [
      "Return",
      "a",
      "pie",
      "on",
      "what",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , list from high to low by the total number .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC'}",
    "record_name": "3269@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , list from high to low by the total number .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality , and rank Y from low to high order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC'}",
    "record_name": "2756@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality , and rank Y from low to high order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "stacked",
      "bar",
      "chart",
      "for",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "and",
      "categorize",
      "it",
      "by",
      "ship",
      "nationality",
      ",",
      "and",
      "rank",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa by each year using a bar chart , and could you sort by the total number from high to low please ?",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa by each year using a bar chart , and could you sort by the total number from high to low please ?",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then sum the amount of each payment as Y , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "2006",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then sum the amount of each payment as Y , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "sum",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      "as",
      "Y",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Compare the total number of each fate with a bar chart , and display Y-axis from low to high order .",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC'}",
    "record_name": "2763@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of each fate with a bar chart , and display Y-axis from low to high order .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "each",
      "fate",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Fate",
      ")",
      "ASC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "A pie chart for what are the number of the descriptions for the aircrafts ?",
    "VQL": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "33",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart for what are the number of the descriptions for the aircrafts ?",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?"
    ],
    "query": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Show me the comparison of the total number of all ships' nationalities with a bar graph , and I want to sort in desc by the x axis .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2760@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the comparison of the total number of all ships' nationalities with a bar graph , and I want to sort in desc by the x axis .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "comparison",
      "of",
      "the",
      "total",
      "number",
      "of",
      "all",
      "ships'",
      "nationalities",
      "with",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart .",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "of",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the left office into Weekday interval , and then split by the minister's name , and rank by the how many left office in descending .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY'}",
    "record_name": "2523@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the left office into Weekday interval , and then split by the minister's name , and rank by the how many left office in descending .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "left",
      "office",
      "into",
      "Weekday",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "how",
      "many",
      "left",
      "office",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "DESC",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Find the number of web accelerators used for each Operating system .",
    "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system",
    "db_id": "browser_web",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system'}",
    "record_name": "372",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of web accelerators used for each Operating system .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "web",
      "accelerators",
      "used",
      "for",
      "each",
      "Operating",
      "system",
      "."
    ],
    "query": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Operating_system",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "web_client_accelerator",
      "GROUP",
      "BY",
      "Operating_system"
    ],
    "choose_schema": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]",
    "choose_schema_rat": "Table accelerator_compatible_browser, columns = [*,accelerator_id, browser_id, compatible_since_year]"
  },
  {
    "nl_queries": "Stacked bar chart of how many nationality for with each Type in each nationality",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality'}",
    "record_name": "2755",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar chart of how many nationality for with each Type in each nationality",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "nationality",
      "for",
      "with",
      "each",
      "Type",
      "in",
      "each",
      "nationality"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Count the section_description , and group by section_description with a bar chart , I want to order names in descending order .",
    "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC",
    "db_id": "student_transcripts_tracking",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC'}",
    "record_name": "2902@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          26,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the section_description , and group by section_description with a bar chart , I want to order names in descending order .",
    "question_toks": [
      "Count",
      "the",
      "section_description",
      ",",
      "and",
      "group",
      "by",
      "section_description",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "names",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "section_description",
      ",",
      "COUNT",
      "(",
      "section_description",
      ")",
      "FROM",
      "Sections",
      "GROUP",
      "BY",
      "section_description",
      "ORDER",
      "BY",
      "section_description",
      "DESC"
    ],
    "choose_schema": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]",
    "choose_schema_rat": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and list y-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC'}",
    "record_name": "3269@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and list y-axis in ascending order .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "and",
      "list",
      "y-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Bar graph to show the number of took office from different took office , I want to sort in desc by the Y please .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) DESC', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY'}",
    "record_name": "2524@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar graph to show the number of took office from different took office , I want to sort in desc by the Y please .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "took",
      "office",
      "from",
      "different",
      "took",
      "office",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "Y",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "DESC",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show the average age of singers for each country with a bar chart .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country'}",
    "record_name": "696",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the average age of singers for each country with a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "average",
      "age",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Please tell me the repeat times of each ministers using a pie chart .",
    "VQL": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister'}",
    "record_name": "2518",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Please tell me the repeat times of each ministers using a pie chart .",
    "question_toks": [
      "Please",
      "tell",
      "me",
      "the",
      "repeat",
      "times",
      "of",
      "each",
      "ministers",
      "using",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Compare the frequency of each payment method code using a bar chart , and could you display x-axis in descending order please ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2010@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the frequency of each payment method code using a bar chart , and could you display x-axis in descending order please ?",
    "question_toks": [
      "Compare",
      "the",
      "frequency",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "display",
      "x-axis",
      "in",
      "descending",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Bar chart of sum amount payment from each payment method code",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2011",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of sum amount payment from each payment method code",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "sum",
      "amount",
      "payment",
      "from",
      "each",
      "payment",
      "method",
      "code"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "What about the average amounts of payments by each method code ? You can give me a bar chart , sort from high to low by the y-axis .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC'}",
    "record_name": "2012@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What about the average amounts of payments by each method code ? You can give me a bar chart , sort from high to low by the y-axis .",
    "question_toks": [
      "What",
      "about",
      "the",
      "average",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Create a bar chart showing how many class across class , sort y axis from low to high order .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC'}",
    "record_name": "2643@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many class across class , sort y axis from low to high order .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "class",
      "across",
      "class",
      ",",
      "sort",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "List the number of games for each away team and group by home team in a stacked bar chart . The x-axis is away team .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team'}",
    "record_name": "1487",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of games for each away team and group by home team in a stacked bar chart . The x-axis is away team .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "away",
      "team",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "stacked",
      "bar",
      "chart",
      ".",
      "The",
      "x-axis",
      "is",
      "away",
      "team",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Away_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Bar chart x axis away team y axis the number of away team , and list from low to high by the the number of away team please .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC'}",
    "record_name": "1493@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis away team y axis the number of away team , and list from low to high by the the number of away team please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "away",
      "team",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "away",
      "team",
      ",",
      "and",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "the",
      "number",
      "of",
      "away",
      "team",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "I want to see trend the number of season over season by Home_team , and order by the X-axis from high to low .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season DESC'}",
    "record_name": "1482@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend the number of season over season by Home_team , and order by the X-axis from high to low .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "number",
      "of",
      "season",
      "over",
      "season",
      "by",
      "Home_team",
      ",",
      "and",
      "order",
      "by",
      "the",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Give me a bar chart for mean tonnage of each type",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE'}",
    "record_name": "2765",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for mean tonnage of each type",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "mean",
      "tonnage",
      "of",
      "each",
      "type"
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Stacked bar chart of how many away team for with each Home_team in each away team , rank from low to high by the y-axis .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) ASC'}",
    "record_name": "1487@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar chart of how many away team for with each Home_team in each away team , rank from low to high by the y-axis .",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "away",
      "team",
      "for",
      "with",
      "each",
      "Home_team",
      "in",
      "each",
      "away",
      "team",
      ",",
      "rank",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY COUNT(Away_team) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Away_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "I want to see trend the number of season over season by Home_team , show x-axis in ascending order .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC'}",
    "record_name": "1482@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend the number of season over season by Home_team , show x-axis in ascending order .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "number",
      "of",
      "season",
      "over",
      "season",
      "by",
      "Home_team",
      ",",
      "show",
      "x-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type in a bar chart , and show Type in desc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC'}",
    "record_name": "2762@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the number of ships of each type in a bar chart , and show Type in desc order .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "Type",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the trend about the average amount of each payment about the payment day , line chart . Note that , you should order the payment day in ascending order .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2015",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the average amount of each payment about the payment day , line chart . Note that , you should order the payment day in ascending order .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "average",
      "amount",
      "of",
      "each",
      "payment",
      "about",
      "the",
      "payment",
      "day",
      ",",
      "line",
      "chart",
      ".",
      "Note",
      "that",
      ",",
      "you",
      "should",
      "order",
      "the",
      "payment",
      "day",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type Show bar chart , list by the Y in desc please .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC'}",
    "record_name": "2762@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the number of ships of each type Show bar chart , list by the Y in desc please .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "Y",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the average age of singers for each country with a bar chart , and I want to show in descending by the X please .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "696@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the average age of singers for each country with a bar chart , and I want to show in descending by the X please .",
    "question_toks": [
      "Show",
      "the",
      "average",
      "age",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "X",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Plot how many minister by grouped by minister as a bar graph , display y-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC'}",
    "record_name": "2519@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot how many minister by grouped by minister as a bar graph , display y-axis in ascending order .",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "minister",
      "by",
      "grouped",
      "by",
      "minister",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "display",
      "y-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Return a histogram on what are the age and hometown of teachers ? , could you display by the Y-axis in descending ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC'}",
    "record_name": "711@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on what are the age and hometown of teachers ? , could you display by the Y-axis in descending ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "what",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?",
      ",",
      "could",
      "you",
      "display",
      "by",
      "the",
      "Y-axis",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Stack bar chart of the number of type vs Nationality based on type , could you order by the y-axis from high to low ?",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC'}",
    "record_name": "2756@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stack bar chart of the number of type vs Nationality based on type , could you order by the y-axis from high to low ?",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "type",
      "vs",
      "Nationality",
      "based",
      "on",
      "type",
      ",",
      "could",
      "you",
      "order",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show me the trend using a line chart that group and count payment date , and then sort the bars in ascending order of date .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2008",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend using a line chart that group and count payment date , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "using",
      "a",
      "line",
      "chart",
      "that",
      "group",
      "and",
      "count",
      "payment",
      "date",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Show the number of games in each season and group by home team in a group line chart . The x-axis is season .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team BIN Season BY YEAR'}",
    "record_name": "1489",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Show the number of games in each season and group by home team in a group line chart . The x-axis is season .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      ".",
      "The",
      "x-axis",
      "is",
      "season",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the left office into Weekday interval , and then split by the minister's name .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY WEEKDAY'}",
    "record_name": "2523",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the left office into Weekday interval , and then split by the minister's name .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "left",
      "office",
      "into",
      "Weekday",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "What is the proportion of the number of course names in the course table . ?",
    "VQL": "Visualize PIE SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
    "db_id": "student_assessment",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name', 'binning': ''}, 'VQL': 'Visualize PIE SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name'}",
    "record_name": "2881",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What is the proportion of the number of course names in the course table . ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "proportion",
      "of",
      "the",
      "number",
      "of",
      "course",
      "names",
      "in",
      "the",
      "course",
      "table",
      ".",
      "?"
    ],
    "query": "Visualize PIE SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class , and could you display x axis in desc order please ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC'}",
    "record_name": "2648@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the race class and number of races in each class , and could you display x axis in desc order please ?",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      ",",
      "and",
      "could",
      "you",
      "display",
      "x",
      "axis",
      "in",
      "desc",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "A pie chart about what are the names and areas of countries with the top 5 largest area ?",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart about what are the names and areas of countries with the top 5 largest area ?",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Bin the claim date into Year interval and count them for visualizing a bar chart , show Y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into Year interval and count them for visualizing a bar chart , show Y-axis in asc order .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "Y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "List the number of the description of all aircrafts , and could you display from low to high by the total number ?",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC'}",
    "record_name": "34@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the description of all aircrafts , and could you display from low to high by the total number ?",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "could",
      "you",
      "display",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "What is the proportion of the nationality of all ships ? Give me a pie chart .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality'}",
    "record_name": "2759",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What is the proportion of the nationality of all ships ? Give me a pie chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "proportion",
      "of",
      "the",
      "nationality",
      "of",
      "all",
      "ships",
      "?",
      "Give",
      "me",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the Year interval and then shows the total amount of each payment , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "2002",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the Year interval and then shows the total amount of each payment , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "total",
      "amount",
      "of",
      "each",
      "payment",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Can you draw a bar chart to show the number of positions of the pilots ?",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position'}",
    "record_name": "2585",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you draw a bar chart to show the number of positions of the pilots ?",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "number",
      "of",
      "positions",
      "of",
      "the",
      "pilots",
      "?"
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Give me a line chart to show the trend of the amount of each payment of different payment methods , ordered by the payment date in ascending order .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , Amount_Payment FROM Payments GROUP BY Payment_Method_Code ,  Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , Amount_Payment FROM Payments GROUP BY Payment_Method_Code ,  Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , Amount_Payment FROM Payments GROUP BY Payment_Method_Code ,  Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2005",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ],
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Give me a line chart to show the trend of the amount of each payment of different payment methods , ordered by the payment date in ascending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "line",
      "chart",
      "to",
      "show",
      "the",
      "trend",
      "of",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      "of",
      "different",
      "payment",
      "methods",
      ",",
      "ordered",
      "by",
      "the",
      "payment",
      "date",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , Amount_Payment FROM Payments GROUP BY Payment_Method_Code ,  Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      ",",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries with a pie chart .",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the names and surface areas of the 5 largest countries with a pie chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "List the number of games in each season and group by home team in a group line chart , and I want to show by the Season in ascending .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC'}",
    "record_name": "1482@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season and group by home team in a group line chart , and I want to show by the Season in ascending .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "Season",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each class , and order x axis in asc order .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC'}",
    "record_name": "2648@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each class , and order x axis in asc order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "class",
      ",",
      "and",
      "order",
      "x",
      "axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the descriptions for the aircrafts ? , and could you display from low to high by the total number ?",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC'}",
    "record_name": "34@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the descriptions for the aircrafts ? , and could you display from low to high by the total number ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?",
      ",",
      "and",
      "could",
      "you",
      "display",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "What is the number of singers for each country ? Show a bar chart , display by the names in ascending .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "693@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the number of singers for each country ? Show a bar chart , display by the names in ascending .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "?",
      "Show",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "names",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]@SEP@Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]"
  },
  {
    "nl_queries": "Return a bar chart showing the total number of ships' nationalities , display from low to high by the how many nationality .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC'}",
    "record_name": "2760@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing the total number of ships' nationalities , display from low to high by the how many nationality .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "ships'",
      "nationalities",
      ",",
      "display",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "how",
      "many",
      "nationality",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Compare the total number of each fate with a bar chart , could you show by the the number of fate in desc ?",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC'}",
    "record_name": "2763@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of each fate with a bar chart , could you show by the the number of fate in desc ?",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "each",
      "fate",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "show",
      "by",
      "the",
      "the",
      "number",
      "of",
      "fate",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Fate",
      ")",
      "DESC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each class",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2648",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each class",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "class"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "What is the number of singers for each country ? Show a bar chart , and sort by the bar from high to low .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "693@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the number of singers for each country ? Show a bar chart , and sort by the bar from high to low .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "?",
      "Show",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "bar",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , and rank by the Y from low to high please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\"}",
    "record_name": "2030@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , and rank by the Y from low to high please .",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "List",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? List the date and the amount using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\"}",
    "record_name": "2030",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which Payments were processed with Visa ? List the date and the amount using a bar chart .",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "List",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Stacked bar of took office and how many took office colored by Minister , and sort Y from low to high order .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY'}",
    "record_name": "2522@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Stacked bar of took office and how many took office colored by Minister , and sort Y from low to high order .",
    "question_toks": [
      "Stacked",
      "bar",
      "of",
      "took",
      "office",
      "and",
      "how",
      "many",
      "took",
      "office",
      "colored",
      "by",
      "Minister",
      ",",
      "and",
      "sort",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "ASC",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "I want to see trend of the number of season by season , order in descending by the X .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC'}",
    "record_name": "1494@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend of the number of season by season , order in descending by the X .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "season",
      "by",
      "season",
      ",",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Return a bar chart on how many singers are from each country ? , and rank from low to high by the X-axis .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC'}",
    "record_name": "690@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on how many singers are from each country ? , and rank from low to high by the X-axis .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "and",
      "rank",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type Show bar chart , and order from high to low by the Type .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC'}",
    "record_name": "2762@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the number of ships of each type Show bar chart , and order from high to low by the Type .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Type",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "List the number of games in each season with a line chart , and list in desc by the x axis please .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1495@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "List the number of games in each season with a line chart , and list in desc by the x axis please .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "x",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show the number of singers in each country with a bar chart , I want to rank y-axis in desc order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC'}",
    "record_name": "693@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of singers in each country with a bar chart , I want to rank y-axis in desc order .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "y-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country by a pie chart .",
    "VQL": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "689",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show all countries and the number of singers in each country by a pie chart .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Pie chart . how many singers are from each country ?",
    "VQL": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "689",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Pie chart . how many singers are from each country ?",
    "question_toks": [
      "Pie",
      "chart",
      ".",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "query": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the descriptions for the aircrafts ? , rank by the Y-axis in desc please .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC'}",
    "record_name": "34@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the descriptions for the aircrafts ? , rank by the Y-axis in desc please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?",
      ",",
      "rank",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Stack bar chart of how many took office vs Minister based on took office , and could you sort by the y axis from low to high ?",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC', 'binning': 'BIN Took_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY YEAR'}",
    "record_name": "2520@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 0
    },
    "question": "Stack bar chart of how many took office vs Minister based on took office , and could you sort by the y axis from low to high ?",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "took",
      "office",
      "vs",
      "Minister",
      "based",
      "on",
      "took",
      "office",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "?"
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "ASC",
      "BIN",
      "Took_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart , and could you order y axis in desc order ?",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart , and could you order y axis in desc order ?",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "of",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "order",
      "y",
      "axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Return a histogram on what are the age and hometown of teachers ? , and could you list in asc by the Age ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC'}",
    "record_name": "711@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on what are the age and hometown of teachers ? , and could you list in asc by the Age ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "what",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?",
      ",",
      "and",
      "could",
      "you",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "Age",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality , and I want to order names in desc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC'}",
    "record_name": "2756@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality , and I want to order names in desc order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "stacked",
      "bar",
      "chart",
      "for",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "and",
      "categorize",
      "it",
      "by",
      "ship",
      "nationality",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "names",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the number of singers in each country with a bar chart , and list by the x-axis from low to high please .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "693@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of singers in each country with a bar chart , and list by the x-axis from low to high please .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Plot how many minister by grouped by minister as a bar graph , and list in desc by the y axis .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC'}",
    "record_name": "2519@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot how many minister by grouped by minister as a bar graph , and list in desc by the y axis .",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "minister",
      "by",
      "grouped",
      "by",
      "minister",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "List the number of the description of all aircrafts , and rank by the Y-axis in desc please .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC'}",
    "record_name": "34@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the description of all aircrafts , and rank by the Y-axis in desc please .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the phone numbers for each employee ? , rank x axis in asc order please .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC'}",
    "record_name": "435@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the phone numbers for each employee ? , rank x axis in asc order please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      "?",
      ",",
      "rank",
      "x",
      "axis",
      "in",
      "asc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Stacked bar chart of the number of left office for with each Minister in each left office",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister', 'binning': 'BIN Left_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY YEAR'}",
    "record_name": "2521",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Stacked bar chart of the number of left office for with each Minister in each left office",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "left",
      "office",
      "for",
      "with",
      "each",
      "Minister",
      "in",
      "each",
      "left",
      "office"
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "BIN",
      "Left_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Draw a bar chart of operating system versus the total number , order in asc by the Y .",
    "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) ASC",
    "db_id": "browser_web",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) ASC'}",
    "record_name": "372@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of operating system versus the total number , order in asc by the Y .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "operating",
      "system",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Operating_system",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "web_client_accelerator",
      "GROUP",
      "BY",
      "Operating_system",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]",
    "choose_schema_rat": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]"
  },
  {
    "nl_queries": "Visualize a bar chart for what are the different classes of races , and how many races correspond to each ? , order x axis in asc order .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC'}",
    "record_name": "2648@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the different classes of races , and how many races correspond to each ? , order x axis in asc order .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?",
      ",",
      "order",
      "x",
      "axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "What is the total number of each ship type ? Give me a bar chart , display X in asc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC'}",
    "record_name": "2758@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of each ship type ? Give me a bar chart , display X in asc order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "X",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "List the phone numbers of all employees , and count them by a bar chart , I want to show in asc by the y axis .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC'}",
    "record_name": "435@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the phone numbers of all employees , and count them by a bar chart , I want to show in asc by the y axis .",
    "question_toks": [
      "List",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "What is the total number of every ship type by categorizing by nationality ? , and sort the number of type in ascending order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC'}",
    "record_name": "2756@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of every ship type by categorizing by nationality ? , and sort the number of type in ascending order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "by",
      "categorizing",
      "by",
      "nationality",
      "?",
      ",",
      "and",
      "sort",
      "the",
      "number",
      "of",
      "type",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "How many singers are from each country , could you display by the y axis in descending please ?",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC'}",
    "record_name": "690@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many singers are from each country , could you display by the y axis in descending please ?",
    "question_toks": [
      "How",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      ",",
      "could",
      "you",
      "display",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2012",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the average amount of payment by each payment method code .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Give me a histogram to show the date and the amount for all the payments processed with Visa , order in desc by the X please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\"}",
    "record_name": "2030@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram to show the date and the amount for all the payments processed with Visa , order in desc by the X please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "to",
      "show",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis , and sort by the y axis in descending please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis , and sort by the y axis in descending please .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type in a pie chart .",
    "VQL": "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE'}",
    "record_name": "2764",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show different types of ships and the average tonnage of ships of each type in a pie chart .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Draw a bar chart showing the total number of every ship type by categorizing by nationality .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type'}",
    "record_name": "2756",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart showing the total number of every ship type by categorizing by nationality .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "by",
      "categorizing",
      "by",
      "nationality",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "What is the average age of singers for each country ? Visualize with a bar chart , list by the total number in desc please .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC'}",
    "record_name": "696@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average age of singers for each country ? Visualize with a bar chart , list by the total number in desc please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "?",
      "Visualize",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Age",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Return a trend line with sorting the payment day in ascending order to show the average amount of payment by each payment day .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2015",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a trend line with sorting the payment day in ascending order to show the average amount of payment by each payment day .",
    "question_toks": [
      "Return",
      "a",
      "trend",
      "line",
      "with",
      "sorting",
      "the",
      "payment",
      "day",
      "in",
      "ascending",
      "order",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "day",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Compare the frequency of each payment method code using a bar chart , rank Y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC'}",
    "record_name": "2010@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the frequency of each payment method code using a bar chart , rank Y-axis in asc order .",
    "question_toks": [
      "Compare",
      "the",
      "frequency",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "Y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Stacked bar chart of the number of left office for with each Minister in each left office",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY WEEKDAY'}",
    "record_name": "2523",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Stacked bar chart of the number of left office for with each Minister in each left office",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "left",
      "office",
      "for",
      "with",
      "each",
      "Minister",
      "in",
      "each",
      "left",
      "office"
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each class , sort in desc by the bars .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC'}",
    "record_name": "2648@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each class , sort in desc by the bars .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "class",
      ",",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team , show in ascending by the Season .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC'}",
    "record_name": "1484@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team , show in ascending by the Season .",
    "question_toks": [
      "Give",
      "me",
      "line",
      "charts",
      "of",
      "worldwide",
      "gross",
      "the",
      "number",
      "of",
      "season",
      "over",
      "year",
      "season",
      "by",
      "major",
      "genres",
      "Away_team",
      ",",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "Season",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "List the number of games in each season with a line chart , and display X in asc order .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC'}",
    "record_name": "1494@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season with a line chart , and display X in asc order .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "display",
      "X",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Visualize a bar chart for what are the different classes of races , and how many races correspond to each ? , and could you order in ascending by the Y ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC'}",
    "record_name": "2648@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the different classes of races , and how many races correspond to each ? , and could you order in ascending by the Y ?",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?",
      ",",
      "and",
      "could",
      "you",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "Y",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Show me a stacked bar graph , the x-axis is the nationality of ship , and the y-axis is their total number of different nationality and split by ship type .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality'}",
    "record_name": "2755",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a stacked bar graph , the x-axis is the nationality of ship , and the y-axis is their total number of different nationality and split by ship type .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "stacked",
      "bar",
      "graph",
      ",",
      "the",
      "x-axis",
      "is",
      "the",
      "nationality",
      "of",
      "ship",
      ",",
      "and",
      "the",
      "y-axis",
      "is",
      "their",
      "total",
      "number",
      "of",
      "different",
      "nationality",
      "and",
      "split",
      "by",
      "ship",
      "type",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "The trend about the the number of season of different Home_team over the season",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team BIN Season BY YEAR'}",
    "record_name": "1489",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "The trend about the the number of season of different Home_team over the season",
    "question_toks": [
      "The",
      "trend",
      "about",
      "the",
      "the",
      "number",
      "of",
      "season",
      "of",
      "different",
      "Home_team",
      "over",
      "the",
      "season"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country Show bar chart , and sort bar in desc order please .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC'}",
    "record_name": "690@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all countries and the number of singers in each country Show bar chart , and sort bar in desc order please .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "bar",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "List the number of games in each season with a line chart , order in descending by the x axis .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1495@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "List the number of games in each season with a line chart , order in descending by the x axis .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Which ministers are not a part of the Progress Party , and count them by a bar chart , list by the Minister from low to high .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC\"}",
    "record_name": "2517@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which ministers are not a part of the Progress Party , and count them by a bar chart , list by the Minister from low to high .",
    "question_toks": [
      "Which",
      "ministers",
      "are",
      "not",
      "a",
      "part",
      "of",
      "the",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "Minister",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Plot how many minister by grouped by minister as a bar graph , and rank by the bar from high to low .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC'}",
    "record_name": "2519@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot how many minister by grouped by minister as a bar graph , and rank by the bar from high to low .",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "minister",
      "by",
      "grouped",
      "by",
      "minister",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "bar",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the description of all aircrafts , list y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC'}",
    "record_name": "34@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the description of all aircrafts , list y-axis in descending order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "list",
      "y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Count the section_description , and group by section_description with a bar chart .",
    "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
    "db_id": "student_transcripts_tracking",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description', 'binning': ''}, 'VQL': 'Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description'}",
    "record_name": "2902",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          26,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the section_description , and group by section_description with a bar chart .",
    "question_toks": [
      "Count",
      "the",
      "section_description",
      ",",
      "and",
      "group",
      "by",
      "section_description",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "section_description",
      ",",
      "COUNT",
      "(",
      "section_description",
      ")",
      "FROM",
      "Sections",
      "GROUP",
      "BY",
      "section_description"
    ],
    "choose_schema": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]",
    "choose_schema_rat": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]"
  },
  {
    "nl_queries": "What are the phone numbers for each employee , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "db_id": "chinook_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone'}",
    "record_name": "435",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the phone numbers for each employee , and count them by a bar chart",
    "question_toks": [
      "What",
      "are",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Show the number of games for each away team in a bar chart .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team'}",
    "record_name": "1493",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of games for each away team in a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "away",
      "team",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show all ministers who do not belong to Progress Party , and count them by a bar chart , and could you show total number from high to low order ?",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC\"}",
    "record_name": "2517@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all ministers who do not belong to Progress Party , and count them by a bar chart , and could you show total number from high to low order ?",
    "question_toks": [
      "Show",
      "all",
      "ministers",
      "who",
      "do",
      "not",
      "belong",
      "to",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "show",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country Show bar chart , and show from low to high by the Y .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC'}",
    "record_name": "690@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all countries and the number of singers in each country Show bar chart , and show from low to high by the Y .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Please use a bar chart to show the total amount of payment by each payment method code , and I want to display by the Y-axis from high to low .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC'}",
    "record_name": "2011@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the total amount of payment by each payment method code , and I want to display by the Y-axis from high to low .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "by",
      "the",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Return a bar chart showing the total number of each ship type , list Y in ascending order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC'}",
    "record_name": "2758@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing the total number of each ship type , list Y in ascending order .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      ",",
      "list",
      "Y",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Return a bar chart showing the total number of each ship type , and I want to display X in descending order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC'}",
    "record_name": "2758@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing the total number of each ship type , and I want to display X in descending order .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "X",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class with a bar chart , and sort in desc by the bars .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC'}",
    "record_name": "2648@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the race class and number of races in each class with a bar chart , and sort in desc by the bars .",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "A pie chart for listing the number of the description of all aircrafts .",
    "VQL": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "33",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart for listing the number of the description of all aircrafts .",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      "."
    ],
    "query": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , sort X-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC'}",
    "record_name": "3269@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , sort X-axis in ascending order .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "sort",
      "X-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Stack bar chart of how many home team vs Away_team based on home team , and list by the Y in descending .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) DESC'}",
    "record_name": "1488@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stack bar chart of how many home team vs Away_team based on home team , and list by the Y in descending .",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "how",
      "many",
      "home",
      "team",
      "vs",
      "Away_team",
      "based",
      "on",
      "home",
      "team",
      ",",
      "and",
      "list",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Home_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Stacked bar chart of the number of left office for with each Minister in each left office , and I want to list Y in asc order .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY'}",
    "record_name": "2523@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Stacked bar chart of the number of left office for with each Minister in each left office , and I want to list Y in asc order .",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "left",
      "office",
      "for",
      "with",
      "each",
      "Minister",
      "in",
      "each",
      "left",
      "office",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "ASC",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Plot the number of phone by grouped by phone as a bar graph , and could you list X in asc order please ?",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC'}",
    "record_name": "435@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of phone by grouped by phone as a bar graph , and could you list X in asc order please ?",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "phone",
      "by",
      "grouped",
      "by",
      "phone",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "could",
      "you",
      "list",
      "X",
      "in",
      "asc",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "ASC"
    ],
    "choose_schema": "Table Customer, columns = [*,CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Visualize a bar chart for what are the different classes of races , and how many races correspond to each ? , list by the y-axis from high to low .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC'}",
    "record_name": "2648@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the different classes of races , and how many races correspond to each ? , list by the y-axis from high to low .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?",
      ",",
      "list",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Bar chart x axis left office y axis the number of left office , show total number from low to high order .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY'}",
    "record_name": "2525@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis left office y axis the number of left office , show total number from low to high order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "left",
      "office",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "left",
      "office",
      ",",
      "show",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "ASC",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches , I want to display from high to low by the bar please .",
    "VQL": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches DESC\"}",
    "record_name": "1481@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          "\"Knee problem\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches , I want to display from high to low by the bar please .",
    "question_toks": [
      "How",
      "many",
      "injured",
      "players",
      "not",
      "suffering",
      "from",
      "injury",
      "of",
      "'Knee",
      "problem'",
      "in",
      "each",
      "match",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "grouping",
      "by",
      "number",
      "of",
      "matches",
      ",",
      "I",
      "want",
      "to",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "bar",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Number_of_matches",
      ",",
      "COUNT",
      "(",
      "Number_of_matches",
      ")",
      "FROM",
      "injury_accident",
      "WHERE",
      "injury",
      "!",
      "=",
      "'Knee",
      "problem'",
      "GROUP",
      "BY",
      "Number_of_matches",
      "ORDER",
      "BY",
      "Number_of_matches",
      "DESC"
    ],
    "choose_schema": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Give me a bar chart showing the total number of each minister .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister'}",
    "record_name": "2519",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart showing the total number of each minister .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "minister",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart .",
    "question_toks": [
      "Bin",
      "the",
      "settlement",
      "date",
      "for",
      "each",
      "settlement",
      "case",
      "into",
      "the",
      "day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]"
  },
  {
    "nl_queries": "What are the different classes of races , and how many races correspond to each . Show the proportion .",
    "VQL": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2647",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the different classes of races , and how many races correspond to each . Show the proportion .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      ".",
      "Show",
      "the",
      "proportion",
      "."
    ],
    "query": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type'}",
    "record_name": "2756",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "stacked",
      "bar",
      "chart",
      "for",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "and",
      "categorize",
      "it",
      "by",
      "ship",
      "nationality",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Return a histogram on what are the age and hometown of teachers ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher'}",
    "record_name": "711",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on what are the age and hometown of teachers ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "what",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "List the description of all aircrafts , and count them by a bar chart , and I want to display in descending by the names .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC'}",
    "record_name": "34@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the description of all aircrafts , and count them by a bar chart , and I want to display in descending by the names .",
    "question_toks": [
      "List",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]@SEP@Table pilot, columns = [*,Pilot_Id, Name, Age]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "1998",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis , could you rank by the Y in ascending please ?",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis , could you rank by the Y in ascending please ?",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you rank in desc by the total number ?",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC'}",
    "record_name": "3269@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you rank in desc by the total number ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "could",
      "you",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show me the comparison of the total number of all ships' nationalities with a bar graph , list from high to low by the Y .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC'}",
    "record_name": "2760@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the comparison of the total number of all ships' nationalities with a bar graph , list from high to low by the Y .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "comparison",
      "of",
      "the",
      "total",
      "number",
      "of",
      "all",
      "ships'",
      "nationalities",
      "with",
      "a",
      "bar",
      "graph",
      ",",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What are the descriptions for the aircrafts , and count them by a pie chart",
    "VQL": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "33",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the descriptions for the aircrafts , and count them by a pie chart",
    "question_toks": [
      "What",
      "are",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "pie",
      "chart"
    ],
    "query": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class in a pie chart .",
    "VQL": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2647",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show the race class and number of races in each class in a pie chart .",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Give me a bar chart for mean tonnage of each type , show by the Y in asc .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC'}",
    "record_name": "2765@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for mean tonnage of each type , show by the Y in asc .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "mean",
      "tonnage",
      "of",
      "each",
      "type",
      ",",
      "show",
      "by",
      "the",
      "Y",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Tonnage",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team , and could you rank in asc by the how many home team ?",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC'}",
    "record_name": "1488@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team , and could you rank in asc by the how many home team ?",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "home",
      "team",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "stacked",
      "bar",
      "chart",
      "The",
      "x-axis",
      "is",
      "home",
      "team",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "in",
      "asc",
      "by",
      "the",
      "how",
      "many",
      "home",
      "team",
      "?"
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Home_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team , and list how many home team in descending order .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) DESC'}",
    "record_name": "1488@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team , and list how many home team in descending order .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "home",
      "team",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "stacked",
      "bar",
      "chart",
      "The",
      "x-axis",
      "is",
      "home",
      "team",
      ",",
      "and",
      "list",
      "how",
      "many",
      "home",
      "team",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Home_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "What are the different classes of races , and how many races correspond to each . Show bar chart .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2648",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different classes of races , and how many races correspond to each . Show bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Give me a bar graph for what is the total number of last names of all candidates ? , and order from high to low by the bar .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC'}",
    "record_name": "2879@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar graph for what is the total number of last names of all candidates ? , and order from high to low by the bar .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "graph",
      "for",
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "last",
      "names",
      "of",
      "all",
      "candidates",
      "?",
      ",",
      "and",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "last_name",
      "DESC"
    ],
    "choose_schema": "Table People, columns = [*,person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]@SEP@Table Candidates, columns = [candidate_id, candidate_details]@SEP@Table Candidate_Assessments, columns = [candidate_id, qualification, assessment_date, asessment_outcome_code]"
  },
  {
    "nl_queries": "For all course_name from courses table , group by the course name and count them with a bar chart , and list by the the number of course name from low to high .",
    "VQL": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) ASC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) ASC'}",
    "record_name": "2880@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For all course_name from courses table , group by the course name and count them with a bar chart , and list by the the number of course name from low to high .",
    "question_toks": [
      "For",
      "all",
      "course_name",
      "from",
      "courses",
      "table",
      ",",
      "group",
      "by",
      "the",
      "course",
      "name",
      "and",
      "count",
      "them",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "the",
      "number",
      "of",
      "course",
      "name",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "course_name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "What are the different classes of races , and how many races correspond to each Show bar chart , could you list y-axis in desc order ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC'}",
    "record_name": "2648@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different classes of races , and how many races correspond to each Show bar chart , could you list y-axis in desc order ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "Show",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "y-axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Please use a pie chart to show the proportion of the total amount of payment by each payment method code .",
    "VQL": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2013",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Please use a pie chart to show the proportion of the total amount of payment by each payment method code .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "pie",
      "chart",
      "to",
      "show",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      "."
    ],
    "query": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Find the number of web accelerators used for each Operating system , and I want to rank x-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system DESC",
    "db_id": "browser_web",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system DESC'}",
    "record_name": "372@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of web accelerators used for each Operating system , and I want to rank x-axis from high to low order .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "web",
      "accelerators",
      "used",
      "for",
      "each",
      "Operating",
      "system",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Operating_system",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "web_client_accelerator",
      "GROUP",
      "BY",
      "Operating_system",
      "ORDER",
      "BY",
      "Operating_system",
      "DESC"
    ],
    "choose_schema": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]",
    "choose_schema_rat": "Table accelerator_compatible_browser, columns = [*,accelerator_id, browser_id, compatible_since_year]"
  },
  {
    "nl_queries": "What is the total number of different nationalities of all ships ? Give me a bar graph .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality'}",
    "record_name": "2760",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of different nationalities of all ships ? Give me a bar graph .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "different",
      "nationalities",
      "of",
      "all",
      "ships",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "graph",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart , and sort total number in ascending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart , and sort total number in ascending order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality Show bar chart , and sort total number in desc order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2587@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality Show bar chart , and sort total number in desc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "total",
      "number",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]@SEP@Table aircraft, columns = [*,Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion]"
  },
  {
    "nl_queries": "What about the average amounts of payments by each method code ? You can give me a bar chart .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2012",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What about the average amounts of payments by each method code ? You can give me a bar chart .",
    "question_toks": [
      "What",
      "about",
      "the",
      "average",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country Show bar chart , and I want to sort by the X in asc .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC'}",
    "record_name": "690@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all countries and the number of singers in each country Show bar chart , and I want to sort by the X in asc .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "X",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bar graph to show the total number from different nationality , and show in desc by the X .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2587@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the total number from different nationality , and show in desc by the X .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "nationality",
      ",",
      "and",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "What is the average age of singers for each country ? Visualize with a bar chart , order from high to low by the X-axis .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "696@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average age of singers for each country ? Visualize with a bar chart , order from high to low by the X-axis .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "?",
      "Visualize",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Tell me the proportion of the nationality of all ships .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality'}",
    "record_name": "2759",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Tell me the proportion of the nationality of all ships .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "proportion",
      "of",
      "the",
      "nationality",
      "of",
      "all",
      "ships",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "How many parties of the time they leave office , binning the leave office into WEEKDAY interval",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party BIN Left_office BY WEEKDAY'}",
    "record_name": "2525",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they leave office , binning the leave office into WEEKDAY interval",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "leave",
      "office",
      ",",
      "binning",
      "the",
      "leave",
      "office",
      "into",
      "WEEKDAY",
      "interval"
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type in a bar chart , rank total number in descending order please .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC'}",
    "record_name": "2765@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the average tonnage of ships of each type in a bar chart , rank total number in descending order please .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "total",
      "number",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Tonnage",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Compute the total how many minister across minister as a pie chart .",
    "VQL": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister'}",
    "record_name": "2526",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Compute the total how many minister across minister as a pie chart .",
    "question_toks": [
      "Compute",
      "the",
      "total",
      "how",
      "many",
      "minister",
      "across",
      "minister",
      "as",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , list by the x axis from low to high please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\"}",
    "record_name": "2030@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , list by the x axis from low to high please .",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "List",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type in a bar chart , and rank in asc by the total number .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC'}",
    "record_name": "2762@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the number of ships of each type in a bar chart , and rank in asc by the total number .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "in",
      "asc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class , and could you sort total number in ascending order ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC'}",
    "record_name": "2648@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the race class and number of races in each class , and could you sort total number in ascending order ?",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Show the trend about the frequency of the claim dates , and list by the X from low to high .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC'}",
    "record_name": "2021@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the frequency of the claim dates , and list by the X from low to high .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "frequency",
      "of",
      "the",
      "claim",
      "dates",
      ",",
      "and",
      "list",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "ASC"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Bar chart of the number of position from each position , list by the names in desc .",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC'}",
    "record_name": "2585@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the number of position from each position , list by the names in desc .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "position",
      "from",
      "each",
      "position",
      ",",
      "list",
      "by",
      "the",
      "names",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "Position",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the took office into WEEKDAY interval , I want to show by the Y-axis in descending .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) DESC', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY'}",
    "record_name": "2524@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the took office into WEEKDAY interval , I want to show by the Y-axis in descending .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "took",
      "office",
      "into",
      "WEEKDAY",
      "interval",
      ",",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "Y-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "DESC",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Bar chart of the number of course name from each course name , and I want to rank by the X in desc .",
    "VQL": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC'}",
    "record_name": "2880@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the number of course name from each course name , and I want to rank by the X in desc .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "course",
      "name",
      "from",
      "each",
      "course",
      "name",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "X",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name",
      "ORDER",
      "BY",
      "course_name",
      "DESC"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Draw a bar chart of description versus the number of description , rank by the total number from high to low .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC'}",
    "record_name": "34@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of description versus the number of description , rank by the total number from high to low .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "description",
      "versus",
      "the",
      "number",
      "of",
      "description",
      ",",
      "rank",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "What are the names and areas of countries with the top 5 largest area .",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the names and areas of countries with the top 5 largest area .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "."
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show the average age of singers for each country with a bar chart , could you order from high to low by the Y-axis ?",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC'}",
    "record_name": "696@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the average age of singers for each country with a bar chart , could you order from high to low by the Y-axis ?",
    "question_toks": [
      "Show",
      "the",
      "average",
      "age",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Age",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class with a bar chart , and list by the y-axis from high to low .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC'}",
    "record_name": "2648@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the race class and number of races in each class with a bar chart , and list by the y-axis from high to low .",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Bar graph to show the number of last name from different last name , and I want to order in ascending by the bar .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC'}",
    "record_name": "2879@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of last name from different last name , and I want to order in ascending by the bar .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "last",
      "name",
      "from",
      "different",
      "last",
      "name",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY last_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "last_name",
      "ASC"
    ],
    "choose_schema": "Table People, columns = [*,person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]"
  },
  {
    "nl_queries": "What is the total number of each fate ? Give me the result in a bar graph , display x-axis in descending order .",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC'}",
    "record_name": "2763@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of each fate ? Give me the result in a bar graph , display x-axis in descending order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "each",
      "fate",
      "?",
      "Give",
      "me",
      "the",
      "result",
      "in",
      "a",
      "bar",
      "graph",
      ",",
      "display",
      "x-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "Fate",
      "DESC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "Plot how many minister by grouped by minister as a bar graph , and order by the Minister in ascending .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC'}",
    "record_name": "2519@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot how many minister by grouped by minister as a bar graph , and order by the Minister in ascending .",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "minister",
      "by",
      "grouped",
      "by",
      "minister",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "order",
      "by",
      "the",
      "Minister",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "What are the number of the phone numbers for each employee ?",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "db_id": "chinook_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone'}",
    "record_name": "435",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the phone numbers for each employee ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      "?"
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Show me a pie chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality'}",
    "record_name": "2586",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me a pie chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Show me how many in each class of all races using a bar chart , and show by the X-axis in ascending .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC'}",
    "record_name": "2643@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many in each class of all races using a bar chart , and show by the X-axis in ascending .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "in",
      "each",
      "class",
      "of",
      "all",
      "races",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "X-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart , and list total number in descending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart , and list total number in descending order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "total",
      "number",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Give me a histogram to show the date and the amount for all the payments processed with Visa .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\"}",
    "record_name": "2030",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram to show the date and the amount for all the payments processed with Visa .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "to",
      "show",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show me a pie chart showing the total number of each ship type .",
    "VQL": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type'}",
    "record_name": "2757",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me a pie chart showing the total number of each ship type .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "pie",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "."
    ],
    "query": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "A stacked bar chart shows the total number of ships with different nationalities and split by ship type , I want to sort Y-axis in desc order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC'}",
    "record_name": "2755@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A stacked bar chart shows the total number of ships with different nationalities and split by ship type , I want to sort Y-axis in desc order .",
    "question_toks": [
      "A",
      "stacked",
      "bar",
      "chart",
      "shows",
      "the",
      "total",
      "number",
      "of",
      "ships",
      "with",
      "different",
      "nationalities",
      "and",
      "split",
      "by",
      "ship",
      "type",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "Y-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "List the number of games in each season with a line chart .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season",
    "db_id": "game_injury",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season'}",
    "record_name": "1494",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season with a line chart .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Season"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Draw a bar chart of country versus the total number",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "690",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of country versus the total number",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "country",
      "versus",
      "the",
      "total",
      "number"
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Show the trend about the frequency of the claim dates , and I want to order in desc by the X .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC'}",
    "record_name": "2021@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the frequency of the claim dates , and I want to order in desc by the X .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "frequency",
      "of",
      "the",
      "claim",
      "dates",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "DESC"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "What are the different classes of races , and how many races correspond to each Show bar chart , could you rank by the X in desc ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC'}",
    "record_name": "2648@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different classes of races , and how many races correspond to each Show bar chart , could you rank by the X in desc ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "Show",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "X",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank by the x-axis from low to high .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank by the x-axis from low to high .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "What are the number of the descriptions for the aircrafts ? , and could you list in descending by the Description ?",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC'}",
    "record_name": "34@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the descriptions for the aircrafts ? , and could you list in descending by the Description ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      "?",
      ",",
      "and",
      "could",
      "you",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "Description",
      "?"
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "Description",
      "DESC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "What is the total number of each fate ? Give me the result in a bar graph , and display in desc by the the number of fate please .",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC'}",
    "record_name": "2763@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of each fate ? Give me the result in a bar graph , and display in desc by the the number of fate please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "each",
      "fate",
      "?",
      "Give",
      "me",
      "the",
      "result",
      "in",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "display",
      "in",
      "desc",
      "by",
      "the",
      "the",
      "number",
      "of",
      "fate",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Fate",
      ")",
      "DESC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "Return a bar chart showing the total number of each ship type , order Type in asc order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC'}",
    "record_name": "2758@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing the total number of each ship type , order Type in asc order .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      ",",
      "order",
      "Type",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Show how many section description from each section description , and sort from low to high by the x axis .",
    "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC",
    "db_id": "student_transcripts_tracking",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC'}",
    "record_name": "2902@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          26,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show how many section description from each section description , and sort from low to high by the x axis .",
    "question_toks": [
      "Show",
      "how",
      "many",
      "section",
      "description",
      "from",
      "each",
      "section",
      "description",
      ",",
      "and",
      "sort",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "section_description",
      ",",
      "COUNT",
      "(",
      "section_description",
      ")",
      "FROM",
      "Sections",
      "GROUP",
      "BY",
      "section_description",
      "ORDER",
      "BY",
      "section_description",
      "ASC"
    ],
    "choose_schema": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]",
    "choose_schema_rat": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]"
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "List the number of the phone numbers of all employees , list in asc by the names please .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC'}",
    "record_name": "435@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the phone numbers of all employees , list in asc by the names please .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "names",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]@SEP@Table Artist, columns = [ArtistId, Name]@SEP@Table Genre, columns = [GenreId, Name]@SEP@Table MediaType, columns = [MediaTypeId, Name]@SEP@Table Playlist, columns = [PlaylistId, Name]@SEP@Table Track, columns = [TrackId, Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice]"
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and rank in desc by the sum population please .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and rank in desc by the sum population please .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "sum",
      "population",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Return a bar chart showing the total number of ships' nationalities , order Nationality in desc order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2760@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing the total number of ships' nationalities , order Nationality in desc order .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "ships'",
      "nationalities",
      ",",
      "order",
      "Nationality",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Please use a bar chart to show the total amount of payment by each payment method code , rank total number in ascending order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC'}",
    "record_name": "2011@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the total amount of payment by each payment method code , rank total number in ascending order .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "rank",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Bar chart of the number of position from each position , rank by the Y from high to low please .",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC'}",
    "record_name": "2585@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the number of position from each position , rank by the Y from high to low please .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "position",
      "from",
      "each",
      "position",
      ",",
      "rank",
      "by",
      "the",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Position",
      ")",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Show the average of age from each country",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country'}",
    "record_name": "696",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the average of age from each country",
    "question_toks": [
      "Show",
      "the",
      "average",
      "of",
      "age",
      "from",
      "each",
      "country"
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , rank from high to low by the sum population .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , rank from high to low by the sum population .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "sum",
      "population",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Compare the total number of each minister using a bar graph .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "db_id": "party_people",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister'}",
    "record_name": "2527",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of each minister using a bar graph .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "each",
      "minister",
      "using",
      "a",
      "bar",
      "graph",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries . Visualize by a pie chart .",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the names and surface areas of the 5 largest countries . Visualize by a pie chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      ".",
      "Visualize",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Bar graph to show the average of amount payment from different payment method code",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2012",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the average of amount payment from different payment method code",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "different",
      "payment",
      "method",
      "code"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Return a bar chart showing the total number of each ship type , and I want to list total number from high to low order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC'}",
    "record_name": "2758@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing the total number of each ship type , and I want to list total number from high to low order .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "List the description of all aircrafts , and count them by a pie chart",
    "VQL": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "33",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "List the description of all aircrafts , and count them by a pie chart",
    "question_toks": [
      "List",
      "the",
      "description",
      "of",
      "all",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "pie",
      "chart"
    ],
    "query": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Show the average of age from each country , and could you order from high to low by the Y-axis ?",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC'}",
    "record_name": "696@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the average of age from each country , and could you order from high to low by the Y-axis ?",
    "question_toks": [
      "Show",
      "the",
      "average",
      "of",
      "age",
      "from",
      "each",
      "country",
      ",",
      "and",
      "could",
      "you",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Age",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality , and order by the Y-axis in desc .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC'}",
    "record_name": "2756@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality , and order by the Y-axis in desc .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "stacked",
      "bar",
      "chart",
      "for",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "and",
      "categorize",
      "it",
      "by",
      "ship",
      "nationality",
      ",",
      "and",
      "order",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "what is the total number of last names of all candidates ? , and show Y-axis in desc order .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC'}",
    "record_name": "2879@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "what is the total number of last names of all candidates ? , and show Y-axis in desc order .",
    "question_toks": [
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "last",
      "names",
      "of",
      "all",
      "candidates",
      "?",
      ",",
      "and",
      "show",
      "Y-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "last_name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Candidates, columns = [*,candidate_id, candidate_details]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]@SEP@Table Candidates, columns = [candidate_id, candidate_details]@SEP@Table Candidate_Assessments, columns = [candidate_id, qualification, assessment_date, asessment_outcome_code]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country in a bar chart .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "690",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all countries and the number of singers in each country in a bar chart .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Please compare the frequency of the position of the pilots using a bar chart , and could you sort from low to high by the bar please ?",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC'}",
    "record_name": "2585@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please compare the frequency of the position of the pilots using a bar chart , and could you sort from low to high by the bar please ?",
    "question_toks": [
      "Please",
      "compare",
      "the",
      "frequency",
      "of",
      "the",
      "position",
      "of",
      "the",
      "pilots",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "bar",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "Position",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Visualize a pie chart with what are the different classes of races , and how many races correspond to each ?",
    "VQL": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2647",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize a pie chart with what are the different classes of races , and how many races correspond to each ?",
    "question_toks": [
      "Visualize",
      "a",
      "pie",
      "chart",
      "with",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?"
    ],
    "query": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , I want to list bars in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , I want to list bars in ascending order .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "I",
      "want",
      "to",
      "list",
      "bars",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show different types of ships and the number of ships of each type . Show bar chart .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE'}",
    "record_name": "2762",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the number of ships of each type . Show bar chart .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "number",
      "of",
      "ships",
      "of",
      "each",
      "type",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Bin the claim date into the Year interval and count them for visualizing a bar chart , and show in desc by the y-axis .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Year interval and count them for visualizing a bar chart , and show in desc by the y-axis .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches , and sort y-axis in desc order please .",
    "VQL": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) DESC\"}",
    "record_name": "1481@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          "\"Knee problem\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches , and sort y-axis in desc order please .",
    "question_toks": [
      "How",
      "many",
      "injured",
      "players",
      "not",
      "suffering",
      "from",
      "injury",
      "of",
      "'Knee",
      "problem'",
      "in",
      "each",
      "match",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "grouping",
      "by",
      "number",
      "of",
      "matches",
      ",",
      "and",
      "sort",
      "y-axis",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Number_of_matches",
      ",",
      "COUNT",
      "(",
      "Number_of_matches",
      ")",
      "FROM",
      "injury_accident",
      "WHERE",
      "injury",
      "!",
      "=",
      "'Knee",
      "problem'",
      "GROUP",
      "BY",
      "Number_of_matches",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Number_of_matches",
      ")",
      "DESC"
    ],
    "choose_schema": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Show how many section description from each section description",
    "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
    "db_id": "student_transcripts_tracking",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description', 'binning': ''}, 'VQL': 'Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description'}",
    "record_name": "2902",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          26,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show how many section description from each section description",
    "question_toks": [
      "Show",
      "how",
      "many",
      "section",
      "description",
      "from",
      "each",
      "section",
      "description"
    ],
    "query": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "section_description",
      ",",
      "COUNT",
      "(",
      "section_description",
      ")",
      "FROM",
      "Sections",
      "GROUP",
      "BY",
      "section_description"
    ],
    "choose_schema": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]",
    "choose_schema_rat": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]"
  },
  {
    "nl_queries": "Bar chart x axis left office y axis the number of left office , order by the total number in descending .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) DESC', 'binning': 'BIN Left_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY'}",
    "record_name": "2525@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis left office y axis the number of left office , order by the total number in descending .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "left",
      "office",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "left",
      "office",
      ",",
      "order",
      "by",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "DESC",
      "BIN",
      "Left_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show how many section description from each section description , and could you rank bar from high to low order please ?",
    "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC",
    "db_id": "student_transcripts_tracking",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC'}",
    "record_name": "2902@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          26,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show how many section description from each section description , and could you rank bar from high to low order please ?",
    "question_toks": [
      "Show",
      "how",
      "many",
      "section",
      "description",
      "from",
      "each",
      "section",
      "description",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "bar",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "section_description",
      ",",
      "COUNT",
      "(",
      "section_description",
      ")",
      "FROM",
      "Sections",
      "GROUP",
      "BY",
      "section_description",
      "ORDER",
      "BY",
      "section_description",
      "DESC"
    ],
    "choose_schema": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]",
    "choose_schema_rat": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]"
  },
  {
    "nl_queries": "Draw a bar chart showing the total number of every ship type by categorizing by nationality , I want to list by the y-axis in asc .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC'}",
    "record_name": "2756@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart showing the total number of every ship type by categorizing by nationality , I want to list by the y-axis in asc .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "by",
      "categorizing",
      "by",
      "nationality",
      ",",
      "I",
      "want",
      "to",
      "list",
      "by",
      "the",
      "y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the race class and number of races in each class .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2648",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the race class and number of races in each class .",
    "question_toks": [
      "Show",
      "the",
      "race",
      "class",
      "and",
      "number",
      "of",
      "races",
      "in",
      "each",
      "class",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "A stacked bar chart shows the total number of ships with different nationalities and split by ship type , could you show by the names in desc ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC'}",
    "record_name": "2755@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A stacked bar chart shows the total number of ships with different nationalities and split by ship type , could you show by the names in desc ?",
    "question_toks": [
      "A",
      "stacked",
      "bar",
      "chart",
      "shows",
      "the",
      "total",
      "number",
      "of",
      "ships",
      "with",
      "different",
      "nationalities",
      "and",
      "split",
      "by",
      "ship",
      "type",
      ",",
      "could",
      "you",
      "show",
      "by",
      "the",
      "names",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Bar chart x axis away team y axis the number of away team , I want to rank by the y-axis from high to low .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) DESC'}",
    "record_name": "1493@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis away team y axis the number of away team , I want to rank by the y-axis from high to low .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "away",
      "team",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "away",
      "team",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , and could you show from low to high by the total number ?",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC'}",
    "record_name": "3269@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , and could you show from low to high by the total number ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "and",
      "could",
      "you",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show me how many in each class of all races using a bar chart .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class'}",
    "record_name": "2643",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many in each class of all races using a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "in",
      "each",
      "class",
      "of",
      "all",
      "races",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Plot the number of phone by grouped by phone as a bar graph , and order by the Y-axis in ascending .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC'}",
    "record_name": "435@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of phone by grouped by phone as a bar graph , and order by the Y-axis in ascending .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "phone",
      "by",
      "grouped",
      "by",
      "phone",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "order",
      "by",
      "the",
      "Y-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Customer, columns = [*,CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart , rank y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart , rank y-axis in descending order .",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "What is the age and hometown of every teacher Visualize by bar chart , and rank Age in ascending order .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC'}",
    "record_name": "711@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the age and hometown of every teacher Visualize by bar chart , and rank Age in ascending order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "Age",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and I want to order in ascending by the Y .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and I want to order in ascending by the Y .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "List the number of games in each season and group by away team in a group line chart , and sort in descending by the Season .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC'}",
    "record_name": "1484@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season and group by away team in a group line chart , and sort in descending by the Season .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      ",",
      "and",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "Season",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Compare the total number of each minister using a bar graph , display by the total number in descending .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC'}",
    "record_name": "2527@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of each minister using a bar graph , display by the total number in descending .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "each",
      "minister",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "display",
      "by",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "How many singers are from each country .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "690",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many singers are from each country .",
    "question_toks": [
      "How",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Display a pie chart for how many singers are from each country ?",
    "VQL": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country'}",
    "record_name": "689",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Display a pie chart for how many singers are from each country ?",
    "question_toks": [
      "Display",
      "a",
      "pie",
      "chart",
      "for",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "query": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "What are the number of the phone numbers for each employee ? , and sort by the x axis in asc please .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC'}",
    "record_name": "435@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the phone numbers for each employee ? , and sort by the x axis in asc please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      "?",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "asc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Bar chart of the number of position from each position , and list in ascending by the Position .",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC'}",
    "record_name": "2585@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the number of position from each position , and list in ascending by the Position .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "position",
      "from",
      "each",
      "position",
      ",",
      "and",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "Position",
      "."
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "Position",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Which ministers are not a part of the Progress Party , and count them by a bar chart , and I want to order by the x-axis from high to low .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC\"}",
    "record_name": "2517@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which ministers are not a part of the Progress Party , and count them by a bar chart , and I want to order by the x-axis from high to low .",
    "question_toks": [
      "Which",
      "ministers",
      "are",
      "not",
      "a",
      "part",
      "of",
      "the",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each class , and could you sort from high to low by the y-axis please ?",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC'}",
    "record_name": "2648@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each class , and could you sort from high to low by the y-axis please ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "class",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y-axis",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Show the number of games in each season and group by away team in a group line chart The x-axis is season , and could you display by the Season in ascending ?",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1490@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Show the number of games in each season and group by away team in a group line chart The x-axis is season , and could you display by the Season in ascending ?",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      "The",
      "x-axis",
      "is",
      "season",
      ",",
      "and",
      "could",
      "you",
      "display",
      "by",
      "the",
      "Season",
      "in",
      "ascending",
      "?"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "I want to know the proportion of each type .",
    "VQL": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type'}",
    "record_name": "2757",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of each type .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "each",
      "type",
      "."
    ],
    "query": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "What is the age and hometown of every teacher Visualize by bar chart , could you show from low to high by the Hometown ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC'}",
    "record_name": "711@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the age and hometown of every teacher Visualize by bar chart , could you show from low to high by the Hometown ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Hometown",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , order by the bars in ascending .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC'}",
    "record_name": "3269@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , order by the bars in ascending .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "order",
      "by",
      "the",
      "bars",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "What are the different classes of races , and how many races correspond to each Show bar chart , order from low to high by the total number .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC'}",
    "record_name": "2648@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different classes of races , and how many races correspond to each Show bar chart , order from low to high by the total number .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "Show",
      "bar",
      "chart",
      ",",
      "order",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Display a pie chart for what are the different classes of races , and how many races correspond to each ?",
    "VQL": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS'}",
    "record_name": "2647",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Display a pie chart for what are the different classes of races , and how many races correspond to each ?",
    "question_toks": [
      "Display",
      "a",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?"
    ],
    "query": "Visualize PIE SELECT Class , count(*) FROM race GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "List the number of games for each away team and group by home team in a stacked bar chart The x-axis is away team , and sort X-axis in desc order .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team DESC'}",
    "record_name": "1487@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of games for each away team and group by home team in a stacked bar chart The x-axis is away team , and sort X-axis in desc order .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "away",
      "team",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "stacked",
      "bar",
      "chart",
      "The",
      "x-axis",
      "is",
      "away",
      "team",
      ",",
      "and",
      "sort",
      "X-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Away_team",
      "ORDER",
      "BY",
      "Away_team",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and order in desc by the X-axis .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and order in desc by the X-axis .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show how many section description from each section description , I want to display total number from low to high order .",
    "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC",
    "db_id": "student_transcripts_tracking",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC'}",
    "record_name": "2902@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          26,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show how many section description from each section description , I want to display total number from low to high order .",
    "question_toks": [
      "Show",
      "how",
      "many",
      "section",
      "description",
      "from",
      "each",
      "section",
      "description",
      ",",
      "I",
      "want",
      "to",
      "display",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "section_description",
      ",",
      "COUNT",
      "(",
      "section_description",
      ")",
      "FROM",
      "Sections",
      "GROUP",
      "BY",
      "section_description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "section_description",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]",
    "choose_schema_rat": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]"
  },
  {
    "nl_queries": "Draw a bar chart of operating system versus the total number",
    "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system",
    "db_id": "browser_web",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system'}",
    "record_name": "372",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of operating system versus the total number",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "operating",
      "system",
      "versus",
      "the",
      "total",
      "number"
    ],
    "query": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Operating_system",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "web_client_accelerator",
      "GROUP",
      "BY",
      "Operating_system"
    ],
    "choose_schema": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]",
    "choose_schema_rat": "Table Web_client_accelerator, columns = [*,id, name, Operating_system, Client, Connection]"
  },
  {
    "nl_queries": "Give me a bar chart for the number of country of each country , list by the x-axis from low to high please .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "693@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the number of country of each country , list by the x-axis from low to high please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "number",
      "of",
      "country",
      "of",
      "each",
      "country",
      ",",
      "list",
      "by",
      "the",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bar graph to show how many nationality from different nationality , list in desc by the total number .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC'}",
    "record_name": "2760@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show how many nationality from different nationality , list in desc by the total number .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "nationality",
      "from",
      "different",
      "nationality",
      ",",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the Year interval and then shows the average of the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "1997",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the Year interval and then shows the average of the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "average",
      "of",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Draw a bar chart of description versus the number of description",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "db_id": "aircraft",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description'}",
    "record_name": "34",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of description versus the number of description",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "description",
      "versus",
      "the",
      "number",
      "of",
      "description"
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the took office into Weekday interval , and then split by the minister's name , and show y axis from high to low order .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY'}",
    "record_name": "2522@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the took office into Weekday interval , and then split by the minister's name , and show y axis from high to low order .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "took",
      "office",
      "into",
      "Weekday",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      ",",
      "and",
      "show",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "DESC",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the took office into Weekday interval , and then split by the minister's name , list in ascending by the how many took office .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY'}",
    "record_name": "2522@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the took office into Weekday interval , and then split by the minister's name , list in ascending by the how many took office .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "took",
      "office",
      "into",
      "Weekday",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      ",",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "how",
      "many",
      "took",
      "office",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "ASC",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "The trend about the the number of season of different Home_team over the season , display by the X from low to high .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1489@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "The trend about the the number of season of different Home_team over the season , display by the X from low to high .",
    "question_toks": [
      "The",
      "trend",
      "about",
      "the",
      "the",
      "number",
      "of",
      "season",
      "of",
      "different",
      "Home_team",
      "over",
      "the",
      "season",
      ",",
      "display",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Give me a pie to show how many course name from different course name .",
    "VQL": "Visualize PIE SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
    "db_id": "student_assessment",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name', 'binning': ''}, 'VQL': 'Visualize PIE SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name'}",
    "record_name": "2881",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show how many course name from different course name .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "how",
      "many",
      "course",
      "name",
      "from",
      "different",
      "course",
      "name",
      "."
    ],
    "query": "Visualize PIE SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Show all ministers who do not belong to Progress Party , and count them by a bar chart , sort by the x-axis from high to low .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC\"}",
    "record_name": "2517@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all ministers who do not belong to Progress Party , and count them by a bar chart , sort by the x-axis from high to low .",
    "question_toks": [
      "Show",
      "all",
      "ministers",
      "who",
      "do",
      "not",
      "belong",
      "to",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "List the number of games in each season with a line chart , and could you sort in ascending by the x-axis ?",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1495@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "List the number of games in each season with a line chart , and could you sort in ascending by the x-axis ?",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "in",
      "ascending",
      "by",
      "the",
      "x-axis",
      "?"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show me a stacked bar graph , the x-axis is the nationality of ship , and the y-axis is their total number of different nationality and split by ship type , order from low to high by the total number .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC'}",
    "record_name": "2755@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a stacked bar graph , the x-axis is the nationality of ship , and the y-axis is their total number of different nationality and split by ship type , order from low to high by the total number .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "stacked",
      "bar",
      "graph",
      ",",
      "the",
      "x-axis",
      "is",
      "the",
      "nationality",
      "of",
      "ship",
      ",",
      "and",
      "the",
      "y-axis",
      "is",
      "their",
      "total",
      "number",
      "of",
      "different",
      "nationality",
      "and",
      "split",
      "by",
      "ship",
      "type",
      ",",
      "order",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the number of games in each season and group by away team in a group line chart The x-axis is season , and list Season in descending order .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR'}",
    "record_name": "1490@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "Show the number of games in each season and group by away team in a group line chart The x-axis is season , and list Season in descending order .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      "The",
      "x-axis",
      "is",
      "season",
      ",",
      "and",
      "list",
      "Season",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Season",
      "DESC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Show a pie chart to compare the number of each position of the pilot .",
    "VQL": "Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position'}",
    "record_name": "2584",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show a pie chart to compare the number of each position of the pilot .",
    "question_toks": [
      "Show",
      "a",
      "pie",
      "chart",
      "to",
      "compare",
      "the",
      "number",
      "of",
      "each",
      "position",
      "of",
      "the",
      "pilot",
      "."
    ],
    "query": "Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "A stacked bar chart shows the total number of ships with different nationalities and split by ship type .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality'}",
    "record_name": "2755",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A stacked bar chart shows the total number of ships with different nationalities and split by ship type .",
    "question_toks": [
      "A",
      "stacked",
      "bar",
      "chart",
      "shows",
      "the",
      "total",
      "number",
      "of",
      "ships",
      "with",
      "different",
      "nationalities",
      "and",
      "split",
      "by",
      "ship",
      "type",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Return a bar chart showing the total number of ships' nationalities , and list in desc by the total number .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC'}",
    "record_name": "2760@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing the total number of ships' nationalities , and list in desc by the total number .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "ships'",
      "nationalities",
      ",",
      "and",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "List the number of games for each away team and group by home team in a stacked bar chart The x-axis is away team , and I want to order by the X in ascending please .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team ASC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team ASC'}",
    "record_name": "1487@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of games for each away team and group by home team in a stacked bar chart The x-axis is away team , and I want to order by the X in ascending please .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "away",
      "team",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "stacked",
      "bar",
      "chart",
      "The",
      "x-axis",
      "is",
      "away",
      "team",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "X",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Home_team ,  Away_team ORDER BY Away_team ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Away_team",
      "ORDER",
      "BY",
      "Away_team",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Create a pie chart showing how many class across class .",
    "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM race GROUP BY Class",
    "db_id": "race_track",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , COUNT(Class) FROM race GROUP BY Class'}",
    "record_name": "2642",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing how many class across class .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "how",
      "many",
      "class",
      "across",
      "class",
      "."
    ],
    "query": "Visualize PIE SELECT Class , COUNT(Class) FROM race GROUP BY Class",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "What are the phone numbers for each employee , and count them by a bar chart , and sort in descending by the names .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC'}",
    "record_name": "435@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the phone numbers for each employee , and count them by a bar chart , and sort in descending by the names .",
    "question_toks": [
      "What",
      "are",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]@SEP@Table Artist, columns = [ArtistId, Name]@SEP@Table Genre, columns = [GenreId, Name]@SEP@Table MediaType, columns = [MediaTypeId, Name]@SEP@Table Playlist, columns = [PlaylistId, Name]@SEP@Table Track, columns = [TrackId, Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice]"
  },
  {
    "nl_queries": "Stack bar chart of the number of type vs Nationality based on type",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type'}",
    "record_name": "2756",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stack bar chart of the number of type vs Nationality based on type",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "type",
      "vs",
      "Nationality",
      "based",
      "on",
      "type"
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Return a bar chart showing the total number of each ship type .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type'}",
    "record_name": "2758",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing the total number of each ship type .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the number of games for each home team in a bar chart , and could you show X in desc order ?",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC'}",
    "record_name": "1491@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of games for each home team in a bar chart , and could you show X in desc order ?",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "home",
      "team",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "show",
      "X",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Home_team",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart , rank by the Y-axis in asc .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart , rank by the Y-axis in asc .",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "of",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "Y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "For each type , how many ships are there . Show the proportion .",
    "VQL": "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE'}",
    "record_name": "2761",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "For each type , how many ships are there . Show the proportion .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "how",
      "many",
      "ships",
      "are",
      "there",
      ".",
      "Show",
      "the",
      "proportion",
      "."
    ],
    "query": "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "List the number of games in each season with a line chart , sort from high to low by the X .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC'}",
    "record_name": "1494@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season with a line chart , sort from high to low by the X .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Season",
      "ORDER",
      "BY",
      "Season",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "What are the number of the phone numbers for each employee ? , and I want to show in asc by the y axis .",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC'}",
    "record_name": "435@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the phone numbers for each employee ? , and I want to show in asc by the y axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Phone",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Show the number of fate from each fate , and rank by the y axis in desc please .",
    "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC'}",
    "record_name": "2763@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of fate from each fate , and rank by the y axis in desc please .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "fate",
      "from",
      "each",
      "fate",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Fate",
      ",",
      "COUNT",
      "(",
      "Fate",
      ")",
      "FROM",
      "mission",
      "GROUP",
      "BY",
      "Fate",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Fate",
      ")",
      "DESC"
    ],
    "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis , sort y axis from high to low order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis , sort y axis from high to low order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "sort",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , display in desc by the Y .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , display in desc by the Y .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "display",
      "in",
      "desc",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Return a histogram on what are the age and hometown of teachers ? , could you show from low to high by the Hometown ?",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC'}",
    "record_name": "711@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on what are the age and hometown of teachers ? , could you show from low to high by the Hometown ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "what",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?",
      ",",
      "could",
      "you",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Hometown",
      "?"
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches .",
    "VQL": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches\"}",
    "record_name": "1481",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          "\"Knee problem\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches .",
    "question_toks": [
      "How",
      "many",
      "injured",
      "players",
      "not",
      "suffering",
      "from",
      "injury",
      "of",
      "'Knee",
      "problem'",
      "in",
      "each",
      "match",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "grouping",
      "by",
      "number",
      "of",
      "matches",
      "."
    ],
    "query": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Number_of_matches",
      ",",
      "COUNT",
      "(",
      "Number_of_matches",
      ")",
      "FROM",
      "injury_accident",
      "WHERE",
      "injury",
      "!",
      "=",
      "'Knee",
      "problem'",
      "GROUP",
      "BY",
      "Number_of_matches"
    ],
    "choose_schema": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team , and I want to list x-axis in descending order .",
    "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC'}",
    "record_name": "1488@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team , and I want to list x-axis in descending order .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "for",
      "each",
      "home",
      "team",
      "and",
      "group",
      "by",
      "away",
      "team",
      "in",
      "a",
      "stacked",
      "bar",
      "chart",
      "The",
      "x-axis",
      "is",
      "home",
      "team",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "x-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Home_team",
      ",",
      "COUNT",
      "(",
      "Home_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      ",",
      "Home_team",
      "ORDER",
      "BY",
      "Home_team",
      "DESC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , and rank in descending by the x-axis .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC'}",
    "record_name": "3269@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , and rank in descending by the x-axis .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "and",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Please compare the frequency of the position of the pilots using a bar chart , and order Y in ascending order .",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC'}",
    "record_name": "2585@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please compare the frequency of the position of the pilots using a bar chart , and order Y in ascending order .",
    "question_toks": [
      "Please",
      "compare",
      "the",
      "frequency",
      "of",
      "the",
      "position",
      "of",
      "the",
      "pilots",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "Y",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Position",
      ")",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]@SEP@Table aircraft, columns = [*,Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion]"
  },
  {
    "nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code , and could you show total number in descending order ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC'}",
    "record_name": "2012@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the average amount of payment by each payment method code , and could you show total number in descending order ?",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "could",
      "you",
      "show",
      "total",
      "number",
      "in",
      "descending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Compare the frequency of each payment method code using a bar chart , rank by the how many payment method code from high to low .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC'}",
    "record_name": "2010@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the frequency of each payment method code using a bar chart , rank by the how many payment method code from high to low .",
    "question_toks": [
      "Compare",
      "the",
      "frequency",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "how",
      "many",
      "payment",
      "method",
      "code",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Give me a bar chart for mean tonnage of each type , display from high to low by the y-axis .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC'}",
    "record_name": "2765@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for mean tonnage of each type , display from high to low by the y-axis .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "mean",
      "tonnage",
      "of",
      "each",
      "type",
      ",",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Tonnage",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show all ministers who do not belong to Progress Party , and count them by a bar chart , rank in asc by the bars .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC\"}",
    "record_name": "2517@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all ministers who do not belong to Progress Party , and count them by a bar chart , rank in asc by the bars .",
    "question_toks": [
      "Show",
      "all",
      "ministers",
      "who",
      "do",
      "not",
      "belong",
      "to",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "in",
      "asc",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "Minister",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "What is the average age of singers for each country ? Visualize with a bar chart .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country",
    "db_id": "concert_singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country'}",
    "record_name": "696",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average age of singers for each country ? Visualize with a bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "?",
      "Visualize",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different classes of races , and how many races correspond to each ? , and show in asc by the total number .",
    "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC'}",
    "record_name": "2648@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different classes of races , and how many races correspond to each ? , and show in asc by the total number .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "classes",
      "of",
      "races",
      ",",
      "and",
      "how",
      "many",
      "races",
      "correspond",
      "to",
      "each",
      "?",
      ",",
      "and",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made , rank from high to low by the y-axis .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made , rank from high to low by the y-axis .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made",
      ",",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "For each type , how many ships are there Plot them as bar chart , and show names from high to low order please .",
    "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC'}",
    "record_name": "2762@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each type , how many ships are there Plot them as bar chart , and show names from high to low order please .",
    "question_toks": [
      "For",
      "each",
      "type",
      ",",
      "how",
      "many",
      "ships",
      "are",
      "there",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "names",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country in a bar chart , and I want to order by the bars from high to low .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC'}",
    "record_name": "690@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all countries and the number of singers in each country in a bar chart , and I want to order by the bars from high to low .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "bars",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "What is the total number of each ship type ? Give me a bar chart .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "db_id": "ship_mission",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type'}",
    "record_name": "2758",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of each ship type ? Give me a bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "each",
      "ship",
      "type",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the took office into Year interval , and then split by the minister's name .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister', 'binning': 'BIN Took_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY YEAR'}",
    "record_name": "2520",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the took office into Year interval , and then split by the minister's name .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "took",
      "office",
      "into",
      "Year",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "BIN",
      "Took_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show how many section description from each section description , and show in descending by the y axis .",
    "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) DESC",
    "db_id": "student_transcripts_tracking",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) DESC'}",
    "record_name": "2902@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          26,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show how many section description from each section description , and show in descending by the y axis .",
    "question_toks": [
      "Show",
      "how",
      "many",
      "section",
      "description",
      "from",
      "each",
      "section",
      "description",
      ",",
      "and",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "section_description",
      ",",
      "COUNT",
      "(",
      "section_description",
      ")",
      "FROM",
      "Sections",
      "GROUP",
      "BY",
      "section_description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "section_description",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]",
    "choose_schema_rat": "Table Sections, columns = [*,section_id, course_id, section_name, section_description, other_details]"
  },
  {
    "nl_queries": "What is the total number of every ship type by categorizing by nationality ? , list from high to low by the x axis .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC'}",
    "record_name": "2756@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of every ship type by categorizing by nationality ? , list from high to low by the x axis .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "by",
      "categorizing",
      "by",
      "nationality",
      "?",
      ",",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "I want to see trend the number of season over season by Away_team , and could you order X in asc order ?",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1490@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend the number of season over season by Away_team , and could you order X in asc order ?",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "number",
      "of",
      "season",
      "over",
      "season",
      "by",
      "Away_team",
      ",",
      "and",
      "could",
      "you",
      "order",
      "X",
      "in",
      "asc",
      "order",
      "?"
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "For all course_name from courses table , group by the course name and count them with a bar chart , and display Y-axis from high to low order .",
    "VQL": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) DESC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) DESC'}",
    "record_name": "2880@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For all course_name from courses table , group by the course name and count them with a bar chart , and display Y-axis from high to low order .",
    "question_toks": [
      "For",
      "all",
      "course_name",
      "from",
      "courses",
      "table",
      ",",
      "group",
      "by",
      "the",
      "course",
      "name",
      "and",
      "count",
      "them",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "course_name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Stacked bar chart of the number of left office for with each Minister in each left office , could you display in asc by the y-axis ?",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC', 'binning': 'BIN Left_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY YEAR'}",
    "record_name": "2521@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Stacked bar chart of the number of left office for with each Minister in each left office , could you display in asc by the y-axis ?",
    "question_toks": [
      "Stacked",
      "bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "left",
      "office",
      "for",
      "with",
      "each",
      "Minister",
      "in",
      "each",
      "left",
      "office",
      ",",
      "could",
      "you",
      "display",
      "in",
      "asc",
      "by",
      "the",
      "y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) ASC BIN Left_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "ASC",
      "BIN",
      "Left_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Draw a bar chart showing the total number of every ship type by categorizing by nationality , and I want to rank by the Y-axis in desc .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC'}",
    "record_name": "2756@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart showing the total number of every ship type by categorizing by nationality , and I want to rank by the Y-axis in desc .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "by",
      "categorizing",
      "by",
      "nationality",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Type",
      ")",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Return a bar chart on what are the names and seatings for all tracks opened after 2000 , ordered by seating ?",
    "VQL": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating'}",
    "record_name": "2646",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on what are the names and seatings for all tracks opened after 2000 , ordered by seating ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "what",
      "are",
      "the",
      "names",
      "and",
      "seatings",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      ",",
      "ordered",
      "by",
      "seating",
      "?"
    ],
    "query": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000",
      "ORDER",
      "BY",
      "seating"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]"
  },
  {
    "nl_queries": "what is the total number of last names of all candidates ?",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name",
    "db_id": "student_assessment",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name'}",
    "record_name": "2879",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "what is the total number of last names of all candidates ?",
    "question_toks": [
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "last",
      "names",
      "of",
      "all",
      "candidates",
      "?"
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "last_name"
    ],
    "choose_schema": "Table Candidates, columns = [*,candidate_id, candidate_details]",
    "choose_schema_rat": "Table People, columns = [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]@SEP@Table Candidates, columns = [candidate_id, candidate_details]@SEP@Table Candidate_Assessments, columns = [candidate_id, qualification, assessment_date, asessment_outcome_code]"
  },
  {
    "nl_queries": "Bar graph to show the number of took office from different took office , and show by the Y in ascending .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) ASC', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY'}",
    "record_name": "2524@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar graph to show the number of took office from different took office , and show by the Y in ascending .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "took",
      "office",
      "from",
      "different",
      "took",
      "office",
      ",",
      "and",
      "show",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) ASC BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "ASC",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type Show bar chart , and could you show x axis from high to low order please ?",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC'}",
    "record_name": "2765@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the average tonnage of ships of each type Show bar chart , and could you show x axis from high to low order please ?",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "show",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show the trend about the frequency of the claim dates .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled'}",
    "record_name": "2021",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the frequency of the claim dates .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "frequency",
      "of",
      "the",
      "claim",
      "dates",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality , display by the total number in desc .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2587@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality , display by the total number in desc .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      ",",
      "display",
      "by",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Show the average age of singers for each country with a bar chart , and I want to show by the Y-axis in asc .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC'}",
    "record_name": "696@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the average age of singers for each country with a bar chart , and I want to show by the Y-axis in asc .",
    "question_toks": [
      "Show",
      "the",
      "average",
      "age",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "Y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Age",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the took office into Weekday interval , and then split by the minister's name .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY WEEKDAY",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister', 'binning': 'BIN Took_office BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY WEEKDAY'}",
    "record_name": "2522",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the took office into Weekday interval , and then split by the minister's name .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "took",
      "office",
      "into",
      "Weekday",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister BIN Took_office BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "BIN",
      "Took_office",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , display in descending by the Date_Payment_Made please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\"}",
    "record_name": "2030@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , display in descending by the Date_Payment_Made please .",
    "question_toks": [
      "Show",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "distributing",
      "the",
      "payment",
      "date",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "Date_Payment_Made",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "List the number of games in each season and group by home team in a group line chart .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season",
    "db_id": "game_injury",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season'}",
    "record_name": "1482",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "List the number of games in each season and group by home team in a group line chart .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "games",
      "in",
      "each",
      "season",
      "and",
      "group",
      "by",
      "home",
      "team",
      "in",
      "a",
      "group",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      ",",
      "Season"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , and display in descending by the X-axis .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC'}",
    "record_name": "3269@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , and display in descending by the X-axis .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "and",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each year using a bar chart , show in descending by the how many date payment made please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each year using a bar chart , show in descending by the how many date payment made please .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "how",
      "many",
      "date",
      "payment",
      "made",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Give me a histogram for how many singers are from each country ? , and sort in descending by the names .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC'}",
    "record_name": "690@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for how many singers are from each country ? , and sort in descending by the names .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "and",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]@SEP@Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]"
  },
  {
    "nl_queries": "Draw a bar chart showing the total number of every ship type by categorizing by nationality , could you sort bars in asc order ?",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC'}",
    "record_name": "2756@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart showing the total number of every ship type by categorizing by nationality , could you sort bars in asc order ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "of",
      "every",
      "ship",
      "type",
      "by",
      "categorizing",
      "by",
      "nationality",
      ",",
      "could",
      "you",
      "sort",
      "bars",
      "in",
      "asc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show all countries and the number of singers in each country in a bar chart , and I want to sort by the X in asc .",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC'}",
    "record_name": "690@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all countries and the number of singers in each country in a bar chart , and I want to sort by the X in asc .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "X",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled , and order the number of date claim settled in descending order .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled , and order the number of date claim settled in descending order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      ",",
      "and",
      "order",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show me how many in each class of all races using a bar chart , show in descending by the Y-axis .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC",
    "db_id": "race_track",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC'}",
    "record_name": "2643@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me how many in each class of all races using a bar chart , show in descending by the Y-axis .",
    "question_toks": [
      "Show",
      "me",
      "how",
      "many",
      "in",
      "each",
      "class",
      "of",
      "all",
      "races",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "race",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "DESC"
    ],
    "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
    "choose_schema_rat": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]"
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa by each year using a bar chart , and rank by the y-axis in asc .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa by each year using a bar chart , and rank by the y-axis in asc .",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Visualize a bar chart for what is the age and hometown of every teacher ? , I want to order in descending by the Hometown .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC'}",
    "record_name": "711@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what is the age and hometown of every teacher ? , I want to order in descending by the Hometown .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?",
      ",",
      "I",
      "want",
      "to",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "Hometown",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "What is the total number of ships with different nationalities and ship types ? , list by the Y from low to high .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC'}",
    "record_name": "2755@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ],
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of ships with different nationalities and ship types ? , list by the Y from low to high .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "ships",
      "with",
      "different",
      "nationalities",
      "and",
      "ship",
      "types",
      "?",
      ",",
      "list",
      "by",
      "the",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Type",
      ",",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Nationality",
      ")",
      "ASC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "Show different types of ships and the average tonnage of ships of each type in a bar chart , and rank Type in descending order .",
    "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC'}",
    "record_name": "2765@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different types of ships and the average tonnage of ships of each type in a bar chart , and rank Type in descending order .",
    "question_toks": [
      "Show",
      "different",
      "types",
      "of",
      "ships",
      "and",
      "the",
      "average",
      "tonnage",
      "of",
      "ships",
      "of",
      "each",
      "type",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "Type",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "avg",
      "(",
      "Tonnage",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "TYPE",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "The trend about the the number of season of different Home_team over the season , and I want to show in ascending by the x-axis .",
    "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR",
    "db_id": "game_injury",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR'}",
    "record_name": "1489@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 2
    },
    "question": "The trend about the the number of season of different Home_team over the season , and I want to show in ascending by the x-axis .",
    "question_toks": [
      "The",
      "trend",
      "about",
      "the",
      "the",
      "number",
      "of",
      "season",
      "of",
      "different",
      "Home_team",
      "over",
      "the",
      "season",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Season",
      ",",
      "COUNT",
      "(",
      "Season",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Home_team",
      "ORDER",
      "BY",
      "Season",
      "ASC",
      "BIN",
      "Season",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]@SEP@Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "db_id": "pilot_record",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality'}",
    "record_name": "2587",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different nationalities of pilots ? Show each nationality and the number of pilots of each nationality .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "nationalities",
      "of",
      "pilots",
      "?",
      "Show",
      "each",
      "nationality",
      "and",
      "the",
      "number",
      "of",
      "pilots",
      "of",
      "each",
      "nationality",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]"
  },
  {
    "nl_queries": "Can you draw a bar chart to show the number of positions of the pilots ? , and I want to order bar in ascending order .",
    "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC",
    "db_id": "pilot_record",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC'}",
    "record_name": "2585@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you draw a bar chart to show the number of positions of the pilots ? , and I want to order bar in ascending order .",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "number",
      "of",
      "positions",
      "of",
      "the",
      "pilots",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "bar",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Position",
      ",",
      "COUNT",
      "(",
      "Position",
      ")",
      "FROM",
      "pilot",
      "GROUP",
      "BY",
      "Position",
      "ORDER",
      "BY",
      "Position",
      "ASC"
    ],
    "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
    "choose_schema_rat": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]@SEP@Table pilot_record, columns = [*,Record_ID, Pilot_ID, Aircraft_ID, Date]@SEP@Table aircraft, columns = [*,Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion]"
  },
  {
    "nl_queries": "Bar chart of the number of course name from each course name , and I want to order by the Y-axis in desc .",
    "VQL": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) DESC",
    "db_id": "student_assessment",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) DESC'}",
    "record_name": "2880@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the number of course name from each course name , and I want to order by the Y-axis in desc .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "course",
      "name",
      "from",
      "each",
      "course",
      "name",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "course_name",
      ",",
      "COUNT",
      "(",
      "course_name",
      ")",
      "FROM",
      "courses",
      "GROUP",
      "BY",
      "course_name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "course_name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Courses, columns = [*,course_id, course_name, course_description, other_details]",
    "choose_schema_rat": "Table Courses, columns = [course_id, course_name, course_description, other_details]@SEP@Table Student_Course_Registrations, columns = [student_id, course_id, registration_date]@SEP@Table Student_Course_Attendance, columns = [student_id, course_id, date_of_attendance]"
  },
  {
    "nl_queries": "Bar graph to show the average of amount payment from different payment method code , display from high to low by the X .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2012@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the average of amount payment from different payment method code , display from high to low by the X .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "different",
      "payment",
      "method",
      "code",
      ",",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]@SEP@Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]"
  },
  {
    "nl_queries": "Give me a bar chart for the number of country of each country , and could you rank total number from low to high order ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC'}",
    "record_name": "693@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the number of country of each country , and could you rank total number from low to high order ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "number",
      "of",
      "country",
      "of",
      "each",
      "country",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Stack bar chart of the number of type vs Nationality based on type , and list x-axis in descending order .",
    "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC",
    "db_id": "ship_mission",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC'}",
    "record_name": "2756@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ],
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stack bar chart of the number of type vs Nationality based on type , and list x-axis in descending order .",
    "question_toks": [
      "Stack",
      "bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "type",
      "vs",
      "Nationality",
      "based",
      "on",
      "type",
      ",",
      "and",
      "list",
      "x-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Type",
      ",",
      "COUNT",
      "(",
      "Type",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "Nationality",
      ",",
      "Type",
      "ORDER",
      "BY",
      "Type",
      "DESC"
    ],
    "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
    "choose_schema_rat": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]@SEP@Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the phone numbers for each employee ?",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "db_id": "chinook_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone'}",
    "record_name": "435",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the phone numbers for each employee ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      "?"
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "How many singers are from each country , and could you rank by the x-axis in descending ?",
    "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC'}",
    "record_name": "690@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many singers are from each country , and could you rank by the x-axis in descending ?",
    "question_toks": [
      "How",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "x-axis",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "What are the descriptions for the aircrafts , and count them by a bar chart , and I want to rank by the how many description in ascending .",
    "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "db_id": "aircraft",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC'}",
    "record_name": "34@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the descriptions for the aircrafts , and count them by a bar chart , and I want to rank by the how many description in ascending .",
    "question_toks": [
      "What",
      "are",
      "the",
      "descriptions",
      "for",
      "the",
      "aircrafts",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "how",
      "many",
      "description",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Description",
      ",",
      "COUNT",
      "(",
      "Description",
      ")",
      "FROM",
      "aircraft",
      "GROUP",
      "BY",
      "Description",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Description",
      ")",
      "ASC"
    ],
    "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
    "choose_schema_rat": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]@SEP@Table match, columns = [*,Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]@SEP@Table airport, columns = [*,Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]@SEP@Table airport_aircraft, columns = [*,ID, Airport_ID, Aircraft_ID]"
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3269",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Bar chart x axis away team y axis the number of away team , sort by the bars in asc .",
    "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team ASC",
    "db_id": "game_injury",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team ASC'}",
    "record_name": "1493@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis away team y axis the number of away team , sort by the bars in asc .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "away",
      "team",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "away",
      "team",
      ",",
      "sort",
      "by",
      "the",
      "bars",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY Away_team ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Away_team",
      ",",
      "COUNT",
      "(",
      "Away_team",
      ")",
      "FROM",
      "game",
      "GROUP",
      "BY",
      "Away_team",
      "ORDER",
      "BY",
      "Away_team",
      "ASC"
    ],
    "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
    "choose_schema_rat": "Table stadium, columns = [*,id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]@SEP@Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]@SEP@Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]"
  },
  {
    "nl_queries": "How many parties of the time they left office , binning the left office time into Year interval , and then split by the minister's name , sort in desc by the y-axis .",
    "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC', 'binning': 'BIN Left_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY YEAR'}",
    "record_name": "2521@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they left office , binning the left office time into Year interval , and then split by the minister's name , sort in desc by the y-axis .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "left",
      "office",
      ",",
      "binning",
      "the",
      "left",
      "office",
      "time",
      "into",
      "Year",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      ",",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Left_office",
      ",",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Left_office",
      ")",
      "DESC",
      "BIN",
      "Left_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "List the phone numbers of all employees , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "db_id": "chinook_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone'}",
    "record_name": "435",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the phone numbers of all employees , and count them by a bar chart",
    "question_toks": [
      "List",
      "the",
      "phone",
      "numbers",
      "of",
      "all",
      "employees",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Which ministers are not a part of the Progress Party , and count them by a bar chart , I want to show Y-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "db_id": "party_people",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC\"}",
    "record_name": "2517@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"Progress Party\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which ministers are not a part of the Progress Party , and count them by a bar chart , I want to show Y-axis from high to low order .",
    "question_toks": [
      "Which",
      "ministers",
      "are",
      "not",
      "a",
      "part",
      "of",
      "the",
      "Progress",
      "Party",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "show",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Minister",
      ",",
      "COUNT",
      "(",
      "Minister",
      ")",
      "FROM",
      "party",
      "WHERE",
      "party_name",
      "!",
      "=",
      "'Progress",
      "Party'",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Minister",
      ")",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "What is the average age of singers for each country ? Visualize with a bar chart , I want to show by the Y-axis in asc .",
    "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC",
    "db_id": "concert_singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC'}",
    "record_name": "696@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average age of singers for each country ? Visualize with a bar chart , I want to show by the Y-axis in asc .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "singers",
      "for",
      "each",
      "country",
      "?",
      "Visualize",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "Y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "AVG",
      "(",
      "Age",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Age",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
    "choose_schema_rat": "Table stadium, columns = [*,Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]@SEP@Table concert, columns = [*,concert_ID, concert_Name, Theme, Stadium_ID, Year]@SEP@Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]@SEP@Table singer_in_concert, columns = [*,concert_ID, Singer_ID]"
  },
  {
    "nl_queries": "Bin the claim date into the Year interval and count them for visualizing a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Year interval and count them for visualizing a bar chart .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the phone numbers for each employee ? , and could you show in descending by the Phone please ?",
    "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "db_id": "chinook_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC'}",
    "record_name": "435@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                31,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          31,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              31,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the phone numbers for each employee ? , and could you show in descending by the Phone please ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "phone",
      "numbers",
      "for",
      "each",
      "employee",
      "?",
      ",",
      "and",
      "could",
      "you",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "Phone",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Phone",
      ",",
      "COUNT",
      "(",
      "Phone",
      ")",
      "FROM",
      "EMPLOYEE",
      "GROUP",
      "BY",
      "Phone",
      "ORDER",
      "BY",
      "Phone",
      "DESC"
    ],
    "choose_schema": "Table Employee, columns = [*,EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]",
    "choose_schema_rat": "Table Customer, columns = [CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId]@SEP@Table Employee, columns = [EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email]"
  },
  {
    "nl_queries": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , I want to order in ascending by the Amount_Payment please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\"}",
    "record_name": "2030@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , I want to order in ascending by the Amount_Payment please .",
    "question_toks": [
      "Show",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "distributing",
      "the",
      "payment",
      "date",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "Amount_Payment",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "ASC"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Claims, columns = [*,Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]@SEP@Table Settlements, columns = [*,Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]@SEP@Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "Show me the proportion of each payment method code using a pie chart .",
    "VQL": "Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2009",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me the proportion of each payment method code using a pie chart .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "proportion",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ],
    "choose_schema": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
    "choose_schema_rat": "Table Payments, columns = [*,Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]"
  },
  {
    "nl_queries": "What is the age and hometown of every teacher Visualize by bar chart , and show y-axis in desc order .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC'}",
    "record_name": "711@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the age and hometown of every teacher Visualize by bar chart , and show y-axis in desc order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "y-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "How many parties of the time they took office , binning the took office into Year interval , and then split by the minister's name , rank by the the number of took office from low to high .",
    "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY YEAR",
    "db_id": "party_people",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC', 'binning': 'BIN Took_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY YEAR'}",
    "record_name": "2520@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        9,
        "year"
      ],
      "vis": 0
    },
    "question": "How many parties of the time they took office , binning the took office into Year interval , and then split by the minister's name , rank by the the number of took office from low to high .",
    "question_toks": [
      "How",
      "many",
      "parties",
      "of",
      "the",
      "time",
      "they",
      "took",
      "office",
      ",",
      "binning",
      "the",
      "took",
      "office",
      "into",
      "Year",
      "interval",
      ",",
      "and",
      "then",
      "split",
      "by",
      "the",
      "minister's",
      "name",
      ",",
      "rank",
      "by",
      "the",
      "the",
      "number",
      "of",
      "took",
      "office",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) ASC BIN Took_office BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Took_office",
      ",",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Minister",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Took_office",
      ")",
      "ASC",
      "BIN",
      "Took_office",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]@SEP@Table member, columns = [*,Member_ID, Member_Name, Party_ID, In_office]@SEP@Table party_events, columns = [*,Event_ID, Event_Name, Party_ID, Member_in_charge_ID]"
  },
  {
    "nl_queries": "A bar chart about what is the age and hometown of every teacher ? , and list Hometown in ascending order .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC'}",
    "record_name": "711@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what is the age and hometown of every teacher ? , and list Hometown in ascending order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?",
      ",",
      "and",
      "list",
      "Hometown",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "ASC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  },
  {
    "nl_queries": "Display a bar chart for what are the age and hometown of teachers ? , and list from high to low by the bars .",
    "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "db_id": "course_teach",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC'}",
    "record_name": "711@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the age and hometown of teachers ? , and list from high to low by the bars .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?",
      ",",
      "and",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Hometown DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Hometown",
      ",",
      "Age",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Hometown",
      "DESC"
    ],
    "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
    "choose_schema_rat": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]@SEP@Table course_arrange, columns = [*,Course_ID, Teacher_ID, Grade]"
  }
]