[
  {
    "nl_queries": "Draw a bar chart of investor versus the total number , I want to display by the bar in asc .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC'}",
    "record_name": "1371@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of investor versus the total number , I want to display by the bar in asc .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "investor",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "I",
      "want",
      "to",
      "display",
      "by",
      "the",
      "bar",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Please give me a bar chart to show the distribution of results of all music festival , I want to rank from high to low by the X .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC'}",
    "record_name": "2441@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please give me a bar chart to show the distribution of results of all music festival , I want to rank from high to low by the X .",
    "question_toks": [
      "Please",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "distribution",
      "of",
      "results",
      "of",
      "all",
      "music",
      "festival",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "What are the top 5 countries by number of invoices and how many do they have .",
    "VQL": "Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5'}",
    "record_name": "2849",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          44,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the top 5 countries by number of invoices and how many do they have .",
    "question_toks": [
      "What",
      "are",
      "the",
      "top",
      "5",
      "countries",
      "by",
      "number",
      "of",
      "invoices",
      "and",
      "how",
      "many",
      "do",
      "they",
      "have",
      "."
    ],
    "query": "Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "billing_country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "GROUP",
      "BY",
      "billing_country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]@SEP@Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]"
  },
  {
    "nl_queries": "Show me the total number by citizenship in a histogram",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship'}",
    "record_name": "2774",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the total number by citizenship in a histogram",
    "question_toks": [
      "Show",
      "me",
      "the",
      "total",
      "number",
      "by",
      "citizenship",
      "in",
      "a",
      "histogram"
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Return a histogram on what are the top 5 countries by number of invoices and how many do they have ?",
    "VQL": "Visualize BAR SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5'}",
    "record_name": "2850",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          44,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on what are the top 5 countries by number of invoices and how many do they have ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "what",
      "are",
      "the",
      "top",
      "5",
      "countries",
      "by",
      "number",
      "of",
      "invoices",
      "and",
      "how",
      "many",
      "do",
      "they",
      "have",
      "?"
    ],
    "query": "Visualize BAR SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "GROUP",
      "BY",
      "billing_country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]@SEP@Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]"
  },
  {
    "nl_queries": "What are the names of all the playlists , and count them by a bar chart , and could you show by the bar in descending please ?",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC'}",
    "record_name": "2855@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names of all the playlists , and count them by a bar chart , and could you show by the bar in descending please ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "show",
      "by",
      "the",
      "bar",
      "in",
      "descending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Show the total number from each rank , and I want to list in ascending by the Y-axis .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC'}",
    "record_name": "2747@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number from each rank , and I want to list in ascending by the Y-axis .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "from",
      "each",
      "rank",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Return the number of the countries of the mountains that have a height larger than 5000 .",
    "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "489",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the number of the countries of the mountains that have a height larger than 5000 .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      "."
    ],
    "query": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Compare the total number of different ranks using a bar graph .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank'}",
    "record_name": "2751",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of different ranks using a bar graph .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "different",
      "ranks",
      "using",
      "a",
      "bar",
      "graph",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Show me a bar chart comparing the total number of captains in each rank , and rank total number in descending order please .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC'}",
    "record_name": "2751@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart comparing the total number of captains in each rank , and rank total number in descending order please .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      ",",
      "and",
      "rank",
      "total",
      "number",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Rank",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "For each citizenship , what is the maximum net worth . Show a pie chart .",
    "VQL": "Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship'}",
    "record_name": "2775",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "For each citizenship , what is the maximum net worth . Show a pie chart .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "what",
      "is",
      "the",
      "maximum",
      "net",
      "worth",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Visualize a pie chart with what are the top 5 countries by number of invoices and how many do they have ?",
    "VQL": "Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5'}",
    "record_name": "2849",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          44,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize a pie chart with what are the top 5 countries by number of invoices and how many do they have ?",
    "question_toks": [
      "Visualize",
      "a",
      "pie",
      "chart",
      "with",
      "what",
      "are",
      "the",
      "top",
      "5",
      "countries",
      "by",
      "number",
      "of",
      "invoices",
      "and",
      "how",
      "many",
      "do",
      "they",
      "have",
      "?"
    ],
    "query": "Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "billing_country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "GROUP",
      "BY",
      "billing_country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]@SEP@Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]"
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart , could you list by the Y in asc ?",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC'}",
    "record_name": "2497@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart , could you list by the Y in asc ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Count",
      "the",
      "last",
      "year",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "by",
      "the",
      "Y",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "A bar chart about what are the main indstries and total market value for each industry ? , and could you rank X-axis from high to low order ?",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC'}",
    "record_name": "1508@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the main indstries and total market value for each industry ? , and could you rank X-axis from high to low order ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "?",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show me maximal net worth millions by citizenship in a histogram , order by the x axis in descending please .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC'}",
    "record_name": "2776@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me maximal net worth millions by citizenship in a histogram , order by the x axis in descending please .",
    "question_toks": [
      "Show",
      "me",
      "maximal",
      "net",
      "worth",
      "millions",
      "by",
      "citizenship",
      "in",
      "a",
      "histogram",
      ",",
      "order",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , sort names in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , sort names in ascending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "sort",
      "names",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter . Show a pie chart .",
    "VQL": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters'}",
    "record_name": "1497",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "List all headquarters and the number of companies in each headquarter . Show a pie chart .",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , list from low to high by the X-axis .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC'}",
    "record_name": "2605@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , list from low to high by the X-axis .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category in a bar chart , and could you order x axis in descending order ?",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC'}",
    "record_name": "2436@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of music festivals of each category in a bar chart , and could you order x axis in descending order ?",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "order",
      "x",
      "axis",
      "in",
      "descending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "For each submission , group its acceptance result and count them Visualize them in a bar chart , and show in ascending by the X please .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC'}",
    "record_name": "3261@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each submission , group its acceptance result and count them Visualize them in a bar chart , and show in ascending by the X please .",
    "question_toks": [
      "For",
      "each",
      "submission",
      ",",
      "group",
      "its",
      "acceptance",
      "result",
      "and",
      "count",
      "them",
      "Visualize",
      "them",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "X",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "ASC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "For each citizenship , how many singers are from that country , and display in asc by the Y .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC'}",
    "record_name": "2774@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each citizenship , how many singers are from that country , and display in asc by the Y .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "that",
      "country",
      ",",
      "and",
      "display",
      "in",
      "asc",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "List the number of invoices from the US , grouped by state Visualize by bar chart , sort in asc by the total number .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC'}",
    "record_name": "2856@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of invoices from the US , grouped by state Visualize by bar chart , sort in asc by the total number .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "invoices",
      "from",
      "the",
      "US",
      ",",
      "grouped",
      "by",
      "state",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the name of all playlist , and order by the X-axis in desc .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC'}",
    "record_name": "2855@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the name of all playlist , and order by the X-axis in desc .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "and",
      "order",
      "by",
      "the",
      "X-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort x axis from high to low order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort x axis from high to low order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "sort",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Plot how many class by grouped by class as a bar graph , and display by the X-axis in descending .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC'}",
    "record_name": "2753@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot how many class by grouped by class as a bar graph , and display by the X-axis in descending .",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "class",
      "by",
      "grouped",
      "by",
      "class",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "display",
      "by",
      "the",
      "X-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "What are the names of the top 8 countries by total invoice size and what are those sizes . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8'}",
    "record_name": "2857",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          44,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              46,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names of the top 8 countries by total invoice size and what are those sizes . Plot them as bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "top",
      "8",
      "countries",
      "by",
      "total",
      "invoice",
      "size",
      "and",
      "what",
      "are",
      "those",
      "sizes",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_country",
      ",",
      "SUM",
      "(",
      "total",
      ")",
      "FROM",
      "invoices",
      "GROUP",
      "BY",
      "billing_country",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "total",
      ")",
      "DESC",
      "LIMIT",
      "8"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]@SEP@Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]"
  },
  {
    "nl_queries": "What is the relationship between the average and minimum age of captains in different classes ?",
    "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT avg(age) , min(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS'}",
    "record_name": "2743",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "What is the relationship between the average and minimum age of captains in different classes ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "relationship",
      "between",
      "the",
      "average",
      "and",
      "minimum",
      "age",
      "of",
      "captains",
      "in",
      "different",
      "classes",
      "?"
    ],
    "query": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and display by the Y in ascending .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and display by the Y in ascending .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "What are the main indstries and total market value for each industry Visualize by bar chart , list in descending by the X .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC'}",
    "record_name": "1508@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the main indstries and total market value for each industry Visualize by bar chart , list in descending by the X .",
    "question_toks": [
      "What",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show me a bar chart comparing the total number of captains of different classes , and rank by the Class from low to high .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC'}",
    "record_name": "2753@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart comparing the total number of captains of different classes , and rank by the Class from low to high .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "of",
      "different",
      "classes",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Class",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "What are the names of all the playlists , and count them by a bar chart , order from low to high by the bars please .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC'}",
    "record_name": "2855@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names of all the playlists , and count them by a bar chart , order from low to high by the bars please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "bars",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Plot how many date from by grouped by date from as a bar graph , and I want to list in descending by the total number .",
    "VQL": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) DESC BIN date_from BY WEEKDAY",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) DESC', 'binning': 'BIN date_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) DESC BIN date_from BY WEEKDAY'}",
    "record_name": "2962@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Plot how many date from by grouped by date from as a bar graph , and I want to list in descending by the total number .",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "date",
      "from",
      "by",
      "grouped",
      "by",
      "date",
      "from",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) DESC BIN date_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_from",
      ")",
      "DESC",
      "BIN",
      "date_from",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "Show the total number from each rank , and order bars in descending order .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC'}",
    "record_name": "2747@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number from each rank , and order bars in descending order .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "from",
      "each",
      "rank",
      ",",
      "and",
      "order",
      "bars",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "What are the countries of mountains with height bigger than 5000 , and count them by a bar chart , display by the y-axis in descending .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC'}",
    "record_name": "490@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the countries of mountains with height bigger than 5000 , and count them by a bar chart , display by the y-axis in descending .",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "y-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter with a bar chart , show from low to high by the total number please .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC'}",
    "record_name": "1498@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List all headquarters and the number of companies in each headquarter with a bar chart , show from low to high by the total number please .",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show all main industry and total market value in each industry , and order in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC'}",
    "record_name": "1508@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all main industry and total market value in each industry , and order in ascending by the y axis .",
    "question_toks": [
      "Show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      ",",
      "and",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Give me a bar chart , that group by location and count them , list Y in descending order .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC'}",
    "record_name": "2507@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart , that group by location and count them , list Y in descending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "that",
      "group",
      "by",
      "location",
      "and",
      "count",
      "them",
      ",",
      "list",
      "Y",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Location",
      ")",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "For each headquarter , what are the headquarter and how many companies are centered there . Show the proportion .",
    "VQL": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters'}",
    "record_name": "1497",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "For each headquarter , what are the headquarter and how many companies are centered there . Show the proportion .",
    "question_toks": [
      "For",
      "each",
      "headquarter",
      ",",
      "what",
      "are",
      "the",
      "headquarter",
      "and",
      "how",
      "many",
      "companies",
      "are",
      "centered",
      "there",
      ".",
      "Show",
      "the",
      "proportion",
      "."
    ],
    "query": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend .",
    "question_toks": [
      "On",
      "which",
      "days",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      "on",
      "catalogs",
      ",",
      "bin",
      "the",
      "date",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "to",
      "show",
      "the",
      "trend",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Return a histogram on how many entrepreneurs correspond to each investor ?",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1371",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many entrepreneurs correspond to each investor ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?"
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and I want to list in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC'}",
    "record_name": "2605@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and I want to list in ascending by the y axis .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Give me a pie to show the total number from different category .",
    "VQL": "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category'}",
    "record_name": "2435",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show the total number from different category .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "category",
      "."
    ],
    "query": "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "How many entrepreneurs correspond to each investor , and order by the names in asc .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC'}",
    "record_name": "1371@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many entrepreneurs correspond to each investor , and order by the names in asc .",
    "question_toks": [
      "How",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      ",",
      "and",
      "order",
      "by",
      "the",
      "names",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]@SEP@Table people, columns = [*,People_ID, Name, Height, Weight, Date_of_Birth]"
  },
  {
    "nl_queries": "Scatter chart . what is the total amount of grant money given to each organization and what is its id ?",
    "VQL": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id'}",
    "record_name": "2961",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Scatter chart . what is the total amount of grant money given to each organization and what is its id ?",
    "question_toks": [
      "Scatter",
      "chart",
      ".",
      "what",
      "is",
      "the",
      "total",
      "amount",
      "of",
      "grant",
      "money",
      "given",
      "to",
      "each",
      "organization",
      "and",
      "what",
      "is",
      "its",
      "id",
      "?"
    ],
    "query": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "grant_amount",
      ")",
      ",",
      "organisation_id",
      "FROM",
      "Grants",
      "GROUP",
      "BY",
      "organisation_id"
    ],
    "choose_schema": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]",
    "choose_schema_rat": "Table Documents, columns = [*,document_id, document_type_code, grant_id, sent_date, response_received_date, other_details]@SEP@Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]"
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Return the number of the categories of music festivals that have the result \"Awarded\" , and display Y from high to low order .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC'}",
    "record_name": "2439@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of the categories of music festivals that have the result \"Awarded\" , and display Y from high to low order .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "display",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "For each submission , group its acceptance result and count them Visualize them in a bar chart , and I want to sort in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC'}",
    "record_name": "3261@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each submission , group its acceptance result and count them Visualize them in a bar chart , and I want to sort in ascending by the y axis .",
    "question_toks": [
      "For",
      "each",
      "submission",
      ",",
      "group",
      "its",
      "acceptance",
      "result",
      "and",
      "count",
      "them",
      "Visualize",
      "them",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Draw a bar chart that counts the number of venues of each workshop , order from high to low by the x-axis please .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC'}",
    "record_name": "3260@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart that counts the number of venues of each workshop , order from high to low by the x-axis please .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "that",
      "counts",
      "the",
      "number",
      "of",
      "venues",
      "of",
      "each",
      "workshop",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "Venue",
      "DESC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Return the number of the countries of the mountains that have a height larger than 5000 , could you order in ascending by the X-axis ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "490@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of the countries of the mountains that have a height larger than 5000 , could you order in ascending by the X-axis ?",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "could",
      "you",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "X-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship . Show a pie chart .",
    "VQL": "Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship'}",
    "record_name": "2773",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship . Show a pie chart .",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "How many music festivals have had each kind of result , ordered descending by count . Show a pie chart .",
    "VQL": "Visualize PIE SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC'}",
    "record_name": "2433",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many music festivals have had each kind of result , ordered descending by count . Show a pie chart .",
    "question_toks": [
      "How",
      "many",
      "music",
      "festivals",
      "have",
      "had",
      "each",
      "kind",
      "of",
      "result",
      ",",
      "ordered",
      "descending",
      "by",
      "count",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "RESULT",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , and could you show from low to high by the total number ?",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC'}",
    "record_name": "3269@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , and could you show from low to high by the total number ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "and",
      "could",
      "you",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Visualize a bar chart showing the average age of captains in each class , could you display by the bar in descending ?",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC'}",
    "record_name": "2740@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart showing the average age of captains in each class , could you display by the bar in descending ?",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      ",",
      "could",
      "you",
      "display",
      "by",
      "the",
      "bar",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Count the number of players who enter hall of fame for each year . Plot them as line chart .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid'}",
    "record_name": "156",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Count the number of players who enter hall of fame for each year . Plot them as line chart .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "players",
      "who",
      "enter",
      "hall",
      "of",
      "fame",
      "for",
      "each",
      "year",
      ".",
      "Plot",
      "them",
      "as",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Return the number of the categories of music festivals that have the result \"Awarded\" , show in descending by the x axis .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC'}",
    "record_name": "2439@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of the categories of music festivals that have the result \"Awarded\" , show in descending by the x axis .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "A bar chart about how many captains are in each rank ?",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank'}",
    "record_name": "2747",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many captains are in each rank ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      "?"
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank by a bar chart , list the total number from high to low order .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC'}",
    "record_name": "2747@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains that have each rank by a bar chart , list the total number from high to low order .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "how many entrepreneurs correspond to each investor ?",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1371",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "how many entrepreneurs correspond to each investor ?",
    "question_toks": [
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?"
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and list names in desc order please .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC'}",
    "record_name": "2605@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and list names in desc order please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "names",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank'}",
    "record_name": "2747",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains that have each rank . Visualize by bar chart .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , I want to list in asc by the x axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC'}",
    "record_name": "2607@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , I want to list in asc by the x axis .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      "Show",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2439",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart",
    "question_toks": [
      "Return",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries with a pie chart .",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the names and surface areas of the 5 largest countries with a pie chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Bar chart x axis nationality y axis the total number , rank in desc by the x axis .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis nationality y axis the total number , rank in desc by the x axis .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "nationality",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , list from high to low by the total number .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC'}",
    "record_name": "3269@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , list from high to low by the total number .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship'}",
    "record_name": "2774",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart .",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "What are the main indstries and total market value for each industry Visualize by bar chart , rank in ascending by the X-axis .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC'}",
    "record_name": "1508@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the main indstries and total market value for each industry Visualize by bar chart , rank in ascending by the X-axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Give me the trend about the date_from attributes of all researchers , and bin the date into Year interval , order from low to high by the date_from please .",
    "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC', 'binning': 'BIN date_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR'}",
    "record_name": "2964@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "year"
      ],
      "vis": 2
    },
    "question": "Give me the trend about the date_from attributes of all researchers , and bin the date into Year interval , order from low to high by the date_from please .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "date_from",
      "attributes",
      "of",
      "all",
      "researchers",
      ",",
      "and",
      "bin",
      "the",
      "date",
      "into",
      "Year",
      "interval",
      ",",
      "order",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "date_from",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_from",
      "ASC",
      "BIN",
      "date_from",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "List the number of invoices from the US , grouped by state by a bar chart , show by the Y-axis from low to high .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC'}",
    "record_name": "2856@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of invoices from the US , grouped by state by a bar chart , show by the Y-axis from low to high .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "invoices",
      "from",
      "the",
      "US",
      ",",
      "grouped",
      "by",
      "state",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Show me the trend about what is the average number of attendance at home games for each year ? , I want to display x axis in descending order .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC'}",
    "record_name": "171@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend about what is the average number of attendance at home games for each year ? , I want to display x axis in descending order .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "about",
      "what",
      "is",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "for",
      "each",
      "year",
      "?",
      ",",
      "I",
      "want",
      "to",
      "display",
      "x",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]"
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2605",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart , and I want to rank in ascending by the bars .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC'}",
    "record_name": "2439@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart , and I want to rank in ascending by the bars .",
    "question_toks": [
      "Return",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Group by the result and count them by a bar chart , could you list by the x-axis in descending ?",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC'}",
    "record_name": "3261@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Group by the result and count them by a bar chart , could you list by the x-axis in descending ?",
    "question_toks": [
      "Group",
      "by",
      "the",
      "result",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "by",
      "the",
      "x-axis",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "DESC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank in ascending by the Y .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank in ascending by the Y .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Bar graph to show how many yearid from different yearid , I want to rank by the total number from low to high .",
    "VQL": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) ASC BIN yearid BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) ASC', 'binning': 'BIN yearid BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) ASC BIN yearid BY WEEKDAY'}",
    "record_name": "151@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar graph to show how many yearid from different yearid , I want to rank by the total number from low to high .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "yearid",
      "from",
      "different",
      "yearid",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) ASC BIN yearid BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "yearid",
      ")",
      "ASC",
      "BIN",
      "yearid",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ? , rank in descending by the bar please .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC'}",
    "record_name": "1371@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ? , rank in descending by the bar please .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      "?",
      ",",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "bar",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Show the number of companies whose headquarters are not from USA fpr each main industry in a bar chart .",
    "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry\"}",
    "record_name": "1506",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies whose headquarters are not from USA fpr each main industry in a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "whose",
      "headquarters",
      "are",
      "not",
      "from",
      "USA",
      "fpr",
      "each",
      "main",
      "industry",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year'}",
    "record_name": "2497",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah .",
    "question_toks": [
      "Count",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "grpah",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "List the number of the name of all playlist , display Y-axis in asc order .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC'}",
    "record_name": "2855@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the name of all playlist , display Y-axis in asc order .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "display",
      "Y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them , display total number in ascending order .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY'}",
    "record_name": "2499@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them , display total number in ascending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      ",",
      "display",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "ASC",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the name of all playlist , display in ascending by the the number of name .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC'}",
    "record_name": "2855@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the name of all playlist , display in ascending by the the number of name .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "number",
      "of",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank by a bar chart , show in descending by the y-axis .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC'}",
    "record_name": "2737@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains younger than 50 of each rank by a bar chart , show in descending by the y-axis .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Show the number of venue from each venue , display by the X in desc please .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC'}",
    "record_name": "3260@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of venue from each venue , display by the X in desc please .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "venue",
      "from",
      "each",
      "venue",
      ",",
      "display",
      "by",
      "the",
      "X",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "Venue",
      "DESC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]"
  },
  {
    "nl_queries": "Show the number of companies each investor has invested with a bar chart , I want to order by the total number in asc .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC'}",
    "record_name": "1373@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies each investor has invested with a bar chart , I want to order by the total number in asc .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Investor",
      ")",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "When do all the researcher role staff stop working ? Bin the time into YEAR interval and count them with a line chart , and rank X in asc order .",
    "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC BIN date_to BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC', 'binning': 'BIN date_to BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC BIN date_to BY YEAR'}",
    "record_name": "2965@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "year"
      ],
      "vis": 2
    },
    "question": "When do all the researcher role staff stop working ? Bin the time into YEAR interval and count them with a line chart , and rank X in asc order .",
    "question_toks": [
      "When",
      "do",
      "all",
      "the",
      "researcher",
      "role",
      "staff",
      "stop",
      "working",
      "?",
      "Bin",
      "the",
      "time",
      "into",
      "YEAR",
      "interval",
      "and",
      "count",
      "them",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "rank",
      "X",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC BIN date_to BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_to",
      "ASC",
      "BIN",
      "date_to",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Staff_Roles, columns = [*,role_code, role_description]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  },
  {
    "nl_queries": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , rank from high to low by the x axis .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC'}",
    "record_name": "1371@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , rank from high to low by the x axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      ",",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Return the number of the countries of the mountains that have a height larger than 5000 .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "490",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of the countries of the mountains that have a height larger than 5000 .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Show all main industry and total market value in each industry in a pie chart .",
    "VQL": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
    "record_name": "1507",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show all main industry and total market value in each industry in a pie chart .",
    "question_toks": [
      "Show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Give me the trend about the date_from attributes of all researchers , and bin the date into Year interval , rank by the x axis in desc .",
    "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC BIN date_from BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC', 'binning': 'BIN date_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC BIN date_from BY YEAR'}",
    "record_name": "2964@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "year"
      ],
      "vis": 2
    },
    "question": "Give me the trend about the date_from attributes of all researchers , and bin the date into Year interval , rank by the x axis in desc .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "date_from",
      "attributes",
      "of",
      "all",
      "researchers",
      ",",
      "and",
      "bin",
      "the",
      "date",
      "into",
      "Year",
      "interval",
      ",",
      "rank",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC BIN date_from BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_from",
      "DESC",
      "BIN",
      "date_from",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "what are the top 5 countries by number of invoices and how many do they have ?",
    "VQL": "Visualize BAR SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5'}",
    "record_name": "2850",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          44,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "what are the top 5 countries by number of invoices and how many do they have ?",
    "question_toks": [
      "what",
      "are",
      "the",
      "top",
      "5",
      "countries",
      "by",
      "number",
      "of",
      "invoices",
      "and",
      "how",
      "many",
      "do",
      "they",
      "have",
      "?"
    ],
    "query": "Visualize BAR SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "GROUP",
      "BY",
      "billing_country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]@SEP@Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]"
  },
  {
    "nl_queries": "Show me the total number by category in a histogram",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category'}",
    "record_name": "2436",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the total number by category in a histogram",
    "question_toks": [
      "Show",
      "me",
      "the",
      "total",
      "number",
      "by",
      "category",
      "in",
      "a",
      "histogram"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show me a line chart for how many players enter hall of fame each year ? , and rank X-axis in asc order please .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC'}",
    "record_name": "156@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me a line chart for how many players enter hall of fame each year ? , and rank X-axis in asc order please .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "line",
      "chart",
      "for",
      "how",
      "many",
      "players",
      "enter",
      "hall",
      "of",
      "fame",
      "each",
      "year",
      "?",
      ",",
      "and",
      "rank",
      "X-axis",
      "in",
      "asc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "ASC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and order by the names from high to low .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and order by the names from high to low .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "and",
      "order",
      "by",
      "the",
      "names",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "How many companies in each headquarter ? Plot a bar chart , and could you sort from high to low by the Y-axis ?",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC'}",
    "record_name": "1518@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies in each headquarter ? Plot a bar chart , and could you sort from high to low by the Y-axis ?",
    "question_toks": [
      "How",
      "many",
      "companies",
      "in",
      "each",
      "headquarter",
      "?",
      "Plot",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship by a pie chart .",
    "VQL": "Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship'}",
    "record_name": "2775",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship by a pie chart .",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2605",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10"
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "What is the distibution of results for each music festival ? Could you show me the result with a bar chart , show by the y axis in descending .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC'}",
    "record_name": "2441@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the distibution of results for each music festival ? Could you show me the result with a bar chart , show by the y axis in descending .",
    "question_toks": [
      "What",
      "is",
      "the",
      "distibution",
      "of",
      "results",
      "for",
      "each",
      "music",
      "festival",
      "?",
      "Could",
      "you",
      "show",
      "me",
      "the",
      "result",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart , I want to order by the x axis from high to low please .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart , I want to order by the x axis from high to low please .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "DESC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "A bar chart about how many captains are in each rank ? , and could you order by the X-axis from high to low ?",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC'}",
    "record_name": "2747@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many captains are in each rank ? , and could you order by the X-axis from high to low ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "and",
      "could",
      "you",
      "order",
      "by",
      "the",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Show the number of venue from each venue , rank by the X in asc .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC'}",
    "record_name": "3260@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of venue from each venue , rank by the X in asc .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "venue",
      "from",
      "each",
      "venue",
      ",",
      "rank",
      "by",
      "the",
      "X",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "Venue",
      "ASC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]"
  },
  {
    "nl_queries": "What is the average number of attendance at home games for each year . Plot them as line chart .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR'}",
    "record_name": "171",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "What is the average number of attendance at home games for each year . Plot them as line chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "for",
      "each",
      "year",
      ".",
      "Plot",
      "them",
      "as",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]"
  },
  {
    "nl_queries": "Give me the trend about the date_to attributes of all researchers , and bin the date_to into Year interval , I want to rank in descending by the X .",
    "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC BIN date_to BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC', 'binning': 'BIN date_to BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC BIN date_to BY YEAR'}",
    "record_name": "2965@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "year"
      ],
      "vis": 2
    },
    "question": "Give me the trend about the date_to attributes of all researchers , and bin the date_to into Year interval , I want to rank in descending by the X .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "date_to",
      "attributes",
      "of",
      "all",
      "researchers",
      ",",
      "and",
      "bin",
      "the",
      "date_to",
      "into",
      "Year",
      "interval",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC BIN date_to BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_to",
      "DESC",
      "BIN",
      "date_to",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart .",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "List the research staff details , and order in ascending order , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC'}",
    "record_name": "2960",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          36,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the research staff details , and order in ascending order , and count them by a bar chart",
    "question_toks": [
      "List",
      "the",
      "research",
      "staff",
      "details",
      ",",
      "and",
      "order",
      "in",
      "ascending",
      "order",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "staff_details",
      ",",
      "COUNT",
      "(",
      "staff_details",
      ")",
      "FROM",
      "Research_Staff",
      "GROUP",
      "BY",
      "staff_details",
      "ORDER",
      "BY",
      "staff_details",
      "ASC"
    ],
    "choose_schema": "Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]",
    "choose_schema_rat": "Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]@SEP@Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , I want to list in ascending by the x-axis .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , I want to list in ascending by the x-axis .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , could you order X-axis from low to high order ?",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC'}",
    "record_name": "2605@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , could you order X-axis from low to high order ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "could",
      "you",
      "order",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Show the number of companies in each headquarter with a bar chart .",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters'}",
    "record_name": "1518",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies in each headquarter with a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Compare the total number of different ranks using a bar graph , and order from high to low by the how many rank .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC'}",
    "record_name": "2751@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of different ranks using a bar graph , and order from high to low by the how many rank .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "different",
      "ranks",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "how",
      "many",
      "rank",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Rank",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Draw a bar chart for how many captains with younger than 50 are in each rank ? , and show Y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC'}",
    "record_name": "2737@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for how many captains with younger than 50 are in each rank ? , and show Y-axis in descending order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "and",
      "show",
      "Y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Show me a bar chart for how many captains with younger than 50 are in each rank ? , display in ascending by the bars .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC'}",
    "record_name": "2737@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many captains with younger than 50 are in each rank ? , display in ascending by the bars .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "When do all the researcher role staff stop working ? Bin the time into YEAR interval and count them with a line chart .",
    "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff', 'binning': 'BIN date_to BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR'}",
    "record_name": "2965",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "year"
      ],
      "vis": 2
    },
    "question": "When do all the researcher role staff stop working ? Bin the time into YEAR interval and count them with a line chart .",
    "question_toks": [
      "When",
      "do",
      "all",
      "the",
      "researcher",
      "role",
      "staff",
      "stop",
      "working",
      "?",
      "Bin",
      "the",
      "time",
      "into",
      "YEAR",
      "interval",
      "and",
      "count",
      "them",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "BIN",
      "date_to",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Staff_Roles, columns = [*,role_code, role_description]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  },
  {
    "nl_queries": "Show me the trend about what is the average number of attendance at home games for each year ?",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR'}",
    "record_name": "171",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend about what is the average number of attendance at home games for each year ?",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "about",
      "what",
      "is",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "for",
      "each",
      "year",
      "?"
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]"
  },
  {
    "nl_queries": "Display a pie chart for how many climbers are from each country ?",
    "VQL": "Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country'}",
    "record_name": "484",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Display a pie chart for how many climbers are from each country ?",
    "question_toks": [
      "Display",
      "a",
      "pie",
      "chart",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "query": "Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Can you give me a bar chart to show the name and membership level of the visitors whose membership level is higher than 4 .",
    "VQL": "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4",
    "db_id": "museum_visit",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4'}",
    "record_name": "2417",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you give me a bar chart to show the name and membership level of the visitors whose membership level is higher than 4 .",
    "question_toks": [
      "Can",
      "you",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      "."
    ],
    "query": "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Level_of_membership",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4"
    ],
    "choose_schema": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visitor, columns = [*,ID, Name, Level_of_membership, Age]",
    "choose_schema_rat": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visit, columns = [*,Museum_ID, visitor_ID, Num_of_Ticket, Total_spent]"
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart , and I want to list in desc by the Y-axis .",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart , and I want to list in desc by the Y-axis .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "DESC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank Visualize by bar chart , and show from low to high by the x axis please .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC'}",
    "record_name": "2747@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains that have each rank Visualize by bar chart , and show from low to high by the x axis please .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "x",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , could you list in ascending by the y axis ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , could you list in ascending by the y axis ?",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "How many climbers are from each country , order in descending by the x axis .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "485@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many climbers are from each country , order in descending by the x axis .",
    "question_toks": [
      "How",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      ",",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Show me a bar chart for how many captains with younger than 50 are in each rank ? , and list bars from high to low order please .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC'}",
    "record_name": "2737@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many captains with younger than 50 are in each rank ? , and list bars from high to low order please .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "and",
      "list",
      "bars",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "A bar chart shows the venue for each workshop , and show by the x-axis from high to low .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC'}",
    "record_name": "3260@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart shows the venue for each workshop , and show by the x-axis from high to low .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "venue",
      "for",
      "each",
      "workshop",
      ",",
      "and",
      "show",
      "by",
      "the",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "Venue",
      "DESC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "What is the average age of captains in different classes ? , and order mean age in asc order .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC'}",
    "record_name": "2740@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average age of captains in different classes ? , and order mean age in asc order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "different",
      "classes",
      "?",
      ",",
      "and",
      "order",
      "mean",
      "age",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "avg",
      "(",
      "age",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship , could you list x axis from high to low order ?",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC'}",
    "record_name": "2776@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship , could you list x axis from high to low order ?",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      ",",
      "could",
      "you",
      "list",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "When do all the researcher role staff start to work ? Bin the time into YEAR interval and count them with a line chart .",
    "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff', 'binning': 'BIN date_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR'}",
    "record_name": "2964",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "year"
      ],
      "vis": 2
    },
    "question": "When do all the researcher role staff start to work ? Bin the time into YEAR interval and count them with a line chart .",
    "question_toks": [
      "When",
      "do",
      "all",
      "the",
      "researcher",
      "role",
      "staff",
      "start",
      "to",
      "work",
      "?",
      "Bin",
      "the",
      "time",
      "into",
      "YEAR",
      "interval",
      "and",
      "count",
      "them",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "BIN",
      "date_from",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Staff_Roles, columns = [*,role_code, role_description]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  },
  {
    "nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , order in asc by the y axis please .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC'}",
    "record_name": "2607@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , order in asc by the y axis please .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "y",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "I want to see trend of the number of yearid by yearid , show x axis in desc order .",
    "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR'}",
    "record_name": "157@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend of the number of yearid by yearid , show x axis in desc order .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "yearid",
      "by",
      "yearid",
      ",",
      "show",
      "x",
      "axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "yearid",
      "DESC",
      "BIN",
      "yearid",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality . Visualize by bar chart .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank by a bar chart , and order from high to low by the X .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC'}",
    "record_name": "2737@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains younger than 50 of each rank by a bar chart , and order from high to low by the X .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "List the number of the name of all playlist , display in asc by the names .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC'}",
    "record_name": "2855@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the name of all playlist , display in asc by the names .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "display",
      "in",
      "asc",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Draw a bar chart that counts the number of venues of each workshop , could you rank by the total number in asc ?",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC'}",
    "record_name": "3260@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart that counts the number of venues of each workshop , could you rank by the total number in asc ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "that",
      "counts",
      "the",
      "number",
      "of",
      "venues",
      "of",
      "each",
      "workshop",
      ",",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Venue",
      ")",
      "ASC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Show all main industry and total market value in each industry .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
    "record_name": "1508",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all main industry and total market value in each industry .",
    "question_toks": [
      "Show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return a histogram on what are the names and areas of countries with the top 5 largest area ?",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on what are the names and areas of countries with the top 5 largest area ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "what",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "How many captains are in each rank , and show from low to high by the x axis please .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC'}",
    "record_name": "2747@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many captains are in each rank , and show from low to high by the x axis please .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      ",",
      "and",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "x",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Visualize a bar chart for how many authors submit to the workshop .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author'}",
    "record_name": "3263",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for how many authors submit to the workshop .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "authors",
      "submit",
      "to",
      "the",
      "workshop",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Compute the total the total number across investor as a pie chart .",
    "VQL": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1370",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Compute the total the total number across investor as a pie chart .",
    "question_toks": [
      "Compute",
      "the",
      "total",
      "the",
      "total",
      "number",
      "across",
      "investor",
      "as",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank by a bar chart , rank in ascending by the Rank .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC'}",
    "record_name": "2737@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains younger than 50 of each rank by a bar chart , rank in ascending by the Rank .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "Rank",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Return the number of the categories of music festivals that have the result \"Awarded\" .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2439",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of the categories of music festivals that have the result \"Awarded\" .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality . Show a pie chart .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show different nationalities along with the number of hosts of each nationality . Show a pie chart .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "Bar chart of the total number from each country , and I want to order names from high to low order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "485@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each country , and I want to order names from high to low order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "country",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "names",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Show the number of companies each investor has invested with a bar chart , show by the X from low to high .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC'}",
    "record_name": "1373@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies each investor has invested with a bar chart , show by the X from low to high .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Draw a bar chart for how many music festivals have had each kind of result , ordered descending by count ?",
    "VQL": "Visualize BAR SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC'}",
    "record_name": "2434",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for how many music festivals have had each kind of result , ordered descending by count ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "music",
      "festivals",
      "have",
      "had",
      "each",
      "kind",
      "of",
      "result",
      ",",
      "ordered",
      "descending",
      "by",
      "count",
      "?"
    ],
    "query": "Visualize BAR SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "RESULT",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show the number of companies whose headquarters are not from USA fpr each main industry in a pie chart .",
    "VQL": "Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry\", 'binning': ''}, 'VQL': \"Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry\"}",
    "record_name": "1505",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show the number of companies whose headquarters are not from USA fpr each main industry in a pie chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "whose",
      "headquarters",
      "are",
      "not",
      "from",
      "USA",
      "fpr",
      "each",
      "main",
      "industry",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show all main industry and total market value in each industry , and I want to sort Y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC'}",
    "record_name": "1508@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all main industry and total market value in each industry , and I want to sort Y-axis in descending order .",
    "question_toks": [
      "Show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "Y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What is the distibution of results for each music festival ? Could you show me the result with a bar chart , and order by the X in ascending please .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC'}",
    "record_name": "2441@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the distibution of results for each music festival ? Could you show me the result with a bar chart , and order by the X in ascending please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "distibution",
      "of",
      "results",
      "for",
      "each",
      "music",
      "festival",
      "?",
      "Could",
      "you",
      "show",
      "me",
      "the",
      "result",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "X",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Bar graph to show the number of investor from different investor , show by the total number in ascending .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC'}",
    "record_name": "1373@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of investor from different investor , show by the total number in ascending .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "investor",
      "from",
      "different",
      "investor",
      ",",
      "show",
      "by",
      "the",
      "total",
      "number",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Investor",
      ")",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Show all main industry and total market value in each industry by a bar chart .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
    "record_name": "1508",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all main industry and total market value in each industry by a bar chart .",
    "question_toks": [
      "Show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Visualize a bar chart for what is the name and rank of every company ordered by descending number of sales ?",
    "VQL": "Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Company , Rank FROM company ORDER BY Sales_billion DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC'}",
    "record_name": "1519",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what is the name and rank of every company ordered by descending number of sales ?",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "is",
      "the",
      "name",
      "and",
      "rank",
      "of",
      "every",
      "company",
      "ordered",
      "by",
      "descending",
      "number",
      "of",
      "sales",
      "?"
    ],
    "query": "Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Company",
      ",",
      "Rank",
      "FROM",
      "company",
      "ORDER",
      "BY",
      "Sales_billion",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]@SEP@Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]"
  },
  {
    "nl_queries": "Plot year by the average of attendance as a line chart",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR'}",
    "record_name": "171",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Plot year by the average of attendance as a line chart",
    "question_toks": [
      "Plot",
      "year",
      "by",
      "the",
      "average",
      "of",
      "attendance",
      "as",
      "a",
      "line",
      "chart"
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Bar graph to show the number of investor from different investor , and display Y-axis in descending order please .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC'}",
    "record_name": "1373@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of investor from different investor , and display Y-axis in descending order please .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "investor",
      "from",
      "different",
      "investor",
      ",",
      "and",
      "display",
      "Y-axis",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Investor",
      ")",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Show the number of companies whose headquarters are not from USA fpr each main industry in a bar chart , display bars in descending order .",
    "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry DESC",
    "db_id": "gas_company",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry DESC\"}",
    "record_name": "1506@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies whose headquarters are not from USA fpr each main industry in a bar chart , display bars in descending order .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "whose",
      "headquarters",
      "are",
      "not",
      "from",
      "USA",
      "fpr",
      "each",
      "main",
      "industry",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "bars",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Stacked bar of class and the number of class colored by Rank",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class'}",
    "record_name": "2750",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar of class and the number of class colored by Rank",
    "question_toks": [
      "Stacked",
      "bar",
      "of",
      "class",
      "and",
      "the",
      "number",
      "of",
      "class",
      "colored",
      "by",
      "Rank"
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , display in desc by the Y .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , display in desc by the Y .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "display",
      "in",
      "desc",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show the number of gas stations for each manager in a bar chart , and I want to show by the X in desc .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC'}",
    "record_name": "1511@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of gas stations for each manager in a bar chart , and I want to show by the X in desc .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "gas",
      "stations",
      "for",
      "each",
      "manager",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "X",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "Manager_Name",
      "DESC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "For each year , return the year and the average number of attendance at home games , and I want to list by the X in desc please .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC'}",
    "record_name": "171@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "For each year , return the year and the average number of attendance at home games , and I want to list by the X in desc please .",
    "question_toks": [
      "For",
      "each",
      "year",
      ",",
      "return",
      "the",
      "year",
      "and",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "by",
      "the",
      "X",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "what are the main indstries and total market value for each industry ? , and display in asc by the total number .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC'}",
    "record_name": "1508@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "what are the main indstries and total market value for each industry ? , and display in asc by the total number .",
    "question_toks": [
      "what",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "?",
      ",",
      "and",
      "display",
      "in",
      "asc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "How many companies that are not headquartered in the United States for each main industry ? Show me a bar chart , could you sort in asc by the y axis please ?",
    "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
    "db_id": "gas_company",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC\"}",
    "record_name": "1506@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies that are not headquartered in the United States for each main industry ? Show me a bar chart , could you sort in asc by the y axis please ?",
    "question_toks": [
      "How",
      "many",
      "companies",
      "that",
      "are",
      "not",
      "headquartered",
      "in",
      "the",
      "United",
      "States",
      "for",
      "each",
      "main",
      "industry",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "y",
      "axis",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return the number of venues of each workshop in a bar chart .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue'}",
    "record_name": "3260",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of venues of each workshop in a bar chart .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "venues",
      "of",
      "each",
      "workshop",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , and could you sort Y-axis from high to low order ?",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC'}",
    "record_name": "2605@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , and could you sort Y-axis from high to low order ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart , I want to order total number from low to high order please .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC'}",
    "record_name": "2750@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart , I want to order total number from low to high order please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      "and",
      "class",
      "?",
      "Let",
      "class",
      "as",
      "X-axis",
      ",",
      "and",
      "categorize",
      "by",
      "rank",
      "with",
      "a",
      "stacked",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "How many captains with younger than 50 are in each rank .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank'}",
    "record_name": "2737",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many captains with younger than 50 are in each rank .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Show me a bar chart comparing the total number of captains of different classes .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class'}",
    "record_name": "2753",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart comparing the total number of captains of different classes .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "of",
      "different",
      "classes",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and rank total number in descending order .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC'}",
    "record_name": "2605@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and rank total number in descending order .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "rank",
      "total",
      "number",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Give me a bar chart , that group by location and count them , rank x axis in ascending order .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC'}",
    "record_name": "2507@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart , that group by location and count them , rank x axis in ascending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "that",
      "group",
      "by",
      "location",
      "and",
      "count",
      "them",
      ",",
      "rank",
      "x",
      "axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "Location",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "What are the different ship flags , and how many ships have each Plot them as bar chart , and list Y-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC'}",
    "record_name": "2739@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different ship flags , and how many ships have each Plot them as bar chart , and list Y-axis in ascending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "Y-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Return the countries of the mountains that have a height larger than 5000 , and count them by a pie chart",
    "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "489",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the countries of the mountains that have a height larger than 5000 , and count them by a pie chart",
    "question_toks": [
      "Return",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "pie",
      "chart"
    ],
    "query": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank by a bar chart , sort in desc by the bars .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC'}",
    "record_name": "2747@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains that have each rank by a bar chart , sort in desc by the bars .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "How many entrepreneurs correspond to each investor , I want to order in descending by the Y-axis .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC'}",
    "record_name": "1371@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many entrepreneurs correspond to each investor , I want to order in descending by the Y-axis .",
    "question_toks": [
      "How",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      ",",
      "I",
      "want",
      "to",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "What is the distibution of results for each music festival ? Could you show me the result with a bar chart .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result'}",
    "record_name": "2441",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the distibution of results for each music festival ? Could you show me the result with a bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "distibution",
      "of",
      "results",
      "for",
      "each",
      "music",
      "festival",
      "?",
      "Could",
      "you",
      "show",
      "me",
      "the",
      "result",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2607",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the category of music festivals with result \"Awarded\" ?",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2439",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the category of music festivals with result \"Awarded\" ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year , and rank y-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY'}",
    "record_name": "2499@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year , and rank y-axis from high to low order .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      ",",
      "and",
      "count",
      "the",
      "first",
      "year",
      ",",
      "and",
      "rank",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "DESC",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "How many climbers are from each country , and sort by the Y in ascending .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC'}",
    "record_name": "485@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many climbers are from each country , and sort by the Y in ascending .",
    "question_toks": [
      "How",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Plot how many date from by grouped by date from as a bar graph",
    "VQL": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY WEEKDAY",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff', 'binning': 'BIN date_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY WEEKDAY'}",
    "record_name": "2962",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Plot how many date from by grouped by date from as a bar graph",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "date",
      "from",
      "by",
      "grouped",
      "by",
      "date",
      "from",
      "as",
      "a",
      "bar",
      "graph"
    ],
    "query": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "BIN",
      "date_from",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , and sort total number in asc order .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC'}",
    "record_name": "2774@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , and sort total number in asc order .",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "total",
      "number",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Give me the trend about the date_from attributes of all researchers , and bin the date into Year interval .",
    "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff', 'binning': 'BIN date_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR'}",
    "record_name": "2964",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "year"
      ],
      "vis": 2
    },
    "question": "Give me the trend about the date_from attributes of all researchers , and bin the date into Year interval .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "date_from",
      "attributes",
      "of",
      "all",
      "researchers",
      ",",
      "and",
      "bin",
      "the",
      "date",
      "into",
      "Year",
      "interval",
      "."
    ],
    "query": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "BIN",
      "date_from",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , and show Y-axis in ascending order .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC'}",
    "record_name": "2607@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , and show Y-axis in ascending order .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "Y-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "I want to see trend of the number of yearid by yearid",
    "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR'}",
    "record_name": "157",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend of the number of yearid by yearid",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "yearid",
      "by",
      "yearid"
    ],
    "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "BIN",
      "yearid",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]"
  },
  {
    "nl_queries": "Draw a bar chart of manager name versus how many manager name , I want to sort how many manager name in desc order .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC'}",
    "record_name": "1511@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of manager name versus how many manager name , I want to sort how many manager name in desc order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "manager",
      "name",
      "versus",
      "how",
      "many",
      "manager",
      "name",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "how",
      "many",
      "manager",
      "name",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]"
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and list X-axis in desc order please .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and list X-axis in desc order please .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "list",
      "X-axis",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "How many invoices were billed from each state Plot them as bar chart , list by the X-axis in desc .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC'}",
    "record_name": "2856@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many invoices were billed from each state Plot them as bar chart , list by the X-axis in desc .",
    "question_toks": [
      "How",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "X-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "billing_state",
      "DESC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different ship flags , and how many ships have each ?",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag'}",
    "record_name": "2739",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different ship flags , and how many ships have each ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?"
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and sort the total number from low to high order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and sort the total number from low to high order .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "the",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank'}",
    "record_name": "2737",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains younger than 50 of each rank .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Bar chart x axis date of latest revision y axis the number of date of latest revision , could you rank in desc by the Y-axis ?",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date of latest revision y axis the number of date of latest revision , could you rank in desc by the Y-axis ?",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "of",
      "latest",
      "revision",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision",
      ",",
      "could",
      "you",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "DESC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "List the name of all playlist , and count them by a bar chart , show by the X-axis in ascending .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC'}",
    "record_name": "2855@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the name of all playlist , and count them by a bar chart , show by the X-axis in ascending .",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "X-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , and sort X-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , and sort X-axis from high to low order .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "and",
      "sort",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Visualize the general trend of how many year over the year , show x axis from low to high order .",
    "VQL": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC BIN year BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC', 'binning': 'BIN year BY YEAR'}, 'VQL': 'Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC BIN year BY YEAR'}",
    "record_name": "166@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "year"
      ],
      "vis": 2
    },
    "question": "Visualize the general trend of how many year over the year , show x axis from low to high order .",
    "question_toks": [
      "Visualize",
      "the",
      "general",
      "trend",
      "of",
      "how",
      "many",
      "year",
      "over",
      "the",
      "year",
      ",",
      "show",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC BIN year BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "year",
      "ASC",
      "BIN",
      "year",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "How many gas stations dors each manager have ? Plot a bar chart , list bars in descending order .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC'}",
    "record_name": "1511@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many gas stations dors each manager have ? Plot a bar chart , list bars in descending order .",
    "question_toks": [
      "How",
      "many",
      "gas",
      "stations",
      "dors",
      "each",
      "manager",
      "have",
      "?",
      "Plot",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "bars",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "Manager_Name",
      "DESC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show the authors of their total submissions with a bar chart , and display by the x axis in asc .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC'}",
    "record_name": "3263@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the authors of their total submissions with a bar chart , and display by the x axis in asc .",
    "question_toks": [
      "Show",
      "the",
      "authors",
      "of",
      "their",
      "total",
      "submissions",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "Author",
      "ASC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Show me a bar chart for what are the names of the countries and average invoice size of the top countries by size ?",
    "VQL": "Visualize BAR SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10'}",
    "record_name": "2851",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          44,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              46,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the names of the countries and average invoice size of the top countries by size ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "of",
      "the",
      "countries",
      "and",
      "average",
      "invoice",
      "size",
      "of",
      "the",
      "top",
      "countries",
      "by",
      "size",
      "?"
    ],
    "query": "Visualize BAR SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_country",
      ",",
      "AVG",
      "(",
      "total",
      ")",
      "FROM",
      "invoices",
      "GROUP",
      "BY",
      "billing_country",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "total",
      ")",
      "DESC",
      "LIMIT",
      "10"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]@SEP@Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]"
  },
  {
    "nl_queries": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year , and order by the Y in ascending please .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY'}",
    "record_name": "2499@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year , and order by the Y in ascending please .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      ",",
      "and",
      "count",
      "the",
      "first",
      "year",
      ",",
      "and",
      "order",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "ASC",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , and display in descending by the X-axis .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC'}",
    "record_name": "3269@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , and display in descending by the X-axis .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "and",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "bin the yearid into the day of the week interval and count them for visualizing a bar chart , rank by the y axis from low to high .",
    "VQL": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) ASC BIN yearid BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) ASC', 'binning': 'BIN yearid BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) ASC BIN yearid BY WEEKDAY'}",
    "record_name": "151@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "weekday"
      ],
      "vis": 0
    },
    "question": "bin the yearid into the day of the week interval and count them for visualizing a bar chart , rank by the y axis from low to high .",
    "question_toks": [
      "bin",
      "the",
      "yearid",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) ASC BIN yearid BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "yearid",
      ")",
      "ASC",
      "BIN",
      "yearid",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Bar chart x axis nationality y axis the total number , could you list in ascending by the y axis ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis nationality y axis the total number , could you list in ascending by the y axis ?",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "nationality",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "could",
      "you",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Compare the total number of captains with different classes using a bar graph , and I want to order by the x axis from high to low .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC'}",
    "record_name": "2753@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of captains with different classes using a bar graph , and I want to order by the x axis from high to low .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "with",
      "different",
      "classes",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Bar graph to show the number of rank from different rank , I want to display bar in asc order .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC'}",
    "record_name": "2751@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of rank from different rank , I want to display bar in asc order .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "rank",
      "from",
      "different",
      "rank",
      ",",
      "I",
      "want",
      "to",
      "display",
      "bar",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "A pie chart for what are the number of the countries of mountains with height bigger than 5000 ?",
    "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "489",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart for what are the number of the countries of mountains with height bigger than 5000 ?",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?"
    ],
    "query": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "List the number of invoices from the US , grouped by state by a bar chart , rank by the the total number in descending please .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC'}",
    "record_name": "2856@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of invoices from the US , grouped by state by a bar chart , rank by the the total number in descending please .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "invoices",
      "from",
      "the",
      "US",
      ",",
      "grouped",
      "by",
      "state",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Show the total number from each flag , could you display bar from low to high order ?",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC'}",
    "record_name": "2739@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number from each flag , could you display bar from low to high order ?",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "from",
      "each",
      "flag",
      ",",
      "could",
      "you",
      "display",
      "bar",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "Flag",
      "ASC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , and display in desc by the Y .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) DESC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) DESC'}",
    "record_name": "2496@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , and display in desc by the Y .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "in",
      "desc",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "First_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "First_year",
      ")",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "How many companies that are not headquartered in the United States for each main industry ? Show me a bar chart , and rank by the names from low to high .",
    "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC",
    "db_id": "gas_company",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC\"}",
    "record_name": "1506@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies that are not headquartered in the United States for each main industry ? Show me a bar chart , and rank by the names from low to high .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "that",
      "are",
      "not",
      "headquartered",
      "in",
      "the",
      "United",
      "States",
      "for",
      "each",
      "main",
      "industry",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "names",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show me a bar chart comparing the total number of captains of different classes , order from high to low by the the number of class .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC'}",
    "record_name": "2753@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart comparing the total number of captains of different classes , order from high to low by the the number of class .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "of",
      "different",
      "classes",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "the",
      "number",
      "of",
      "class",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show the number of gas stations for each manager in a bar chart , and sort from high to low by the y-axis .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC'}",
    "record_name": "1511@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of gas stations for each manager in a bar chart , and sort from high to low by the y-axis .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "gas",
      "stations",
      "for",
      "each",
      "manager",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Visualize by pie chart about different citizenships and the maximum net worth of singers of each citizenship .",
    "VQL": "Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship'}",
    "record_name": "2775",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize by pie chart about different citizenships and the maximum net worth of singers of each citizenship .",
    "question_toks": [
      "Visualize",
      "by",
      "pie",
      "chart",
      "about",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "."
    ],
    "query": "Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Return the average age of captains in each class , and rank from low to high by the X .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC'}",
    "record_name": "2740@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the average age of captains in each class , and rank from low to high by the X .",
    "question_toks": [
      "Return",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      ",",
      "and",
      "rank",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Give me a pie to show the total number from different country .",
    "VQL": "Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country'}",
    "record_name": "484",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show the total number from different country .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "country",
      "."
    ],
    "query": "Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "How many companies that are not headquartered in the United States for each main industry ? Show me a bar chart .",
    "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry\"}",
    "record_name": "1506",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies that are not headquartered in the United States for each main industry ? Show me a bar chart .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "that",
      "are",
      "not",
      "headquartered",
      "in",
      "the",
      "United",
      "States",
      "for",
      "each",
      "main",
      "industry",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "When do all the researcher role staff start to work ? Bin the time into weekday interval and count them with a bar chart , I want to list in asc by the Y-axis please .",
    "VQL": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) ASC BIN date_from BY WEEKDAY",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) ASC', 'binning': 'BIN date_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) ASC BIN date_from BY WEEKDAY'}",
    "record_name": "2962@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "weekday"
      ],
      "vis": 0
    },
    "question": "When do all the researcher role staff start to work ? Bin the time into weekday interval and count them with a bar chart , I want to list in asc by the Y-axis please .",
    "question_toks": [
      "When",
      "do",
      "all",
      "the",
      "researcher",
      "role",
      "staff",
      "start",
      "to",
      "work",
      "?",
      "Bin",
      "the",
      "time",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "Y-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) ASC BIN date_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_from",
      ")",
      "ASC",
      "BIN",
      "date_from",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Staff_Roles, columns = [*,role_code, role_description]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  },
  {
    "nl_queries": "What are the different ship flags , and how many ships have each Plot them as bar chart , and could you display bar from low to high order ?",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC'}",
    "record_name": "2739@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different ship flags , and how many ships have each Plot them as bar chart , and could you display bar from low to high order ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "display",
      "bar",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "Flag",
      "ASC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "How many companies in each headquarter ? Plot a bar chart .",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters'}",
    "record_name": "1518",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies in each headquarter ? Plot a bar chart .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "in",
      "each",
      "headquarter",
      "?",
      "Plot",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return me a bar chart to show the frequency of the year attribute by binning into a weekday interval , order by the the number of year in desc please .",
    "VQL": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC BIN year BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC', 'binning': 'BIN year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC BIN year BY WEEKDAY'}",
    "record_name": "165@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Return me a bar chart to show the frequency of the year attribute by binning into a weekday interval , order by the the number of year in desc please .",
    "question_toks": [
      "Return",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "frequency",
      "of",
      "the",
      "year",
      "attribute",
      "by",
      "binning",
      "into",
      "a",
      "weekday",
      "interval",
      ",",
      "order",
      "by",
      "the",
      "the",
      "number",
      "of",
      "year",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC BIN year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "year",
      ")",
      "DESC",
      "BIN",
      "year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Display a bar chart for how many climbers are from each country ? , and I want to order y axis in descending order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC'}",
    "record_name": "485@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many climbers are from each country ? , and I want to order y axis in descending order .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Show the number of companies whose headquarters are not from USA fpr each main industry in a bar chart , and display Y from high to low order .",
    "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC",
    "db_id": "gas_company",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC\"}",
    "record_name": "1506@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies whose headquarters are not from USA fpr each main industry in a bar chart , and display Y from high to low order .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "whose",
      "headquarters",
      "are",
      "not",
      "from",
      "USA",
      "fpr",
      "each",
      "main",
      "industry",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What are the names and areas of countries with the top 5 largest area .",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the names and areas of countries with the top 5 largest area .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "."
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Draw a bar chart of investor versus the total number , and could you list bars from high to low order ?",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC'}",
    "record_name": "1371@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of investor versus the total number , and could you list bars from high to low order ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "investor",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "and",
      "could",
      "you",
      "list",
      "bars",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Bar chart x axis name y axis how many name , display in asc by the names .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC'}",
    "record_name": "2855@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis name y axis how many name , display in asc by the names .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "name",
      "y",
      "axis",
      "how",
      "many",
      "name",
      ",",
      "display",
      "in",
      "asc",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "For each year , return the year and the average number of attendance at home games , and list in asc by the x-axis .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC'}",
    "record_name": "171@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "For each year , return the year and the average number of attendance at home games , and list in asc by the x-axis .",
    "question_toks": [
      "For",
      "each",
      "year",
      ",",
      "return",
      "the",
      "year",
      "and",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      ",",
      "and",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Draw a bar chart that counts the number of venues of each workshop , and rank by the Y-axis in descending .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC'}",
    "record_name": "3260@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart that counts the number of venues of each workshop , and rank by the Y-axis in descending .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "that",
      "counts",
      "the",
      "number",
      "of",
      "venues",
      "of",
      "each",
      "workshop",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Y-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Venue",
      ")",
      "DESC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Give me the trend about the date_to attributes of all researchers , and bin the date_to into Year interval .",
    "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff', 'binning': 'BIN date_to BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR'}",
    "record_name": "2965",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "year"
      ],
      "vis": 2
    },
    "question": "Give me the trend about the date_to attributes of all researchers , and bin the date_to into Year interval .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "date_to",
      "attributes",
      "of",
      "all",
      "researchers",
      ",",
      "and",
      "bin",
      "the",
      "date_to",
      "into",
      "Year",
      "interval",
      "."
    ],
    "query": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "BIN",
      "date_to",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "For each submission , group its acceptance result and count them Visualize them in a bar chart , and could you order by the Y in desc ?",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC'}",
    "record_name": "3261@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each submission , group its acceptance result and count them Visualize them in a bar chart , and could you order by the Y in desc ?",
    "question_toks": [
      "For",
      "each",
      "submission",
      ",",
      "group",
      "its",
      "acceptance",
      "result",
      "and",
      "count",
      "them",
      "Visualize",
      "them",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "order",
      "by",
      "the",
      "Y",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Give me a histogram showing the famous titles and ages of each artist with the age in descending order .",
    "VQL": "Visualize BAR SELECT Famous_Title , Age FROM artist ORDER BY Age DESC",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Famous_Title , Age FROM artist ORDER BY Age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Famous_Title , Age FROM artist ORDER BY Age DESC'}",
    "record_name": "2437",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram showing the famous titles and ages of each artist with the age in descending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "showing",
      "the",
      "famous",
      "titles",
      "and",
      "ages",
      "of",
      "each",
      "artist",
      "with",
      "the",
      "age",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Famous_Title , Age FROM artist ORDER BY Age DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Famous_Title",
      ",",
      "Age",
      "FROM",
      "artist",
      "ORDER",
      "BY",
      "Age",
      "DESC"
    ],
    "choose_schema": "Table artist, columns = [*,Artist_ID, Artist, Age, Famous_Title, Famous_Release_date]",
    "choose_schema_rat": "Table artist, columns = [*,Artist_ID, Artist, Age, Famous_Title, Famous_Release_date]@SEP@Table volume, columns = [*,Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID]@SEP@Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show me a line chart for how many players enter hall of fame each year ? , and display yearid from high to low order please .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC'}",
    "record_name": "156@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me a line chart for how many players enter hall of fame each year ? , and display yearid from high to low order please .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "line",
      "chart",
      "for",
      "how",
      "many",
      "players",
      "enter",
      "hall",
      "of",
      "fame",
      "each",
      "year",
      "?",
      ",",
      "and",
      "display",
      "yearid",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "DESC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Show the number of gas stations for each manager in a bar chart .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name'}",
    "record_name": "1511",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of gas stations for each manager in a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "gas",
      "stations",
      "for",
      "each",
      "manager",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , and I want to show in desc by the y axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC'}",
    "record_name": "2607@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , and I want to show in desc by the y axis .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart , rank by the how many class in descending .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC'}",
    "record_name": "2750@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart , rank by the how many class in descending .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      "and",
      "class",
      "?",
      "Let",
      "class",
      "as",
      "X-axis",
      ",",
      "and",
      "categorize",
      "by",
      "rank",
      "with",
      "a",
      "stacked",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "how",
      "many",
      "class",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , I want to list in descending by the y-axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC'}",
    "record_name": "2607@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , I want to list in descending by the y-axis .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "I",
      "want",
      "to",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "When do all the researcher role staff start to work ? Bin the time into weekday interval and count them with a bar chart , and display from high to low by the y axis .",
    "VQL": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) DESC BIN date_from BY WEEKDAY",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) DESC', 'binning': 'BIN date_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) DESC BIN date_from BY WEEKDAY'}",
    "record_name": "2962@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "weekday"
      ],
      "vis": 0
    },
    "question": "When do all the researcher role staff start to work ? Bin the time into weekday interval and count them with a bar chart , and display from high to low by the y axis .",
    "question_toks": [
      "When",
      "do",
      "all",
      "the",
      "researcher",
      "role",
      "staff",
      "start",
      "to",
      "work",
      "?",
      "Bin",
      "the",
      "time",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) DESC BIN date_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_from",
      ")",
      "DESC",
      "BIN",
      "date_from",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Staff_Roles, columns = [*,role_code, role_description]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  },
  {
    "nl_queries": "How many home games by each weekday (bin the year attr into weekdays interval) ? Give me a bar chart .",
    "VQL": "Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game', 'binning': 'BIN year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY'}",
    "record_name": "165",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many home games by each weekday (bin the year attr into weekdays interval) ? Give me a bar chart .",
    "question_toks": [
      "How",
      "many",
      "home",
      "games",
      "by",
      "each",
      "weekday",
      "(bin",
      "the",
      "year",
      "attr",
      "into",
      "weekdays",
      "interval)",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "BIN",
      "year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Plot the number of result by grouped by result as a bar graph , and I want to rank from high to low by the X .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC'}",
    "record_name": "2441@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of result by grouped by result as a bar graph , and I want to rank from high to low by the X .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "result",
      "by",
      "grouped",
      "by",
      "result",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show me maximal net worth millions by citizenship in a histogram",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship'}",
    "record_name": "2776",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me maximal net worth millions by citizenship in a histogram",
    "question_toks": [
      "Show",
      "me",
      "maximal",
      "net",
      "worth",
      "millions",
      "by",
      "citizenship",
      "in",
      "a",
      "histogram"
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "A stacked bar graph shows the total number of captains categorize by ranks of different classes , and display in desc by the x-axis .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC'}",
    "record_name": "2750@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A stacked bar graph shows the total number of captains categorize by ranks of different classes , and display in desc by the x-axis .",
    "question_toks": [
      "A",
      "stacked",
      "bar",
      "graph",
      "shows",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "categorize",
      "by",
      "ranks",
      "of",
      "different",
      "classes",
      ",",
      "and",
      "display",
      "in",
      "desc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Plot date to by the number of date to as a trend line , and sort by the x-axis from high to low .",
    "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC BIN date_to BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC', 'binning': 'BIN date_to BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC BIN date_to BY YEAR'}",
    "record_name": "2965@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "year"
      ],
      "vis": 2
    },
    "question": "Plot date to by the number of date to as a trend line , and sort by the x-axis from high to low .",
    "question_toks": [
      "Plot",
      "date",
      "to",
      "by",
      "the",
      "number",
      "of",
      "date",
      "to",
      "as",
      "a",
      "trend",
      "line",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC BIN date_to BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_to",
      "DESC",
      "BIN",
      "date_to",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart , I want to order total number from high to low order .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC'}",
    "record_name": "2774@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart , I want to order total number from high to low order .",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Show the trend about the total average number of attendance at home games change over the years , bin year into year interval , and could you rank in ascending by the year ?",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC'}",
    "record_name": "171@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the total average number of attendance at home games change over the years , bin year into year interval , and could you rank in ascending by the year ?",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "total",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "change",
      "over",
      "the",
      "years",
      ",",
      "bin",
      "year",
      "into",
      "year",
      "interval",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "year",
      "?"
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , list total number in ascending order .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC'}",
    "record_name": "2607@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , list total number in ascending order .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Show the number of companies each investor has invested with a bar chart , and I want to show by the x axis in descending .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC'}",
    "record_name": "1373@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies each investor has invested with a bar chart , and I want to show by the x axis in descending .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , and could you order names in asc order please ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , and could you order names in asc order please ?",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "order",
      "names",
      "in",
      "asc",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Show me a bar chart comparing the total number of captains of different classes , display total number from low to high order .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC'}",
    "record_name": "2753@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart comparing the total number of captains of different classes , display total number from low to high order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "of",
      "different",
      "classes",
      ",",
      "display",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "How many captains with younger than 50 are in each rank . Visualize by pie chart .",
    "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank'}",
    "record_name": "2736",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many captains with younger than 50 are in each rank . Visualize by pie chart .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      ".",
      "Visualize",
      "by",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , I want to list bars in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , I want to list bars in ascending order .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "I",
      "want",
      "to",
      "list",
      "bars",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "What are the different ship flags , and how many ships have each . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag'}",
    "record_name": "2739",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different ship flags , and how many ships have each . Plot them as bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show me a bar chart comparing the total number of captains of different classes , I want to order by the x axis from high to low .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC'}",
    "record_name": "2753@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart comparing the total number of captains of different classes , I want to order by the x axis from high to low .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "of",
      "different",
      "classes",
      ",",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" , and I want to rank y-axis in desc order please .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC'}",
    "record_name": "2439@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" , and I want to rank y-axis in desc order please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "y-axis",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Count the number of players who enter hall of fame for each year Plot them as line chart , and sort x axis from low to high order .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC'}",
    "record_name": "156@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Count the number of players who enter hall of fame for each year Plot them as line chart , and sort x axis from low to high order .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "players",
      "who",
      "enter",
      "hall",
      "of",
      "fame",
      "for",
      "each",
      "year",
      "Plot",
      "them",
      "as",
      "line",
      "chart",
      ",",
      "and",
      "sort",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "ASC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart , and sort by the y-axis from low to high .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC'}",
    "record_name": "2439@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart , and sort by the y-axis from low to high .",
    "question_toks": [
      "Return",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "y-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "When do all the researcher role staff stop working ? Bin the time into weekday interval and count them with a bar chart .",
    "VQL": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY WEEKDAY",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff', 'binning': 'BIN date_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY WEEKDAY'}",
    "record_name": "2963",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "weekday"
      ],
      "vis": 0
    },
    "question": "When do all the researcher role staff stop working ? Bin the time into weekday interval and count them with a bar chart .",
    "question_toks": [
      "When",
      "do",
      "all",
      "the",
      "researcher",
      "role",
      "staff",
      "stop",
      "working",
      "?",
      "Bin",
      "the",
      "time",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "BIN",
      "date_to",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Staff_Roles, columns = [*,role_code, role_description]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  },
  {
    "nl_queries": "bin the yearid into the day of the week interval and count them for visualizing a bar chart , list by the y axis in descending .",
    "VQL": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) DESC BIN yearid BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) DESC', 'binning': 'BIN yearid BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) DESC BIN yearid BY WEEKDAY'}",
    "record_name": "151@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "weekday"
      ],
      "vis": 0
    },
    "question": "bin the yearid into the day of the week interval and count them for visualizing a bar chart , list by the y axis in descending .",
    "question_toks": [
      "bin",
      "the",
      "yearid",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) DESC BIN yearid BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "yearid",
      ")",
      "DESC",
      "BIN",
      "yearid",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]"
  },
  {
    "nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , show bar from high to low order .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC'}",
    "record_name": "2607@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , show bar from high to low order .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "show",
      "bar",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Create a bar chart showing how many location across location , could you rank from high to low by the names ?",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC'}",
    "record_name": "2507@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many location across location , could you rank from high to low by the names ?",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "location",
      "across",
      "location",
      ",",
      "could",
      "you",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "names",
      "?"
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "Location",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "Return a histogram on how many entrepreneurs correspond to each investor ? , and could you list bars from high to low order ?",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC'}",
    "record_name": "1371@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many entrepreneurs correspond to each investor ? , and could you list bars from high to low order ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?",
      ",",
      "and",
      "could",
      "you",
      "list",
      "bars",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter in a pie chart .",
    "VQL": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters'}",
    "record_name": "1497",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "List all headquarters and the number of companies in each headquarter in a pie chart .",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY'}",
    "record_name": "2499",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them .",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , display by the Y in ascending .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , display by the Y in ascending .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "display",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "A pie chart for returning the number of the countries of the mountains that have a height larger than 5000 .",
    "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "489",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart for returning the number of the countries of the mountains that have a height larger than 5000 .",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      "."
    ],
    "query": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Display a pie chart for how many entrepreneurs correspond to each investor ?",
    "VQL": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1370",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Display a pie chart for how many entrepreneurs correspond to each investor ?",
    "question_toks": [
      "Display",
      "a",
      "pie",
      "chart",
      "for",
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?"
    ],
    "query": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Return the number of the countries of the mountains that have a height larger than 5000 , and I want to list y axis from low to high order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC'}",
    "record_name": "490@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of the countries of the mountains that have a height larger than 5000 , and I want to list y axis from low to high order .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "For each submission , group its acceptance result and count them . Visualize them in a bar chart .",
    "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result'}",
    "record_name": "3264",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "For each submission , group its acceptance result and count them . Visualize them in a bar chart .",
    "question_toks": [
      "For",
      "each",
      "submission",
      ",",
      "group",
      "its",
      "acceptance",
      "result",
      "and",
      "count",
      "them",
      ".",
      "Visualize",
      "them",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Plot the number of result by grouped by result as a bar graph , and sort by the Y in descending .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC'}",
    "record_name": "2441@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of result by grouped by result as a bar graph , and sort by the Y in descending .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "result",
      "by",
      "grouped",
      "by",
      "result",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Create a pie chart showing the number of location across location .",
    "VQL": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location'}",
    "record_name": "2506",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing the number of location across location .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "location",
      "across",
      "location",
      "."
    ],
    "query": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Plot the number of result by grouped by result as a bar graph , and show by the y axis in ascending please .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC'}",
    "record_name": "2441@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of result by grouped by result as a bar graph , and show by the y axis in ascending please .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "result",
      "by",
      "grouped",
      "by",
      "result",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show me the trend about what is the average number of attendance at home games for each year ? , sort in asc by the x-axis .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC'}",
    "record_name": "171@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend about what is the average number of attendance at home games for each year ? , sort in asc by the x-axis .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "about",
      "what",
      "is",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "for",
      "each",
      "year",
      "?",
      ",",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]"
  },
  {
    "nl_queries": "What is the average age of captains in different classes ? , and order from low to high by the x-axis .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC'}",
    "record_name": "2740@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average age of captains in different classes ? , and order from low to high by the x-axis .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "different",
      "classes",
      "?",
      ",",
      "and",
      "order",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and display in ascending by the y-axis .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC'}",
    "record_name": "2605@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and display in ascending by the y-axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter , show in descending by the x axis .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC'}",
    "record_name": "1498@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List all headquarters and the number of companies in each headquarter , show in descending by the x axis .",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Find the rank of the companies in the banking industry order by their sales and profits in billion with a bar chart .",
    "VQL": "Visualize BAR SELECT Company , Rank FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Company , Rank FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Company , Rank FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion\"}",
    "record_name": "1499",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Banking\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the rank of the companies in the banking industry order by their sales and profits in billion with a bar chart .",
    "question_toks": [
      "Find",
      "the",
      "rank",
      "of",
      "the",
      "companies",
      "in",
      "the",
      "banking",
      "industry",
      "order",
      "by",
      "their",
      "sales",
      "and",
      "profits",
      "in",
      "billion",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Company , Rank FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Company",
      ",",
      "Rank",
      "FROM",
      "company",
      "WHERE",
      "main_industry",
      "=",
      "'Banking'",
      "ORDER",
      "BY",
      "sales_billion",
      ",",
      "profits_billion"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]@SEP@Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]"
  },
  {
    "nl_queries": "Display a pie chart for how many music festivals have had each kind of result , ordered descending by count ?",
    "VQL": "Visualize PIE SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC'}",
    "record_name": "2433",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Display a pie chart for how many music festivals have had each kind of result , ordered descending by count ?",
    "question_toks": [
      "Display",
      "a",
      "pie",
      "chart",
      "for",
      "how",
      "many",
      "music",
      "festivals",
      "have",
      "had",
      "each",
      "kind",
      "of",
      "result",
      ",",
      "ordered",
      "descending",
      "by",
      "count",
      "?"
    ],
    "query": "Visualize PIE SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "RESULT",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality in a bar chart .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter with a bar chart , could you display by the the total number from high to low ?",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC'}",
    "record_name": "1498@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List all headquarters and the number of companies in each headquarter with a bar chart , could you display by the the total number from high to low ?",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "display",
      "by",
      "the",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Create a bar chart showing the number of author across author , and order y-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC'}",
    "record_name": "3263@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing the number of author across author , and order y-axis from high to low order .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "author",
      "across",
      "author",
      ",",
      "and",
      "order",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Author",
      ")",
      "DESC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the category of music festivals with result \"Awarded\" ? , I want to list x axis in asc order .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC'}",
    "record_name": "2439@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the category of music festivals with result \"Awarded\" ? , I want to list x axis in asc order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?",
      ",",
      "I",
      "want",
      "to",
      "list",
      "x",
      "axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000 , list y axis in descending order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC'}",
    "record_name": "490@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000 , list y axis in descending order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "list",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Draw a bar chart for how many captains with younger than 50 are in each rank ? , sort by the X from low to high .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC'}",
    "record_name": "2737@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for how many captains with younger than 50 are in each rank ? , sort by the X from low to high .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Create a bar chart showing the number of author across author , could you list in asc by the Author ?",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC'}",
    "record_name": "3263@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing the number of author across author , could you list in asc by the Author ?",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "author",
      "across",
      "author",
      ",",
      "could",
      "you",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "Author",
      "?"
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "Author",
      "ASC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]"
  },
  {
    "nl_queries": "What are the number of the category of music festivals with result \"Awarded\" ? , I want to rank y-axis in desc order please .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC'}",
    "record_name": "2439@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the category of music festivals with result \"Awarded\" ? , I want to rank y-axis in desc order please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "y-axis",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show me a bar chart for how many invoices were billed from each state ?",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state'}",
    "record_name": "2856",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many invoices were billed from each state ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "?"
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "List the company name and rank for all companies in the decreasing order of their sales in a bar chart .",
    "VQL": "Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Company , Rank FROM company ORDER BY Sales_billion DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC'}",
    "record_name": "1519",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the company name and rank for all companies in the decreasing order of their sales in a bar chart .",
    "question_toks": [
      "List",
      "the",
      "company",
      "name",
      "and",
      "rank",
      "for",
      "all",
      "companies",
      "in",
      "the",
      "decreasing",
      "order",
      "of",
      "their",
      "sales",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Company",
      ",",
      "Rank",
      "FROM",
      "company",
      "ORDER",
      "BY",
      "Sales_billion",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and display by the Continent from high to low .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC'}",
    "record_name": "3269@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and display by the Continent from high to low .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Continent",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship'}",
    "record_name": "2774",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship . Plot them as bar chart .",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter with a bar chart .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters'}",
    "record_name": "1498",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List all headquarters and the number of companies in each headquarter with a bar chart .",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Plot how many date to by grouped by date to as a bar graph",
    "VQL": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY WEEKDAY",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff', 'binning': 'BIN date_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY WEEKDAY'}",
    "record_name": "2963",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Plot how many date to by grouped by date to as a bar graph",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "date",
      "to",
      "by",
      "grouped",
      "by",
      "date",
      "to",
      "as",
      "a",
      "bar",
      "graph"
    ],
    "query": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "BIN",
      "date_to",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "Create a pie chart showing the number of result across result .",
    "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result'}",
    "record_name": "2440",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing the number of result across result .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "result",
      "across",
      "result",
      "."
    ],
    "query": "Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "What is the distibution of results for each music festival ? Could you show me the result with a bar chart , show by the y axis in ascending please .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC'}",
    "record_name": "2441@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the distibution of results for each music festival ? Could you show me the result with a bar chart , show by the y axis in ascending please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "distibution",
      "of",
      "results",
      "for",
      "each",
      "music",
      "festival",
      "?",
      "Could",
      "you",
      "show",
      "me",
      "the",
      "result",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Give me a pie to show the number of rank from different rank .",
    "VQL": "Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank'}",
    "record_name": "2754",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show the number of rank from different rank .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "the",
      "number",
      "of",
      "rank",
      "from",
      "different",
      "rank",
      "."
    ],
    "query": "Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Can you give me a bar chart to show the name and membership level of the visitors whose membership level is higher than 4 , could you order by the y-axis in asc please ?",
    "VQL": "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership ASC",
    "db_id": "museum_visit",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership ASC'}",
    "record_name": "2417@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you give me a bar chart to show the name and membership level of the visitors whose membership level is higher than 4 , could you order by the y-axis in asc please ?",
    "question_toks": [
      "Can",
      "you",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "could",
      "you",
      "order",
      "by",
      "the",
      "y-axis",
      "in",
      "asc",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Level_of_membership",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4",
      "ORDER",
      "BY",
      "Level_of_membership",
      "ASC"
    ],
    "choose_schema": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visitor, columns = [*,ID, Name, Level_of_membership, Age]",
    "choose_schema_rat": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visit, columns = [*,Museum_ID, visitor_ID, Num_of_Ticket, Total_spent]"
  },
  {
    "nl_queries": "Return a pie on what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ?",
    "VQL": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1370",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return a pie on what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ?",
    "question_toks": [
      "Return",
      "a",
      "pie",
      "on",
      "what",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      "?"
    ],
    "query": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , and order in descending by the X-axis .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC'}",
    "record_name": "2776@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , and order in descending by the X-axis .",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category in a bar chart , could you show by the Y in asc ?",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC'}",
    "record_name": "2436@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of music festivals of each category in a bar chart , could you show by the Y in asc ?",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "show",
      "by",
      "the",
      "Y",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "How many gas stations dors each manager have ? Plot a bar chart , and I want to list in asc by the y-axis .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC'}",
    "record_name": "1511@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many gas stations dors each manager have ? Plot a bar chart , and I want to list in asc by the y-axis .",
    "question_toks": [
      "How",
      "many",
      "gas",
      "stations",
      "dors",
      "each",
      "manager",
      "have",
      "?",
      "Plot",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show all main industry and total market value in each industry by a bar chart , display x-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC'}",
    "record_name": "1508@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all main industry and total market value in each industry by a bar chart , display x-axis from high to low order .",
    "question_toks": [
      "Show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort by the sum population in asc .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort by the sum population in asc .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "sum",
      "population",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , order by the bars in ascending .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC'}",
    "record_name": "3269@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , order by the bars in ascending .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "order",
      "by",
      "the",
      "bars",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Return the number of the categories of music festivals that have the result \"Awarded\" , show from low to high by the y axis .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC'}",
    "record_name": "2439@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of the categories of music festivals that have the result \"Awarded\" , show from low to high by the y axis .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries by a bar chart .",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the names and surface areas of the 5 largest countries by a bar chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and display from high to low by the Y .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and display from high to low by the Y .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "Bar chart of the total number from each country , sort by the Y in ascending .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC'}",
    "record_name": "485@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each country , sort by the Y in ascending .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "country",
      ",",
      "sort",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Return a histogram on how many entrepreneurs correspond to each investor ? , and I want to sort from low to high by the Y-axis .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC'}",
    "record_name": "1371@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many entrepreneurs correspond to each investor ? , and I want to sort from low to high by the Y-axis .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "A bar chart shows the venue for each workshop , and could you display Y from low to high order please ?",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC'}",
    "record_name": "3260@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart shows the venue for each workshop , and could you display Y from low to high order please ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "venue",
      "for",
      "each",
      "workshop",
      ",",
      "and",
      "could",
      "you",
      "display",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Venue",
      ")",
      "ASC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , and list in asc by the sum population .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , and list in asc by the sum population .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "and",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "sum",
      "population",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the countries of mountains with height bigger than 5000 ? , order by the Y-axis in asc .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC'}",
    "record_name": "490@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the countries of mountains with height bigger than 5000 ? , order by the Y-axis in asc .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?",
      ",",
      "order",
      "by",
      "the",
      "Y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Give me a histogram for how many climbers are from each country ? , I want to show by the X-axis from low to high please .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "485@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for how many climbers are from each country ? , I want to show by the X-axis from low to high please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Return a bar chart on what are the different ship flags , and how many ships have each ? , order from high to low by the X .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC'}",
    "record_name": "2739@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on what are the different ship flags , and how many ships have each ? , order from high to low by the X .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "Flag",
      "DESC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show the trend about the total average number of attendance at home games change over the years , bin year into year interval , and I want to list by the X in desc please .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC'}",
    "record_name": "171@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the total average number of attendance at home games change over the years , bin year into year interval , and I want to list by the X in desc please .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "total",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "change",
      "over",
      "the",
      "years",
      ",",
      "bin",
      "year",
      "into",
      "year",
      "interval",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "by",
      "the",
      "X",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank , and rank in ascending by the Rank .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC'}",
    "record_name": "2737@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains younger than 50 of each rank , and rank in ascending by the Rank .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      ",",
      "and",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "Rank",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and show from high to low by the x-axis .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC'}",
    "record_name": "2605@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and show from high to low by the x-axis .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Give me a pie to show the number of author from different author .",
    "VQL": "Visualize PIE SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Author , COUNT(Author) FROM submission GROUP BY Author'}",
    "record_name": "3262",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show the number of author from different author .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "the",
      "number",
      "of",
      "author",
      "from",
      "different",
      "author",
      "."
    ],
    "query": "Visualize PIE SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]"
  },
  {
    "nl_queries": "Return the number of the categories of music festivals that have the result \"Awarded\" , and show by the names in asc .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC'}",
    "record_name": "2439@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of the categories of music festivals that have the result \"Awarded\" , and show by the names in asc .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "show",
      "by",
      "the",
      "names",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Give me a bar chart , that group by location and count them , and sort by the the number of location from low to high please .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC'}",
    "record_name": "2507@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart , that group by location and count them , and sort by the the number of location from low to high please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "that",
      "group",
      "by",
      "location",
      "and",
      "count",
      "them",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "the",
      "number",
      "of",
      "location",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Location",
      ")",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Visualize a bar chart showing the average age of captains in each class , order in asc by the Y-axis .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC'}",
    "record_name": "2740@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart showing the average age of captains in each class , order in asc by the Y-axis .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "avg",
      "(",
      "age",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Return the average age of captains in each class with a pie chart .",
    "VQL": "Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS'}",
    "record_name": "2744",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the average age of captains in each class with a pie chart .",
    "question_toks": [
      "Return",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "What are the number of the countries of mountains with height bigger than 5000 ? , I want to rank by the Y-axis from low to high .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC'}",
    "record_name": "490@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the countries of mountains with height bigger than 5000 ? , I want to rank by the Y-axis from low to high .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Count the total number of different locations of parties using a pie chart .",
    "VQL": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location'}",
    "record_name": "2506",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Count the total number of different locations of parties using a pie chart .",
    "question_toks": [
      "Count",
      "the",
      "total",
      "number",
      "of",
      "different",
      "locations",
      "of",
      "parties",
      "using",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Bar chart of the total number from each headquarters , order in asc by the Headquarters .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC'}",
    "record_name": "1498@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each headquarters , order in asc by the Headquarters .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "headquarters",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "Headquarters",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return a pie on how many music festivals have had each kind of result , ordered descending by count ?",
    "VQL": "Visualize PIE SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC'}",
    "record_name": "2433",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return a pie on how many music festivals have had each kind of result , ordered descending by count ?",
    "question_toks": [
      "Return",
      "a",
      "pie",
      "on",
      "how",
      "many",
      "music",
      "festivals",
      "have",
      "had",
      "each",
      "kind",
      "of",
      "result",
      ",",
      "ordered",
      "descending",
      "by",
      "count",
      "?"
    ],
    "query": "Visualize PIE SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "RESULT",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Visualize a bar chart for how many authors submit to the workshop , and rank in desc by the Y-axis .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC'}",
    "record_name": "3263@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for how many authors submit to the workshop , and rank in desc by the Y-axis .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "authors",
      "submit",
      "to",
      "the",
      "workshop",
      ",",
      "and",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Author",
      ")",
      "DESC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "bin the yearid into the day of the week interval and count them for visualizing a bar chart .",
    "VQL": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame', 'binning': 'BIN yearid BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY WEEKDAY'}",
    "record_name": "151",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "weekday"
      ],
      "vis": 0
    },
    "question": "bin the yearid into the day of the week interval and count them for visualizing a bar chart .",
    "question_toks": [
      "bin",
      "the",
      "yearid",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "BIN",
      "yearid",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]"
  },
  {
    "nl_queries": "Plot year by the average of attendance as a line chart , order X-axis in desc order please .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC'}",
    "record_name": "171@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Plot year by the average of attendance as a line chart , order X-axis in desc order please .",
    "question_toks": [
      "Plot",
      "year",
      "by",
      "the",
      "average",
      "of",
      "attendance",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "order",
      "X-axis",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Return the number of venues of each workshop in a bar chart , display by the X in desc please .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC'}",
    "record_name": "3260@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of venues of each workshop in a bar chart , display by the X in desc please .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "venues",
      "of",
      "each",
      "workshop",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "X",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "Venue",
      "DESC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Return me a line chart to show the frequency of the year attribute by binning into a weekday interval , list by the x-axis in desc .",
    "VQL": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC BIN year BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC', 'binning': 'BIN year BY YEAR'}, 'VQL': 'Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC BIN year BY YEAR'}",
    "record_name": "166@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "year"
      ],
      "vis": 2
    },
    "question": "Return me a line chart to show the frequency of the year attribute by binning into a weekday interval , list by the x-axis in desc .",
    "question_toks": [
      "Return",
      "me",
      "a",
      "line",
      "chart",
      "to",
      "show",
      "the",
      "frequency",
      "of",
      "the",
      "year",
      "attribute",
      "by",
      "binning",
      "into",
      "a",
      "weekday",
      "interval",
      ",",
      "list",
      "by",
      "the",
      "x-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC BIN year BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "year",
      "DESC",
      "BIN",
      "year",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah , I want to rank in descending by the Y .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC'}",
    "record_name": "2497@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah , I want to rank in descending by the Y .",
    "question_toks": [
      "Count",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "grpah",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "List the name of all playlist , and count them by a bar chart , show by the y axis from low to high .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC'}",
    "record_name": "2855@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the name of all playlist , and count them by a bar chart , show by the y axis from low to high .",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Return a pie on what are the names and areas of countries with the top 5 largest area ?",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return a pie on what are the names and areas of countries with the top 5 largest area ?",
    "question_toks": [
      "Return",
      "a",
      "pie",
      "on",
      "what",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "how many entrepreneurs correspond to each investor ? , and rank Y-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC'}",
    "record_name": "1371@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "how many entrepreneurs correspond to each investor ? , and rank Y-axis from high to low order .",
    "question_toks": [
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?",
      ",",
      "and",
      "rank",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "For each citizenship , what is the maximum net worth . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship'}",
    "record_name": "2776",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each citizenship , what is the maximum net worth . Visualize by bar chart .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "what",
      "is",
      "the",
      "maximum",
      "net",
      "worth",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Return a histogram on how many invoices were billed from each state ? , and rank by the the total number in descending please .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC'}",
    "record_name": "2856@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many invoices were billed from each state ? , and rank by the the total number in descending please .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "?",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Show the authors of their total submissions with a bar chart , display from low to high by the y-axis .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC'}",
    "record_name": "3263@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the authors of their total submissions with a bar chart , display from low to high by the y-axis .",
    "question_toks": [
      "Show",
      "the",
      "authors",
      "of",
      "their",
      "total",
      "submissions",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Author",
      ")",
      "ASC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Compare the total number of captains with different classes using a bar graph , and display total number from low to high order .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC'}",
    "record_name": "2753@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of captains with different classes using a bar graph , and display total number from low to high order .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "with",
      "different",
      "classes",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "display",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Give me the trend about the date_to attributes of all researchers , and bin the date_to into Year interval , display by the x-axis from low to high .",
    "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC BIN date_to BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC', 'binning': 'BIN date_to BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC BIN date_to BY YEAR'}",
    "record_name": "2965@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "year"
      ],
      "vis": 2
    },
    "question": "Give me the trend about the date_to attributes of all researchers , and bin the date_to into Year interval , display by the x-axis from low to high .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "date_to",
      "attributes",
      "of",
      "all",
      "researchers",
      ",",
      "and",
      "bin",
      "the",
      "date_to",
      "into",
      "Year",
      "interval",
      ",",
      "display",
      "by",
      "the",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC BIN date_to BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_to",
      "ASC",
      "BIN",
      "date_to",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "Show the total number from each rank",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank'}",
    "record_name": "2747",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number from each rank",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "from",
      "each",
      "rank"
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter , I want to list Y in asc order .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC'}",
    "record_name": "1498@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List all headquarters and the number of companies in each headquarter , I want to list Y in asc order .",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      ",",
      "I",
      "want",
      "to",
      "list",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ?",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1371",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      "?"
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year', 'binning': ''}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year'}",
    "record_name": "2496",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "First_year"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the countries of mountains with height bigger than 5000 ? , and show from high to low by the total number .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC'}",
    "record_name": "490@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the countries of mountains with height bigger than 5000 ? , and show from high to low by the total number .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "How many home games by each weekday (bin the year attr into weekdays interval) ? Give me a bar chart , and rank by the Y-axis from low to high .",
    "VQL": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC BIN year BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC', 'binning': 'BIN year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC BIN year BY WEEKDAY'}",
    "record_name": "165@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many home games by each weekday (bin the year attr into weekdays interval) ? Give me a bar chart , and rank by the Y-axis from low to high .",
    "question_toks": [
      "How",
      "many",
      "home",
      "games",
      "by",
      "each",
      "weekday",
      "(bin",
      "the",
      "year",
      "attr",
      "into",
      "weekdays",
      "interval)",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC BIN year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "year",
      ")",
      "ASC",
      "BIN",
      "year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "What are the number of the category of music festivals with result \"Awarded\" ? , could you order in ascending by the X-axis ?",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC'}",
    "record_name": "2439@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the category of music festivals with result \"Awarded\" ? , could you order in ascending by the X-axis ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?",
      ",",
      "could",
      "you",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "X-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , and sort X-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , and sort X-axis from high to low order .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Find the market values of the companies in the banking industry with a pie chart .",
    "VQL": "Visualize PIE SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': \"SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'\", 'binning': ''}, 'VQL': \"Visualize PIE SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'\"}",
    "record_name": "1500",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Banking\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Find the market values of the companies in the banking industry with a pie chart .",
    "question_toks": [
      "Find",
      "the",
      "market",
      "values",
      "of",
      "the",
      "companies",
      "in",
      "the",
      "banking",
      "industry",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Company",
      ",",
      "Market_Value",
      "FROM",
      "company",
      "WHERE",
      "main_industry",
      "=",
      "'Banking'"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Create a bar chart showing how many location across location",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location'}",
    "record_name": "2507",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many location across location",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "location",
      "across",
      "location"
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "What are the famous titles and ages of each artist , listed in descending order by age using a bar chart .",
    "VQL": "Visualize BAR SELECT Famous_Title , Age FROM artist ORDER BY Age DESC",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Famous_Title , Age FROM artist ORDER BY Age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Famous_Title , Age FROM artist ORDER BY Age DESC'}",
    "record_name": "2437",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the famous titles and ages of each artist , listed in descending order by age using a bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "famous",
      "titles",
      "and",
      "ages",
      "of",
      "each",
      "artist",
      ",",
      "listed",
      "in",
      "descending",
      "order",
      "by",
      "age",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Famous_Title , Age FROM artist ORDER BY Age DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Famous_Title",
      ",",
      "Age",
      "FROM",
      "artist",
      "ORDER",
      "BY",
      "Age",
      "DESC"
    ],
    "choose_schema": "Table artist, columns = [*,Artist_ID, Artist, Age, Famous_Title, Famous_Release_date]",
    "choose_schema_rat": "Table artist, columns = [*,Artist_ID, Artist, Age, Famous_Title, Famous_Release_date]@SEP@Table volume, columns = [*,Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID]@SEP@Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , list in desc by the x-axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC'}",
    "record_name": "2607@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , list in desc by the x-axis .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Show the authors of their total submissions with a pie chart .",
    "VQL": "Visualize PIE SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Author , COUNT(Author) FROM submission GROUP BY Author'}",
    "record_name": "3262",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show the authors of their total submissions with a pie chart .",
    "question_toks": [
      "Show",
      "the",
      "authors",
      "of",
      "their",
      "total",
      "submissions",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor . Visualize by pie chart .",
    "VQL": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1370",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor . Visualize by pie chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      ".",
      "Visualize",
      "by",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "I want to know the proportion of the sum market value for each main industry .",
    "VQL": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
    "record_name": "1507",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of the sum market value for each main industry .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "the",
      "sum",
      "market",
      "value",
      "for",
      "each",
      "main",
      "industry",
      "."
    ],
    "query": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What are the different ship flags , and how many ships have each Plot them as bar chart , and order x-axis in desc order .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC'}",
    "record_name": "2739@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different ship flags , and how many ships have each Plot them as bar chart , and order x-axis in desc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "x-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "Flag",
      "DESC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter , and order the total number in desc order .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC'}",
    "record_name": "1498@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List all headquarters and the number of companies in each headquarter , and order the total number in desc order .",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      ",",
      "and",
      "order",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show me a pie chart comparing the total number of captains in each class .",
    "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class'}",
    "record_name": "2752",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me a pie chart comparing the total number of captains in each class .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "pie",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "class",
      "."
    ],
    "query": "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different ship flags , and how many ships have each ? , rank by the X-axis in desc .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC'}",
    "record_name": "2739@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different ship flags , and how many ships have each ? , rank by the X-axis in desc .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?",
      ",",
      "rank",
      "by",
      "the",
      "X-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "Flag",
      "DESC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3269",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Return the number of the countries of the mountains that have a height larger than 5000 , display from high to low by the bar .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "490@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of the countries of the mountains that have a height larger than 5000 , display from high to low by the bar .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "How many companies in each headquarter ? Plot a pie chart .",
    "VQL": "Visualize PIE SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters'}",
    "record_name": "1517",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many companies in each headquarter ? Plot a pie chart .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "in",
      "each",
      "headquarter",
      "?",
      "Plot",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show the total number from each flag , and order from high to low by the X .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC'}",
    "record_name": "2739@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number from each flag , and order from high to low by the X .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "from",
      "each",
      "flag",
      ",",
      "and",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "Flag",
      "DESC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "A bar chart shows the venue for each workshop , could you sort from low to high by the names ?",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC'}",
    "record_name": "3260@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart shows the venue for each workshop , could you sort from low to high by the names ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "venue",
      "for",
      "each",
      "workshop",
      ",",
      "could",
      "you",
      "sort",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "names",
      "?"
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "Venue",
      "ASC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart , I want to rank y axis in desc order .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC'}",
    "record_name": "2497@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart , I want to rank y axis in desc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Count",
      "the",
      "last",
      "year",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "y",
      "axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "plot scatter on what is the total amount of grant money given to each organization and what is its id ?",
    "VQL": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id'}",
    "record_name": "2961",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "plot scatter on what is the total amount of grant money given to each organization and what is its id ?",
    "question_toks": [
      "plot",
      "scatter",
      "on",
      "what",
      "is",
      "the",
      "total",
      "amount",
      "of",
      "grant",
      "money",
      "given",
      "to",
      "each",
      "organization",
      "and",
      "what",
      "is",
      "its",
      "id",
      "?"
    ],
    "query": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "grant_amount",
      ")",
      ",",
      "organisation_id",
      "FROM",
      "Grants",
      "GROUP",
      "BY",
      "organisation_id"
    ],
    "choose_schema": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]",
    "choose_schema_rat": "Table Documents, columns = [*,document_id, document_type_code, grant_id, sent_date, response_received_date, other_details]@SEP@Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]"
  },
  {
    "nl_queries": "How many captains are in each rank , show in desc by the Y-axis .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC'}",
    "record_name": "2747@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many captains are in each rank , show in desc by the Y-axis .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      ",",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank Visualize by bar chart , and show in desc by the Rank please .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC'}",
    "record_name": "2747@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains that have each rank Visualize by bar chart , and show in desc by the Rank please .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "Rank",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Plot how many class by grouped by class as a bar graph , and show by the Y-axis in asc .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC'}",
    "record_name": "2753@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot how many class by grouped by class as a bar graph , and show by the Y-axis in asc .",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "class",
      "by",
      "grouped",
      "by",
      "class",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "show",
      "by",
      "the",
      "Y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Bar chart of the total number from each headquarters",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters'}",
    "record_name": "1498",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each headquarters",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "headquarters"
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Visualize a bar chart for how many authors submit to the workshop , order total number from low to high order .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC'}",
    "record_name": "3263@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for how many authors submit to the workshop , order total number from low to high order .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "authors",
      "submit",
      "to",
      "the",
      "workshop",
      ",",
      "order",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Author",
      ")",
      "ASC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Show the total number from each rank , and list the total number from high to low order .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC'}",
    "record_name": "2747@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number from each rank , and list the total number from high to low order .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "from",
      "each",
      "rank",
      ",",
      "and",
      "list",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , display by the Y in ascending .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , display by the Y in ascending .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "What are the names of all the playlists , and count them by a bar chart , and show by the y axis from low to high .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC'}",
    "record_name": "2855@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names of all the playlists , and count them by a bar chart , and show by the y axis from low to high .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Show all main industry and total market value in each industry by a bar chart , show in asc by the x-axis .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC'}",
    "record_name": "1508@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all main industry and total market value in each industry by a bar chart , show in asc by the x-axis .",
    "question_toks": [
      "Show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return the number of the categories of music festivals that have the result \"Awarded\" .",
    "VQL": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2438",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the number of the categories of music festivals that have the result \"Awarded\" .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      "."
    ],
    "query": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "What is the total number of captains with different classes ? , show by the Class in ascending .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC'}",
    "record_name": "2753@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of captains with different classes ? , show by the Class in ascending .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "with",
      "different",
      "classes",
      "?",
      ",",
      "show",
      "by",
      "the",
      "Class",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Plot how many class by grouped by class as a bar graph , and rank total number from high to low order please .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC'}",
    "record_name": "2753@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot how many class by grouped by class as a bar graph , and rank total number from high to low order please .",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "class",
      "by",
      "grouped",
      "by",
      "class",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "rank",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , list by the x axis in desc .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC'}",
    "record_name": "2605@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , list by the x axis in desc .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "list",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Show me the total number by citizenship in a histogram , could you list by the Y-axis in ascending please ?",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC'}",
    "record_name": "2774@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the total number by citizenship in a histogram , could you list by the Y-axis in ascending please ?",
    "question_toks": [
      "Show",
      "me",
      "the",
      "total",
      "number",
      "by",
      "citizenship",
      "in",
      "a",
      "histogram",
      ",",
      "could",
      "you",
      "list",
      "by",
      "the",
      "Y-axis",
      "in",
      "ascending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Visualize the general trend of how many year over the year .",
    "VQL": "Visualize LINE SELECT year , COUNT(year) FROM home_game BIN year BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game', 'binning': 'BIN year BY YEAR'}, 'VQL': 'Visualize LINE SELECT year , COUNT(year) FROM home_game BIN year BY YEAR'}",
    "record_name": "166",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "year"
      ],
      "vis": 2
    },
    "question": "Visualize the general trend of how many year over the year .",
    "question_toks": [
      "Visualize",
      "the",
      "general",
      "trend",
      "of",
      "how",
      "many",
      "year",
      "over",
      "the",
      "year",
      "."
    ],
    "query": "Visualize LINE SELECT year , COUNT(year) FROM home_game BIN year BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "BIN",
      "year",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Plot how many class by grouped by class as a bar graph , order in asc by the Class .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC'}",
    "record_name": "2753@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot how many class by grouped by class as a bar graph , order in asc by the Class .",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "class",
      "by",
      "grouped",
      "by",
      "class",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "Class",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "I want to see trend of the total number by yearid , and order by the X-axis from low to high .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC'}",
    "record_name": "156@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend of the total number by yearid , and order by the X-axis from low to high .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "total",
      "number",
      "by",
      "yearid",
      ",",
      "and",
      "order",
      "by",
      "the",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "ASC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]"
  },
  {
    "nl_queries": "Return the results of all music festivals using a bar chart , and I want to rank x-axis from low to high order .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC'}",
    "record_name": "2441@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the results of all music festivals using a bar chart , and I want to rank x-axis from low to high order .",
    "question_toks": [
      "Return",
      "the",
      "results",
      "of",
      "all",
      "music",
      "festivals",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 .",
    "VQL": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2604",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Create a bar chart showing how many location across location , sort X from low to high order please .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC'}",
    "record_name": "2507@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many location across location , sort X from low to high order please .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "location",
      "across",
      "location",
      ",",
      "sort",
      "X",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "Location",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2605",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10"
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "When do all the researcher role staff start to work ? Bin the time into YEAR interval and count them with a line chart , and order from low to high by the date_from please .",
    "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC', 'binning': 'BIN date_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR'}",
    "record_name": "2964@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "year"
      ],
      "vis": 2
    },
    "question": "When do all the researcher role staff start to work ? Bin the time into YEAR interval and count them with a line chart , and order from low to high by the date_from please .",
    "question_toks": [
      "When",
      "do",
      "all",
      "the",
      "researcher",
      "role",
      "staff",
      "start",
      "to",
      "work",
      "?",
      "Bin",
      "the",
      "time",
      "into",
      "YEAR",
      "interval",
      "and",
      "count",
      "them",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "order",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "date_from",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_from",
      "ASC",
      "BIN",
      "date_from",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Staff_Roles, columns = [*,role_code, role_description]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  },
  {
    "nl_queries": "What are the category of music festivals with result \"Awarded\" , and count them by a bar chart , and show by the Y-axis from high to low .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC'}",
    "record_name": "2439@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the category of music festivals with result \"Awarded\" , and count them by a bar chart , and show by the Y-axis from high to low .",
    "question_toks": [
      "What",
      "are",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship in a pie chart .",
    "VQL": "Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship'}",
    "record_name": "2773",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a pie chart .",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "How many invoices were billed from each state Plot them as bar chart , and rank by the the total number in descending please .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC'}",
    "record_name": "2856@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many invoices were billed from each state Plot them as bar chart , and rank by the the total number in descending please .",
    "question_toks": [
      "How",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "I want to see trend of the total number by yearid , display yearid from high to low order please .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC'}",
    "record_name": "156@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend of the total number by yearid , display yearid from high to low order please .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "total",
      "number",
      "by",
      "yearid",
      ",",
      "display",
      "yearid",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "DESC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]"
  },
  {
    "nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2607",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "What are the main indstries and total market value for each industry . Plot them as pie chart .",
    "VQL": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
    "record_name": "1507",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the main indstries and total market value for each industry . Plot them as pie chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      ".",
      "Plot",
      "them",
      "as",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "List the number of the name of all playlist , display by the x-axis from high to low please .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC'}",
    "record_name": "2855@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the name of all playlist , display by the x-axis from high to low please .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "display",
      "by",
      "the",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , could you sort bars in desc order ?",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC'}",
    "record_name": "2607@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , could you sort bars in desc order ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "could",
      "you",
      "sort",
      "bars",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "How many players enter hall of fame each year Show the tendency , and I want to list by the X from low to high .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC'}",
    "record_name": "156@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "How many players enter hall of fame each year Show the tendency , and I want to list by the X from low to high .",
    "question_toks": [
      "How",
      "many",
      "players",
      "enter",
      "hall",
      "of",
      "fame",
      "each",
      "year",
      "Show",
      "the",
      "tendency",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "ASC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Show the number of companies in each headquarter with a bar chart , and order by the the number of headquarters in desc .",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC'}",
    "record_name": "1518@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies in each headquarter with a bar chart , and order by the the number of headquarters in desc .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "the",
      "number",
      "of",
      "headquarters",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , show by the x axis from low to high .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC'}",
    "record_name": "2776@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , show by the x axis from low to high .",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Bar graph to show the number of rank from different rank",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank'}",
    "record_name": "2751",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of rank from different rank",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "rank",
      "from",
      "different",
      "rank"
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3269",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship'}",
    "record_name": "2776",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart .",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Bar graph to show how many result from different result , and rank in ascending by the Y-axis .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC'}",
    "record_name": "3261@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show how many result from different result , and rank in ascending by the Y-axis .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "result",
      "from",
      "different",
      "result",
      ",",
      "and",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Bar chart of how many headquarters from each headquarters , and list in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC'}",
    "record_name": "1518@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of how many headquarters from each headquarters , and list in ascending by the y axis .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "how",
      "many",
      "headquarters",
      "from",
      "each",
      "headquarters",
      ",",
      "and",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category , order from high to low by the Y .",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC'}",
    "record_name": "2436@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of music festivals of each category , order from high to low by the Y .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , display in descending by the Y .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , display in descending by the Y .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Plot how many date from by grouped by date from as a bar graph , list Y in asc order .",
    "VQL": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) ASC BIN date_from BY WEEKDAY",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) ASC', 'binning': 'BIN date_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) ASC BIN date_from BY WEEKDAY'}",
    "record_name": "2962@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Plot how many date from by grouped by date from as a bar graph , list Y in asc order .",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "date",
      "from",
      "by",
      "grouped",
      "by",
      "date",
      "from",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "list",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) ASC BIN date_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_from",
      ")",
      "ASC",
      "BIN",
      "date_from",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "List the number of the research staff details , and order in ascending order .",
    "VQL": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC'}",
    "record_name": "2960",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          36,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the research staff details , and order in ascending order .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "research",
      "staff",
      "details",
      ",",
      "and",
      "order",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "staff_details",
      ",",
      "COUNT",
      "(",
      "staff_details",
      ")",
      "FROM",
      "Research_Staff",
      "GROUP",
      "BY",
      "staff_details",
      "ORDER",
      "BY",
      "staff_details",
      "ASC"
    ],
    "choose_schema": "Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]",
    "choose_schema_rat": "Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]@SEP@Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "A bar chart about what are the main indstries and total market value for each industry ? , sort by the Y-axis in desc .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC'}",
    "record_name": "1508@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the main indstries and total market value for each industry ? , sort by the Y-axis in desc .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return me a line chart to show the frequency of the year attribute by binning into a weekday interval .",
    "VQL": "Visualize LINE SELECT year , COUNT(year) FROM home_game BIN year BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game', 'binning': 'BIN year BY YEAR'}, 'VQL': 'Visualize LINE SELECT year , COUNT(year) FROM home_game BIN year BY YEAR'}",
    "record_name": "166",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "year"
      ],
      "vis": 2
    },
    "question": "Return me a line chart to show the frequency of the year attribute by binning into a weekday interval .",
    "question_toks": [
      "Return",
      "me",
      "a",
      "line",
      "chart",
      "to",
      "show",
      "the",
      "frequency",
      "of",
      "the",
      "year",
      "attribute",
      "by",
      "binning",
      "into",
      "a",
      "weekday",
      "interval",
      "."
    ],
    "query": "Visualize LINE SELECT year , COUNT(year) FROM home_game BIN year BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "BIN",
      "year",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Please give me a bar chart to show the distribution of results of all music festival .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result'}",
    "record_name": "2441",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please give me a bar chart to show the distribution of results of all music festival .",
    "question_toks": [
      "Please",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "distribution",
      "of",
      "results",
      "of",
      "all",
      "music",
      "festival",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "A bar chart shows the venue for each workshop .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue'}",
    "record_name": "3260",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart shows the venue for each workshop .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "venue",
      "for",
      "each",
      "workshop",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "What are the names of the countries and average invoice size of the top countries by size .",
    "VQL": "Visualize BAR SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10'}",
    "record_name": "2851",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          44,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              46,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names of the countries and average invoice size of the top countries by size .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "countries",
      "and",
      "average",
      "invoice",
      "size",
      "of",
      "the",
      "top",
      "countries",
      "by",
      "size",
      "."
    ],
    "query": "Visualize BAR SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_country",
      ",",
      "AVG",
      "(",
      "total",
      ")",
      "FROM",
      "invoices",
      "GROUP",
      "BY",
      "billing_country",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "total",
      ")",
      "DESC",
      "LIMIT",
      "10"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]@SEP@Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]"
  },
  {
    "nl_queries": "Give me a histogram for how many climbers are from each country ? , and show by the y axis from low to high .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC'}",
    "record_name": "485@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for how many climbers are from each country ? , and show by the y axis from low to high .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "and",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "I want to know the proportion of the maximum net worth for each citizenship .",
    "VQL": "Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship'}",
    "record_name": "2775",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of the maximum net worth for each citizenship .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "the",
      "maximum",
      "net",
      "worth",
      "for",
      "each",
      "citizenship",
      "."
    ],
    "query": "Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart , and rank in asc by the X .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC'}",
    "record_name": "2774@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart , and rank in asc by the X .",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "in",
      "asc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Compare the total number of captains with different classes using a bar graph , and order from high to low by the the number of class .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC'}",
    "record_name": "2753@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of captains with different classes using a bar graph , and order from high to low by the the number of class .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "with",
      "different",
      "classes",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "the",
      "number",
      "of",
      "class",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart , sort by the x axis from low to high .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart , sort by the x axis from low to high .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "ASC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "Display a bar chart for how many climbers are from each country ? , rank Country in desc order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "485@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many climbers are from each country ? , rank Country in desc order .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "rank",
      "Country",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "I want to know the proportion of the total number for each result .",
    "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result'}",
    "record_name": "3264",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of the total number for each result .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "number",
      "for",
      "each",
      "result",
      "."
    ],
    "query": "Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Draw a bar chart of main industry versus total number of market value , and order in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC'}",
    "record_name": "1508@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of main industry versus total number of market value , and order in ascending by the y axis .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "main",
      "industry",
      "versus",
      "total",
      "number",
      "of",
      "market",
      "value",
      ",",
      "and",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Stacked bar of class and the number of class colored by Rank , and order in ascending by the Y-axis .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC'}",
    "record_name": "2750@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar of class and the number of class colored by Rank , and order in ascending by the Y-axis .",
    "question_toks": [
      "Stacked",
      "bar",
      "of",
      "class",
      "and",
      "the",
      "number",
      "of",
      "class",
      "colored",
      "by",
      "Rank",
      ",",
      "and",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Visualize a bar chart showing the average age of captains in each class .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS'}",
    "record_name": "2740",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart showing the average age of captains in each class .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Can you draw the trend of how many date from over the date from ? , and display in ascending by the X .",
    "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC', 'binning': 'BIN date_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR'}",
    "record_name": "2964@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "year"
      ],
      "vis": 2
    },
    "question": "Can you draw the trend of how many date from over the date from ? , and display in ascending by the X .",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "the",
      "trend",
      "of",
      "how",
      "many",
      "date",
      "from",
      "over",
      "the",
      "date",
      "from",
      "?",
      ",",
      "and",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_from",
      "ASC",
      "BIN",
      "date_from",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the countries of mountains with height bigger than 5000 ? , could you show in descending by the Country ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "490@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the countries of mountains with height bigger than 5000 ? , could you show in descending by the Country ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?",
      ",",
      "could",
      "you",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "Country",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Bar chart x axis nationality y axis the total number , sort in descending by the total number please .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis nationality y axis the total number , sort in descending by the total number please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "nationality",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "total",
      "number",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "What is the average age of captains in different classes ? , and could you order in descending by the mean age please ?",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC'}",
    "record_name": "2740@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average age of captains in different classes ? , and could you order in descending by the mean age please ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "different",
      "classes",
      "?",
      ",",
      "and",
      "could",
      "you",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "mean",
      "age",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "avg",
      "(",
      "age",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2439",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Bar chart x axis date of latest revision y axis the number of date of latest revision",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date of latest revision y axis the number of date of latest revision",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "of",
      "latest",
      "revision",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision"
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "Give me a pie to show the total number from different rank .",
    "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank'}",
    "record_name": "2746",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show the total number from different rank .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "rank",
      "."
    ],
    "query": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "List the number of the name of all playlist .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "db_id": "store_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name'}",
    "record_name": "2855",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the name of all playlist .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank by a bar chart , and sort in asc by the total number .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC'}",
    "record_name": "2747@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains that have each rank by a bar chart , and sort in asc by the total number .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Return the average age of captains in each class , and I want to show from high to low by the total number .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC'}",
    "record_name": "2740@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the average age of captains in each class , and I want to show from high to low by the total number .",
    "question_toks": [
      "Return",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "avg",
      "(",
      "age",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "I want to see trend of the number of yearid by yearid , and I want to show in desc by the X .",
    "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR'}",
    "record_name": "157@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend of the number of yearid by yearid , and I want to show in desc by the X .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "yearid",
      "by",
      "yearid",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "yearid",
      "DESC",
      "BIN",
      "yearid",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]"
  },
  {
    "nl_queries": "How many companies each investor has invested ? Show me a bar chart , and could you sort in desc by the bar ?",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC'}",
    "record_name": "1373@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies each investor has invested ? Show me a bar chart , and could you sort in desc by the bar ?",
    "question_toks": [
      "How",
      "many",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "bar",
      "?"
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "What are the number of the countries of mountains with height bigger than 5000 ? , I want to display X-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "490@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the countries of mountains with height bigger than 5000 ? , I want to display X-axis in ascending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?",
      ",",
      "I",
      "want",
      "to",
      "display",
      "X-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Can you give me a bar chart to show the name and membership level of the visitors whose membership level is higher than 4 , could you order by the Name from low to high ?",
    "VQL": "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Name ASC",
    "db_id": "museum_visit",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Name ASC'}",
    "record_name": "2417@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you give me a bar chart to show the name and membership level of the visitors whose membership level is higher than 4 , could you order by the Name from low to high ?",
    "question_toks": [
      "Can",
      "you",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "could",
      "you",
      "order",
      "by",
      "the",
      "Name",
      "from",
      "low",
      "to",
      "high",
      "?"
    ],
    "query": "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Level_of_membership",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4",
      "ORDER",
      "BY",
      "Name",
      "ASC"
    ],
    "choose_schema": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visitor, columns = [*,ID, Name, Level_of_membership, Age]",
    "choose_schema_rat": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visit, columns = [*,Museum_ID, visitor_ID, Num_of_Ticket, Total_spent]"
  },
  {
    "nl_queries": "What are the number of the names of all the playlists ? , I want to rank x-axis in asc order .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC'}",
    "record_name": "2855@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the names of all the playlists ? , I want to rank x-axis in asc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      "?",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "x-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Plot the average of age by grouped by class as a bar graph , could you show in ascending by the Y-axis ?",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC'}",
    "record_name": "2740@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the average of age by grouped by class as a bar graph , could you show in ascending by the Y-axis ?",
    "question_toks": [
      "Plot",
      "the",
      "average",
      "of",
      "age",
      "by",
      "grouped",
      "by",
      "class",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "could",
      "you",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "avg",
      "(",
      "age",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Bar chart x axis name y axis how many name , and display in ascending by the the number of name .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC'}",
    "record_name": "2855@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis name y axis how many name , and display in ascending by the the number of name .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "name",
      "y",
      "axis",
      "how",
      "many",
      "name",
      ",",
      "and",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "number",
      "of",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "For each citizenship , what is the maximum net worth Visualize by bar chart , and list by the y-axis in descending .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC'}",
    "record_name": "2776@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              1,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each citizenship , what is the maximum net worth Visualize by bar chart , and list by the y-axis in descending .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "what",
      "is",
      "the",
      "maximum",
      "net",
      "worth",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "y-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category in a bar chart , and sort X in ascending order .",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC'}",
    "record_name": "2436@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of music festivals of each category in a bar chart , and sort X in ascending order .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "X",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "I want to see trend of the number of yearid by yearid , and display from low to high by the X-axis .",
    "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR'}",
    "record_name": "157@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend of the number of yearid by yearid , and display from low to high by the X-axis .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "yearid",
      "by",
      "yearid",
      ",",
      "and",
      "display",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "yearid",
      "ASC",
      "BIN",
      "yearid",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]"
  },
  {
    "nl_queries": "What is the average age of captains in different classes ? Show the result with a pie chart .",
    "VQL": "Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS'}",
    "record_name": "2744",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What is the average age of captains in different classes ? Show the result with a pie chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "different",
      "classes",
      "?",
      "Show",
      "the",
      "result",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "List the number of invoices from the US , grouped by state by a bar chart , and list X from high to low order .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC'}",
    "record_name": "2856@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of invoices from the US , grouped by state by a bar chart , and list X from high to low order .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "invoices",
      "from",
      "the",
      "US",
      ",",
      "grouped",
      "by",
      "state",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "X",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "billing_state",
      "DESC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "For each citizenship , what is the maximum net worth Visualize by bar chart , sort in asc by the bar .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC'}",
    "record_name": "2776@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each citizenship , what is the maximum net worth Visualize by bar chart , sort in asc by the bar .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "what",
      "is",
      "the",
      "maximum",
      "net",
      "worth",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Show the total number from each rank , and show in asc by the bar please .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC'}",
    "record_name": "2747@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number from each rank , and show in asc by the bar please .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "from",
      "each",
      "rank",
      ",",
      "and",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "bar",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Show the relationship between the rank and market values of the companies in the banking industry with a scatter chart .",
    "VQL": "Visualize SCATTER SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking'",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': \"SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking'\", 'binning': ''}, 'VQL': \"Visualize SCATTER SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking'\"}",
    "record_name": "1502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Banking\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show the relationship between the rank and market values of the companies in the banking industry with a scatter chart .",
    "question_toks": [
      "Show",
      "the",
      "relationship",
      "between",
      "the",
      "rank",
      "and",
      "market",
      "values",
      "of",
      "the",
      "companies",
      "in",
      "the",
      "banking",
      "industry",
      "with",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking'",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "Rank",
      ",",
      "Market_Value",
      "FROM",
      "company",
      "WHERE",
      "main_industry",
      "=",
      "'Banking'"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show the relationship between the rank and market values of the companies in the banking industry and group by company with a group scatter chart .",
    "VQL": "Visualize SCATTER SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking' GROUP BY Company",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': \"SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking' GROUP BY Company\", 'binning': ''}, 'VQL': \"Visualize SCATTER SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking' GROUP BY Company\"}",
    "record_name": "1504",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Banking\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show the relationship between the rank and market values of the companies in the banking industry and group by company with a group scatter chart .",
    "question_toks": [
      "Show",
      "the",
      "relationship",
      "between",
      "the",
      "rank",
      "and",
      "market",
      "values",
      "of",
      "the",
      "companies",
      "in",
      "the",
      "banking",
      "industry",
      "and",
      "group",
      "by",
      "company",
      "with",
      "a",
      "group",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking' GROUP BY Company",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "Rank",
      ",",
      "Market_Value",
      "FROM",
      "company",
      "WHERE",
      "main_industry",
      "=",
      "'Banking'",
      "GROUP",
      "BY",
      "Company"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart , and I want to list by the Y-axis from low to high .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC'}",
    "record_name": "2774@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart , and I want to list by the Y-axis from low to high .",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "by",
      "the",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "A bar chart about how many captains are in each rank ? , show from low to high by the Rank .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC'}",
    "record_name": "2747@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many captains are in each rank ? , show from low to high by the Rank .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Rank",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Draw a pie chart for what are the different ship flags , and how many ships have each ?",
    "VQL": "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag'}",
    "record_name": "2738",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Draw a pie chart for what are the different ship flags , and how many ships have each ?",
    "question_toks": [
      "Draw",
      "a",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?"
    ],
    "query": "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and could you sort by the X in asc ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and could you sort by the X in asc ?",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "X",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter , and order bar in ascending order .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC'}",
    "record_name": "1498@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List all headquarters and the number of companies in each headquarter , and order bar in ascending order .",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      ",",
      "and",
      "order",
      "bar",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "How many invoices were billed from each state . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state'}",
    "record_name": "2856",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many invoices were billed from each state . Plot them as bar chart .",
    "question_toks": [
      "How",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "What are the category of music festivals with result \"Awarded\" , and count them by a pie chart",
    "VQL": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2438",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the category of music festivals with result \"Awarded\" , and count them by a pie chart",
    "question_toks": [
      "What",
      "are",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "pie",
      "chart"
    ],
    "query": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 , could you sort by the catalog_level_name from high to low ?",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC'}",
    "record_name": "2605@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 , could you sort by the catalog_level_name from high to low ?",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "catalog_level_name",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Draw a bar chart for how many captains with younger than 50 are in each rank ? , show by the Y-axis in asc .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC'}",
    "record_name": "2737@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for how many captains with younger than 50 are in each rank ? , show by the Y-axis in asc .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "show",
      "by",
      "the",
      "Y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "How many companies each investor has invested ? Show me a bar chart , and I want to show Y in asc order .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC'}",
    "record_name": "1373@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies each investor has invested ? Show me a bar chart , and I want to show Y in asc order .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Investor",
      ")",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Return a histogram on how many entrepreneurs correspond to each investor ? , show in desc by the total number please .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC'}",
    "record_name": "1371@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many entrepreneurs correspond to each investor ? , show in desc by the total number please .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?",
      ",",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Visualize the general trend of how many year over the year , and display X-axis in descending order .",
    "VQL": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC BIN year BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC', 'binning': 'BIN year BY YEAR'}, 'VQL': 'Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC BIN year BY YEAR'}",
    "record_name": "166@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "year"
      ],
      "vis": 2
    },
    "question": "Visualize the general trend of how many year over the year , and display X-axis in descending order .",
    "question_toks": [
      "Visualize",
      "the",
      "general",
      "trend",
      "of",
      "how",
      "many",
      "year",
      "over",
      "the",
      "year",
      ",",
      "and",
      "display",
      "X-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC BIN year BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "year",
      "DESC",
      "BIN",
      "year",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "How many captains with younger than 50 are in each rank , and sort in desc by the bar .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC'}",
    "record_name": "2737@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many captains with younger than 50 are in each rank , and sort in desc by the bar .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      ",",
      "and",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Give me a histogram for how many climbers are from each country ? , and could you list by the total number from high to low please ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC'}",
    "record_name": "485@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for how many climbers are from each country ? , and could you list by the total number from high to low please ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "and",
      "could",
      "you",
      "list",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the category of music festivals with result \"Awarded\" ? , could you list Y from low to high order ?",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC'}",
    "record_name": "2439@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the category of music festivals with result \"Awarded\" ? , could you list Y from low to high order ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?",
      ",",
      "could",
      "you",
      "list",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , and display Y-axis in asc order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , and display Y-axis in asc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "Y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "List the name of all playlist , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "db_id": "store_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name'}",
    "record_name": "2855",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the name of all playlist , and count them by a bar chart",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Return me a bar chart to show the frequency of the year attribute by binning into a weekday interval , and I want to display Y-axis in asc order .",
    "VQL": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC BIN year BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC', 'binning': 'BIN year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC BIN year BY WEEKDAY'}",
    "record_name": "165@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Return me a bar chart to show the frequency of the year attribute by binning into a weekday interval , and I want to display Y-axis in asc order .",
    "question_toks": [
      "Return",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "frequency",
      "of",
      "the",
      "year",
      "attribute",
      "by",
      "binning",
      "into",
      "a",
      "weekday",
      "interval",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "Y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC BIN year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "year",
      ")",
      "ASC",
      "BIN",
      "year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "How many captains are in each rank .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank'}",
    "record_name": "2747",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many captains are in each rank .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000 .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "490",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000 .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Show the number of venue from each venue , could you list by the Y-axis in asc please ?",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC'}",
    "record_name": "3260@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of venue from each venue , could you list by the Y-axis in asc please ?",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "venue",
      "from",
      "each",
      "venue",
      ",",
      "could",
      "you",
      "list",
      "by",
      "the",
      "Y-axis",
      "in",
      "asc",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Venue",
      ")",
      "ASC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]"
  },
  {
    "nl_queries": "What is the total number of captains with different classes ? , I want to rank from low to high by the the number of class .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC'}",
    "record_name": "2753@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of captains with different classes ? , I want to rank from low to high by the the number of class .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "with",
      "different",
      "classes",
      "?",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "the",
      "number",
      "of",
      "class",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show the total number from each flag , display the total number in desc order .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC'}",
    "record_name": "2739@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number from each flag , display the total number in desc order .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "from",
      "each",
      "flag",
      ",",
      "display",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3269",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and I want to list in asc by the x axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC'}",
    "record_name": "2607@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and I want to list in asc by the x axis .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , display by the names from low to high please .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC'}",
    "record_name": "2607@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , display by the names from low to high please .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "display",
      "by",
      "the",
      "names",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" , could you show in ascending by the Y ?",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC'}",
    "record_name": "2439@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" , could you show in ascending by the Y ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "could",
      "you",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "Y",
      "?"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Bar graph to show how many result from different result , could you rank by the names from high to low ?",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC'}",
    "record_name": "3261@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show how many result from different result , could you rank by the names from high to low ?",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "result",
      "from",
      "different",
      "result",
      ",",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "names",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "DESC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]@SEP@Table workshop, columns = [Workshop_ID, Date, Venue, Name]"
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and sort names in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and sort names in ascending order .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "sort",
      "names",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Bar chart x axis name y axis how many name , list in desc by the names .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC'}",
    "record_name": "2855@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis name y axis how many name , list in desc by the names .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "name",
      "y",
      "axis",
      "how",
      "many",
      "name",
      ",",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "How many climbers are from each country .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country'}",
    "record_name": "485",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many climbers are from each country .",
    "question_toks": [
      "How",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Bar graph to show how many result from different result",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result'}",
    "record_name": "3261",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show how many result from different result",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "result",
      "from",
      "different",
      "result"
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "I want to see trend of the number of yearid by yearid , and display x-axis in ascending order .",
    "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR'}",
    "record_name": "157@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend of the number of yearid by yearid , and display x-axis in ascending order .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "yearid",
      "by",
      "yearid",
      ",",
      "and",
      "display",
      "x-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "yearid",
      "ASC",
      "BIN",
      "yearid",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]"
  },
  {
    "nl_queries": "Bar chart of the total number from each country , and could you list by the total number from high to low please ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC'}",
    "record_name": "485@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each country , and could you list by the total number from high to low please ?",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "country",
      ",",
      "and",
      "could",
      "you",
      "list",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Can you give me a bar chart to show the name and membership level of the visitors whose membership level is higher than 4 , list in desc by the x axis please .",
    "VQL": "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Name DESC",
    "db_id": "museum_visit",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Name DESC'}",
    "record_name": "2417@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you give me a bar chart to show the name and membership level of the visitors whose membership level is higher than 4 , list in desc by the x axis please .",
    "question_toks": [
      "Can",
      "you",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "x",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Level_of_membership",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4",
      "ORDER",
      "BY",
      "Name",
      "DESC"
    ],
    "choose_schema": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visitor, columns = [*,ID, Name, Level_of_membership, Age]",
    "choose_schema_rat": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visit, columns = [*,Museum_ID, visitor_ID, Num_of_Ticket, Total_spent]"
  },
  {
    "nl_queries": "Return the number of venues of each workshop in a bar chart , and could you rank y-axis in desc order ?",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC'}",
    "record_name": "3260@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of venues of each workshop in a bar chart , and could you rank y-axis in desc order ?",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "venues",
      "of",
      "each",
      "workshop",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "y-axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Venue",
      ")",
      "DESC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Bar chart x axis name y axis how many name , could you sort by the Y in descending please ?",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC'}",
    "record_name": "2855@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis name y axis how many name , could you sort by the Y in descending please ?",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "name",
      "y",
      "axis",
      "how",
      "many",
      "name",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "How many companies in each headquarter ? Plot a bar chart , could you order in ascending by the y-axis please ?",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC'}",
    "record_name": "1518@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies in each headquarter ? Plot a bar chart , could you order in ascending by the y-axis please ?",
    "question_toks": [
      "How",
      "many",
      "companies",
      "in",
      "each",
      "headquarter",
      "?",
      "Plot",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "y-axis",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank by a bar chart .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank'}",
    "record_name": "2737",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains younger than 50 of each rank by a bar chart .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Return the results of all music festivals using a pie chart .",
    "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result'}",
    "record_name": "2440",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the results of all music festivals using a pie chart .",
    "question_toks": [
      "Return",
      "the",
      "results",
      "of",
      "all",
      "music",
      "festivals",
      "using",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "A bar chart about how many hosts does each nationality have ? List the nationality and the count .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank Visualize by bar chart , rank by the the total number in descending .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC'}",
    "record_name": "2747@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains that have each rank Visualize by bar chart , rank by the the total number in descending .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "how many entrepreneurs correspond to each investor ? , show from high to low by the bars please .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC'}",
    "record_name": "1371@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "how many entrepreneurs correspond to each investor ? , show from high to low by the bars please .",
    "question_toks": [
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?",
      ",",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "bars",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Bar graph to show the number of investor from different investor , I want to show by the x axis in descending .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC'}",
    "record_name": "1373@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of investor from different investor , I want to show by the x axis in descending .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "investor",
      "from",
      "different",
      "investor",
      ",",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Show me the total number by citizenship in a histogram , and display bars in asc order .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC'}",
    "record_name": "2774@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the total number by citizenship in a histogram , and display bars in asc order .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "total",
      "number",
      "by",
      "citizenship",
      "in",
      "a",
      "histogram",
      ",",
      "and",
      "display",
      "bars",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different ship flags , and how many ships have each ? , and list the total number in asc order please .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC'}",
    "record_name": "2739@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different ship flags , and how many ships have each ? , and list the total number in asc order please .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?",
      ",",
      "and",
      "list",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Create a pie chart showing how many headquarters across headquarters .",
    "VQL": "Visualize PIE SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters'}",
    "record_name": "1517",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing how many headquarters across headquarters .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "how",
      "many",
      "headquarters",
      "across",
      "headquarters",
      "."
    ],
    "query": "Visualize PIE SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 , and list by the y axis in ascending .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC'}",
    "record_name": "2605@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 , and list by the y axis in ascending .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "For each headquarter , what are the headquarter and how many companies are centered there Visualize by bar chart , and rank in asc by the x axis please .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC'}",
    "record_name": "1498@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each headquarter , what are the headquarter and how many companies are centered there Visualize by bar chart , and rank in asc by the x axis please .",
    "question_toks": [
      "For",
      "each",
      "headquarter",
      ",",
      "what",
      "are",
      "the",
      "headquarter",
      "and",
      "how",
      "many",
      "companies",
      "are",
      "centered",
      "there",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "in",
      "asc",
      "by",
      "the",
      "x",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "How many captains with younger than 50 are in each rank , list by the bars from low to high .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC'}",
    "record_name": "2737@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many captains with younger than 50 are in each rank , list by the bars from low to high .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      ",",
      "list",
      "by",
      "the",
      "bars",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Show me a bar chart comparing the total number of captains in each rank , sort by the Rank in descending please .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC'}",
    "record_name": "2751@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart comparing the total number of captains in each rank , sort by the Rank in descending please .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      ",",
      "sort",
      "by",
      "the",
      "Rank",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count . Visualize by bar chart .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Return the number of the countries of the mountains that have a height larger than 5000 , and could you show y axis in desc order ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC'}",
    "record_name": "490@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of the countries of the mountains that have a height larger than 5000 , and could you show y axis in desc order ?",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "and",
      "could",
      "you",
      "show",
      "y",
      "axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the names of the top 8 countries by total invoice size and what are those sizes ?",
    "VQL": "Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8'}",
    "record_name": "2857",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          44,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              46,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the names of the top 8 countries by total invoice size and what are those sizes ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "of",
      "the",
      "top",
      "8",
      "countries",
      "by",
      "total",
      "invoice",
      "size",
      "and",
      "what",
      "are",
      "those",
      "sizes",
      "?"
    ],
    "query": "Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_country",
      ",",
      "SUM",
      "(",
      "total",
      ")",
      "FROM",
      "invoices",
      "GROUP",
      "BY",
      "billing_country",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "total",
      ")",
      "DESC",
      "LIMIT",
      "8"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]@SEP@Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]"
  },
  {
    "nl_queries": "Return a bar chart on what are the different ship flags , and how many ships have each ? , and could you rank in asc by the Y ?",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC'}",
    "record_name": "2739@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on what are the different ship flags , and how many ships have each ? , and could you rank in asc by the Y ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "in",
      "asc",
      "by",
      "the",
      "Y",
      "?"
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show the total number from each flag , and sort by the y axis in ascending .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC'}",
    "record_name": "2739@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number from each flag , and sort by the y axis in ascending .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "from",
      "each",
      "flag",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "What is the relationship between the average and minimum age of captains in different classes ?",
    "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT avg(age) , min(age) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class'}",
    "record_name": "2745",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "What is the relationship between the average and minimum age of captains in different classes ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "relationship",
      "between",
      "the",
      "average",
      "and",
      "minimum",
      "age",
      "of",
      "captains",
      "in",
      "different",
      "classes",
      "?"
    ],
    "query": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the names of all the playlists ? , and I want to sort by the Y from high to low .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC'}",
    "record_name": "2855@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the names of all the playlists ? , and I want to sort by the Y from high to low .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "What are the number of the category of music festivals with result \"Awarded\" ? , show in descending by the x axis .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC'}",
    "record_name": "2439@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the category of music festivals with result \"Awarded\" ? , show in descending by the x axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship'}",
    "record_name": "2776",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship .",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Return a line chart on how many players enter hall of fame each year ? , and I want to show x axis in desc order .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC'}",
    "record_name": "156@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart on how many players enter hall of fame each year ? , and I want to show x axis in desc order .",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "on",
      "how",
      "many",
      "players",
      "enter",
      "hall",
      "of",
      "fame",
      "each",
      "year",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "x",
      "axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "DESC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "what are the main indstries and total market value for each industry ?",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
    "record_name": "1508",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "what are the main indstries and total market value for each industry ?",
    "question_toks": [
      "what",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "?"
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Bar chart x axis year y axis the number of year , and list Y-axis from low to high order .",
    "VQL": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC BIN year BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC', 'binning': 'BIN year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC BIN year BY WEEKDAY'}",
    "record_name": "165@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis year y axis the number of year , and list Y-axis from low to high order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "year",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "year",
      ",",
      "and",
      "list",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) ASC BIN year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "year",
      ")",
      "ASC",
      "BIN",
      "year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank , list by the y-axis in asc .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC'}",
    "record_name": "2737@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains younger than 50 of each rank , list by the y-axis in asc .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      ",",
      "list",
      "by",
      "the",
      "y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , rank from high to low by the sum population .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , rank from high to low by the sum population .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "sum",
      "population",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Plot how many class by grouped by class as a bar graph",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class'}",
    "record_name": "2753",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot how many class by grouped by class as a bar graph",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "class",
      "by",
      "grouped",
      "by",
      "class",
      "as",
      "a",
      "bar",
      "graph"
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Plot date to by the number of date to as a trend line , I want to show by the X in asc .",
    "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC BIN date_to BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC', 'binning': 'BIN date_to BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC BIN date_to BY YEAR'}",
    "record_name": "2965@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "year"
      ],
      "vis": 2
    },
    "question": "Plot date to by the number of date to as a trend line , I want to show by the X in asc .",
    "question_toks": [
      "Plot",
      "date",
      "to",
      "by",
      "the",
      "number",
      "of",
      "date",
      "to",
      "as",
      "a",
      "trend",
      "line",
      ",",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "X",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC BIN date_to BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_to",
      "ASC",
      "BIN",
      "date_to",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the names of all the playlists ? , could you order x axis in asc order please ?",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC'}",
    "record_name": "2855@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the names of all the playlists ? , could you order x axis in asc order please ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      "?",
      ",",
      "could",
      "you",
      "order",
      "x",
      "axis",
      "in",
      "asc",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "how many entrepreneurs correspond to each investor ? , I want to display by the bar in asc .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC'}",
    "record_name": "1371@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "how many entrepreneurs correspond to each investor ? , I want to display by the bar in asc .",
    "question_toks": [
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?",
      ",",
      "I",
      "want",
      "to",
      "display",
      "by",
      "the",
      "bar",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Show the number of gas stations for each manager in a bar chart , and show by the names in ascending .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC'}",
    "record_name": "1511@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of gas stations for each manager in a bar chart , and show by the names in ascending .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "gas",
      "stations",
      "for",
      "each",
      "manager",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "names",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "Manager_Name",
      "ASC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return a bar chart on what are the different ship flags , and how many ships have each ? , list by the Y-axis in descending .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC'}",
    "record_name": "2739@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on what are the different ship flags , and how many ships have each ? , list by the Y-axis in descending .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?",
      ",",
      "list",
      "by",
      "the",
      "Y-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a pie chart",
    "VQL": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2438",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a pie chart",
    "question_toks": [
      "Return",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "pie",
      "chart"
    ],
    "query": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show the number of companies each investor has invested with a bar chart , rank y axis from high to low order .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC'}",
    "record_name": "1373@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies each investor has invested with a bar chart , rank y axis from high to low order .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Investor",
      ")",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Count the number of players who enter hall of fame for each year Plot them as line chart , show yearid in descending order please .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC'}",
    "record_name": "156@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Count the number of players who enter hall of fame for each year Plot them as line chart , show yearid in descending order please .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "players",
      "who",
      "enter",
      "hall",
      "of",
      "fame",
      "for",
      "each",
      "year",
      "Plot",
      "them",
      "as",
      "line",
      "chart",
      ",",
      "show",
      "yearid",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "DESC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "A bar chart shows the venue for each workshop , sort how many venue in desc order .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC'}",
    "record_name": "3260@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart shows the venue for each workshop , sort how many venue in desc order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "venue",
      "for",
      "each",
      "workshop",
      ",",
      "sort",
      "how",
      "many",
      "venue",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Venue",
      ")",
      "DESC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them , and could you display y-axis in descending order please ?",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY'}",
    "record_name": "2499@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them , and could you display y-axis in descending order please ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      ",",
      "and",
      "could",
      "you",
      "display",
      "y-axis",
      "in",
      "descending",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "DESC",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Bar chart x axis name y axis how many name",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "db_id": "store_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name'}",
    "record_name": "2855",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis name y axis how many name",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "name",
      "y",
      "axis",
      "how",
      "many",
      "name"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "What are the number of the names of all the playlists ?",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "db_id": "store_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name'}",
    "record_name": "2855",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the names of all the playlists ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      "?"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , list by the X in ascending .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC'}",
    "record_name": "2607@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , list by the X in ascending .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "list",
      "by",
      "the",
      "X",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank , show in descending by the y-axis .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC'}",
    "record_name": "2737@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains younger than 50 of each rank , show in descending by the y-axis .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Draw a pie chart for how many captains with younger than 50 are in each rank ?",
    "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank'}",
    "record_name": "2736",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Draw a pie chart for how many captains with younger than 50 are in each rank ?",
    "question_toks": [
      "Draw",
      "a",
      "pie",
      "chart",
      "for",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?"
    ],
    "query": "Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Give me a bar chart , that group by location and count them .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location'}",
    "record_name": "2507",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart , that group by location and count them .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "that",
      "group",
      "by",
      "location",
      "and",
      "count",
      "them",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) . Show bar chart .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2607",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) . Show bar chart .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank . Plot them as pie chart .",
    "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank'}",
    "record_name": "2736",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Count the number of captains younger than 50 of each rank . Plot them as pie chart .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      ".",
      "Plot",
      "them",
      "as",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "How many captains are in each rank . Visualize by pie chart .",
    "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank'}",
    "record_name": "2746",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many captains are in each rank . Visualize by pie chart .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      ".",
      "Visualize",
      "by",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , and show by the bars from low to high .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC'}",
    "record_name": "1371@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , and show by the bars from low to high .",
    "question_toks": [
      "What",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      ",",
      "and",
      "show",
      "by",
      "the",
      "bars",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Can you draw the trend of how many date from over the date from ?",
    "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff', 'binning': 'BIN date_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR'}",
    "record_name": "2964",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "year"
      ],
      "vis": 2
    },
    "question": "Can you draw the trend of how many date from over the date from ?",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "the",
      "trend",
      "of",
      "how",
      "many",
      "date",
      "from",
      "over",
      "the",
      "date",
      "from",
      "?"
    ],
    "query": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "BIN",
      "date_from",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "A pie chart shows the venue for each workshop .",
    "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue'}",
    "record_name": "3259",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart shows the venue for each workshop .",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "shows",
      "the",
      "venue",
      "for",
      "each",
      "workshop",
      "."
    ],
    "query": "Visualize PIE SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the names of all the playlists ? , and sort in desc by the X .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC'}",
    "record_name": "2855@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the names of all the playlists ? , and sort in desc by the X .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      "?",
      ",",
      "and",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Draw a bar chart of main industry versus total number of market value , and display y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC'}",
    "record_name": "1508@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of main industry versus total number of market value , and display y-axis in descending order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "main",
      "industry",
      "versus",
      "total",
      "number",
      "of",
      "market",
      "value",
      ",",
      "and",
      "display",
      "y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) . Visualize by pie chart .",
    "VQL": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2606",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) . Visualize by pie chart .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      ".",
      "Visualize",
      "by",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Show the number of companies each investor has invested with a pie chart .",
    "VQL": "Visualize PIE SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1372",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show the number of companies each investor has invested with a pie chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Plot date to by the number of date to as a trend line",
    "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff', 'binning': 'BIN date_to BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR'}",
    "record_name": "2965",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "year"
      ],
      "vis": 2
    },
    "question": "Plot date to by the number of date to as a trend line",
    "question_toks": [
      "Plot",
      "date",
      "to",
      "by",
      "the",
      "number",
      "of",
      "date",
      "to",
      "as",
      "a",
      "trend",
      "line"
    ],
    "query": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "BIN",
      "date_to",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "Show the number of gas stations for each manager in a bar chart , I want to rank by the Y from low to high .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC'}",
    "record_name": "1511@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of gas stations for each manager in a bar chart , I want to rank by the Y from low to high .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "gas",
      "stations",
      "for",
      "each",
      "manager",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]@SEP@Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]"
  },
  {
    "nl_queries": "Tell me the proportion of the total number of different classes using a bar graph .",
    "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class'}",
    "record_name": "2752",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Tell me the proportion of the total number of different classes using a bar graph .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "number",
      "of",
      "different",
      "classes",
      "using",
      "a",
      "bar",
      "graph",
      "."
    ],
    "query": "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , and show by the bar in descending .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC'}",
    "record_name": "2774@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , and show by the bar in descending .",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "bar",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Create a bar chart showing the number of author across author , and order total number from low to high order .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC'}",
    "record_name": "3263@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing the number of author across author , and order total number from low to high order .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "author",
      "across",
      "author",
      ",",
      "and",
      "order",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Author",
      ")",
      "ASC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]"
  },
  {
    "nl_queries": "Plot the number of result by grouped by result as a bar graph",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result'}",
    "record_name": "2441",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of result by grouped by result as a bar graph",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "result",
      "by",
      "grouped",
      "by",
      "result",
      "as",
      "a",
      "bar",
      "graph"
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Plot date of latest revision by the number of date of latest revision as a line chart",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Plot date of latest revision by the number of date of latest revision as a line chart",
    "question_toks": [
      "Plot",
      "date",
      "of",
      "latest",
      "revision",
      "by",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision",
      "as",
      "a",
      "line",
      "chart"
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "How many captains are in each rank , and list X from high to low order .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC'}",
    "record_name": "2747@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many captains are in each rank , and list X from high to low order .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      ",",
      "and",
      "list",
      "X",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "For each headquarter , what are the headquarter and how many companies are centered there Visualize by bar chart , and order names in descending order .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC'}",
    "record_name": "1498@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each headquarter , what are the headquarter and how many companies are centered there Visualize by bar chart , and order names in descending order .",
    "question_toks": [
      "For",
      "each",
      "headquarter",
      ",",
      "what",
      "are",
      "the",
      "headquarter",
      "and",
      "how",
      "many",
      "companies",
      "are",
      "centered",
      "there",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "names",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Find the market values of the companies in the banking industry order by their sales and profits in billion with a bar chart .",
    "VQL": "Visualize BAR SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion\"}",
    "record_name": "1501",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Banking\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the market values of the companies in the banking industry order by their sales and profits in billion with a bar chart .",
    "question_toks": [
      "Find",
      "the",
      "market",
      "values",
      "of",
      "the",
      "companies",
      "in",
      "the",
      "banking",
      "industry",
      "order",
      "by",
      "their",
      "sales",
      "and",
      "profits",
      "in",
      "billion",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Company",
      ",",
      "Market_Value",
      "FROM",
      "company",
      "WHERE",
      "main_industry",
      "=",
      "'Banking'",
      "ORDER",
      "BY",
      "sales_billion",
      ",",
      "profits_billion"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" , and rank Category in descending order please .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC'}",
    "record_name": "2439@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" , and rank Category in descending order please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "rank",
      "Category",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Plot the average of age by grouped by class as a bar graph , I want to order by the bar from low to high .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC'}",
    "record_name": "2740@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the average of age by grouped by class as a bar graph , I want to order by the bar from low to high .",
    "question_toks": [
      "Plot",
      "the",
      "average",
      "of",
      "age",
      "by",
      "grouped",
      "by",
      "class",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "bar",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and list from low to high by the X-axis .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC'}",
    "record_name": "2605@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and list from low to high by the X-axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "A stacked bar graph shows the total number of captains categorize by ranks of different classes .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class'}",
    "record_name": "2750",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A stacked bar graph shows the total number of captains categorize by ranks of different classes .",
    "question_toks": [
      "A",
      "stacked",
      "bar",
      "graph",
      "shows",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "categorize",
      "by",
      "ranks",
      "of",
      "different",
      "classes",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show me a bar chart for how many invoices were billed from each state ? , and show by the Y-axis in desc .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC'}",
    "record_name": "2856@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many invoices were billed from each state ? , and show by the Y-axis in desc .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "?",
      ",",
      "and",
      "show",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Show me a bar chart for how many invoices were billed from each state ? , show by the bar in desc .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC'}",
    "record_name": "2856@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many invoices were billed from each state ? , show by the bar in desc .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "?",
      ",",
      "show",
      "by",
      "the",
      "bar",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "billing_state",
      "DESC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "How many home games by each year (bin the year attr into weekdays interval) ? Give me a line chart .",
    "VQL": "Visualize LINE SELECT year , COUNT(year) FROM home_game BIN year BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game', 'binning': 'BIN year BY YEAR'}, 'VQL': 'Visualize LINE SELECT year , COUNT(year) FROM home_game BIN year BY YEAR'}",
    "record_name": "166",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "year"
      ],
      "vis": 2
    },
    "question": "How many home games by each year (bin the year attr into weekdays interval) ? Give me a line chart .",
    "question_toks": [
      "How",
      "many",
      "home",
      "games",
      "by",
      "each",
      "year",
      "(bin",
      "the",
      "year",
      "attr",
      "into",
      "weekdays",
      "interval)",
      "?",
      "Give",
      "me",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT year , COUNT(year) FROM home_game BIN year BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "BIN",
      "year",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Draw a bar chart of manager name versus how many manager name , and list bars in descending order .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC'}",
    "record_name": "1511@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of manager name versus how many manager name , and list bars in descending order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "manager",
      "name",
      "versus",
      "how",
      "many",
      "manager",
      "name",
      ",",
      "and",
      "list",
      "bars",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "Manager_Name",
      "DESC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]"
  },
  {
    "nl_queries": "Draw a bar chart of main industry versus total number of market value",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
    "record_name": "1508",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of main industry versus total number of market value",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "main",
      "industry",
      "versus",
      "total",
      "number",
      "of",
      "market",
      "value"
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "When do all the researcher role staff start to work ? Bin the time into weekday interval and count them with a bar chart .",
    "VQL": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY WEEKDAY",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff', 'binning': 'BIN date_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY WEEKDAY'}",
    "record_name": "2962",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "weekday"
      ],
      "vis": 0
    },
    "question": "When do all the researcher role staff start to work ? Bin the time into weekday interval and count them with a bar chart .",
    "question_toks": [
      "When",
      "do",
      "all",
      "the",
      "researcher",
      "role",
      "staff",
      "start",
      "to",
      "work",
      "?",
      "Bin",
      "the",
      "time",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "BIN",
      "date_from",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Staff_Roles, columns = [*,role_code, role_description]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  },
  {
    "nl_queries": "A bar chart about what are the main indstries and total market value for each industry ? , rank in ascending by the names please .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC'}",
    "record_name": "1508@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the main indstries and total market value for each industry ? , rank in ascending by the names please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "?",
      ",",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "names",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What is the distibution of results for each music festival ? Could you show me the result with a bar chart , list from high to low by the x axis .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC'}",
    "record_name": "2441@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the distibution of results for each music festival ? Could you show me the result with a bar chart , list from high to low by the x axis .",
    "question_toks": [
      "What",
      "is",
      "the",
      "distibution",
      "of",
      "results",
      "for",
      "each",
      "music",
      "festival",
      "?",
      "Could",
      "you",
      "show",
      "me",
      "the",
      "result",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "how many captains are in each rank ?",
    "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank'}",
    "record_name": "2746",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "how many captains are in each rank ?",
    "question_toks": [
      "how",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      "?"
    ],
    "query": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Bar chart of the total number from each headquarters , and rank in desc by the x axis .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC'}",
    "record_name": "1498@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each headquarters , and rank in desc by the x axis .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "headquarters",
      ",",
      "and",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return a histogram on how many invoices were billed from each state ? , and display total number from low to high order .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC'}",
    "record_name": "2856@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many invoices were billed from each state ? , and display total number from low to high order .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "?",
      ",",
      "and",
      "display",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Count the number of players who enter hall of fame for each year with a line chart , order by the x-axis from high to low .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC'}",
    "record_name": "156@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Count the number of players who enter hall of fame for each year with a line chart , order by the x-axis from high to low .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "players",
      "who",
      "enter",
      "hall",
      "of",
      "fame",
      "for",
      "each",
      "year",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "order",
      "by",
      "the",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "DESC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ? , and show by the X from low to high .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC'}",
    "record_name": "1371@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ? , and show by the X from low to high .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      "?",
      ",",
      "and",
      "show",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 , rank by the bars in asc .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC'}",
    "record_name": "2605@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 , rank by the bars in asc .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      ",",
      "rank",
      "by",
      "the",
      "bars",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Bar chart of how many headquarters from each headquarters , could you sort from high to low by the Y-axis ?",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC'}",
    "record_name": "1518@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of how many headquarters from each headquarters , could you sort from high to low by the Y-axis ?",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "how",
      "many",
      "headquarters",
      "from",
      "each",
      "headquarters",
      ",",
      "could",
      "you",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "How many players enter hall of fame each year . Show the tendency .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid'}",
    "record_name": "156",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "How many players enter hall of fame each year . Show the tendency .",
    "question_toks": [
      "How",
      "many",
      "players",
      "enter",
      "hall",
      "of",
      "fame",
      "each",
      "year",
      ".",
      "Show",
      "the",
      "tendency",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Draw a bar chart of investor versus the total number , I want to rank Y from high to low order .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC'}",
    "record_name": "1371@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of investor versus the total number , I want to rank Y from high to low order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "investor",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category , show total number from low to high order .",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC'}",
    "record_name": "2436@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of music festivals of each category , show total number from low to high order .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      ",",
      "show",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "A stacked bar graph shows the total number of captains categorize by ranks of different classes , could you list in ascending by the x-axis ?",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC'}",
    "record_name": "2750@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A stacked bar graph shows the total number of captains categorize by ranks of different classes , could you list in ascending by the x-axis ?",
    "question_toks": [
      "A",
      "stacked",
      "bar",
      "graph",
      "shows",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "categorize",
      "by",
      "ranks",
      "of",
      "different",
      "classes",
      ",",
      "could",
      "you",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "x-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "A bar chart about what are the main indstries and total market value for each industry ?",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
    "record_name": "1508",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the main indstries and total market value for each industry ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "?"
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "How many companies in each headquarter ? Plot a bar chart , and I want to sort from low to high by the x-axis .",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC'}",
    "record_name": "1518@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies in each headquarter ? Plot a bar chart , and I want to sort from low to high by the x-axis .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "in",
      "each",
      "headquarter",
      "?",
      "Plot",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank with a pie chart .",
    "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank'}",
    "record_name": "2746",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Count the number of captains that have each rank with a pie chart .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , and I want to rank Y from high to low order .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC'}",
    "record_name": "1371@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , and I want to rank Y from high to low order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "What are the names of all the playlists , and count them by a bar chart , and could you rank in descending by the the number of name ?",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC'}",
    "record_name": "2855@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names of all the playlists , and count them by a bar chart , and could you rank in descending by the the number of name ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "the",
      "number",
      "of",
      "name",
      "?"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Show the trend about the total average number of attendance at home games change over the years , bin year into year interval .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR'}",
    "record_name": "171",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the total average number of attendance at home games change over the years , bin year into year interval .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "total",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "change",
      "over",
      "the",
      "years",
      ",",
      "bin",
      "year",
      "into",
      "year",
      "interval",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , rank by the total number from high to low .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC'}",
    "record_name": "2774@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , rank by the total number from high to low .",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart , and rank Y from low to high order .",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart , and rank Y from low to high order .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "ASC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "What are the number of the countries of mountains with height bigger than 5000 ? , and sort names from high to low order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "490@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the countries of mountains with height bigger than 5000 ? , and sort names from high to low order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?",
      ",",
      "and",
      "sort",
      "names",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Pie . which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "VQL": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2606",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Pie . which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "question_toks": [
      "Pie",
      ".",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Show the number of companies in each headquarter with a bar chart , and show x-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC'}",
    "record_name": "1518@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies in each headquarter with a bar chart , and show x-axis in ascending order .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "x-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year , and I want to display y axis from low to high order .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC', 'binning': 'BIN First_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY'}",
    "record_name": "2498@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        4,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year , and I want to display y axis from low to high order .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "first",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "the",
      "first",
      "year",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "First_year",
      ")",
      "ASC",
      "BIN",
      "First_year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "For each citizenship , what is the maximum net worth Visualize by bar chart , and sort Y in asc order .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC'}",
    "record_name": "2776@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              1,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each citizenship , what is the maximum net worth Visualize by bar chart , and sort Y in asc order .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "what",
      "is",
      "the",
      "maximum",
      "net",
      "worth",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality by a pie chart .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show different nationalities along with the number of hosts of each nationality by a pie chart .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "Visualize a bar chart for how many authors submit to the workshop , and list bars in asc order .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC'}",
    "record_name": "3263@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for how many authors submit to the workshop , and list bars in asc order .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "authors",
      "submit",
      "to",
      "the",
      "workshop",
      ",",
      "and",
      "list",
      "bars",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "Author",
      "ASC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Return me a line chart to show the frequency of the year attribute by binning into a weekday interval , I want to display X-axis from low to high order .",
    "VQL": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC BIN year BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC', 'binning': 'BIN year BY YEAR'}, 'VQL': 'Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC BIN year BY YEAR'}",
    "record_name": "166@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "year"
      ],
      "vis": 2
    },
    "question": "Return me a line chart to show the frequency of the year attribute by binning into a weekday interval , I want to display X-axis from low to high order .",
    "question_toks": [
      "Return",
      "me",
      "a",
      "line",
      "chart",
      "to",
      "show",
      "the",
      "frequency",
      "of",
      "the",
      "year",
      "attribute",
      "by",
      "binning",
      "into",
      "a",
      "weekday",
      "interval",
      ",",
      "I",
      "want",
      "to",
      "display",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC BIN year BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "year",
      "ASC",
      "BIN",
      "year",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "List the number of invoices from the US , grouped by state . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state'}",
    "record_name": "2856",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of invoices from the US , grouped by state . Visualize by bar chart .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "invoices",
      "from",
      "the",
      "US",
      ",",
      "grouped",
      "by",
      "state",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "What are the number of the countries of mountains with height bigger than 5000 ? , and show from high to low by the total number .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC'}",
    "record_name": "490@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the countries of mountains with height bigger than 5000 ? , and show from high to low by the total number .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Show the authors of their total submissions with a bar chart .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author'}",
    "record_name": "3263",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the authors of their total submissions with a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "authors",
      "of",
      "their",
      "total",
      "submissions",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Return a histogram on how many invoices were billed from each state ? , and sort x axis from low to high order .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC'}",
    "record_name": "2856@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many invoices were billed from each state ? , and sort x axis from low to high order .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "?",
      ",",
      "and",
      "sort",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "billing_state",
      "ASC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Return the countries of the mountains that have a height larger than 5000 , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "490",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the countries of the mountains that have a height larger than 5000 , and count them by a bar chart",
    "question_toks": [
      "Return",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Return a pie on how many captains are in each rank ?",
    "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank'}",
    "record_name": "2746",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return a pie on how many captains are in each rank ?",
    "question_toks": [
      "Return",
      "a",
      "pie",
      "on",
      "how",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      "?"
    ],
    "query": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Please give me a bar chart to show the distribution of results of all music festival , and order Y from high to low order .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC'}",
    "record_name": "2441@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please give me a bar chart to show the distribution of results of all music festival , and order Y from high to low order .",
    "question_toks": [
      "Please",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "distribution",
      "of",
      "results",
      "of",
      "all",
      "music",
      "festival",
      ",",
      "and",
      "order",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , and sort y-axis in asc order .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC'}",
    "record_name": "2605@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , and sort y-axis in asc order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "sort",
      "y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank , and I want to order by the X from high to low .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC'}",
    "record_name": "2737@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains younger than 50 of each rank , and I want to order by the X from high to low .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "X",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Visualize the proportion of the total number of captains in each rank using a pie chart .",
    "VQL": "Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank'}",
    "record_name": "2754",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize the proportion of the total number of captains in each rank using a pie chart .",
    "question_toks": [
      "Visualize",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      "using",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "For each headquarter , what are the headquarter and how many companies are centered there . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters'}",
    "record_name": "1498",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each headquarter , what are the headquarter and how many companies are centered there . Visualize by bar chart .",
    "question_toks": [
      "For",
      "each",
      "headquarter",
      ",",
      "what",
      "are",
      "the",
      "headquarter",
      "and",
      "how",
      "many",
      "companies",
      "are",
      "centered",
      "there",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What are the countries of mountains with height bigger than 5000 , and count them by a bar chart , and I want to list y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC'}",
    "record_name": "490@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the countries of mountains with height bigger than 5000 , and count them by a bar chart , and I want to list y-axis in asc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "A pie chart for returning the number of the categories of music festivals that have the result \"Awarded\" .",
    "VQL": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2438",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart for returning the number of the categories of music festivals that have the result \"Awarded\" .",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      "."
    ],
    "query": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "What are the category of music festivals with result \"Awarded\" , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2439",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the category of music festivals with result \"Awarded\" , and count them by a bar chart",
    "question_toks": [
      "What",
      "are",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , and show by the the number of first year in ascending .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) ASC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) ASC'}",
    "record_name": "2496@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , and show by the the number of first year in ascending .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "the",
      "number",
      "of",
      "first",
      "year",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "First_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "First_year",
      ")",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Bar graph to show the number of investor from different investor",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1373",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of investor from different investor",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "investor",
      "from",
      "different",
      "investor"
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Bar chart x axis date of latest revision y axis the number of date of latest revision , and display y axis in ascending order please .",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date of latest revision y axis the number of date of latest revision , and display y axis in ascending order please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "of",
      "latest",
      "revision",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision",
      ",",
      "and",
      "display",
      "y",
      "axis",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "ASC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "Plot how many date to by grouped by date to as a bar graph , and list Y from low to high order please .",
    "VQL": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY COUNT(date_to) ASC BIN date_to BY WEEKDAY",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY COUNT(date_to) ASC', 'binning': 'BIN date_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY COUNT(date_to) ASC BIN date_to BY WEEKDAY'}",
    "record_name": "2963@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              27,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Plot how many date to by grouped by date to as a bar graph , and list Y from low to high order please .",
    "question_toks": [
      "Plot",
      "how",
      "many",
      "date",
      "to",
      "by",
      "grouped",
      "by",
      "date",
      "to",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "list",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY COUNT(date_to) ASC BIN date_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_to",
      ")",
      "ASC",
      "BIN",
      "date_to",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank by the x-axis from low to high .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank by the x-axis from low to high .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Visualize a bar chart showing the average age of captains in each class , order by the y axis in descending .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC'}",
    "record_name": "2740@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart showing the average age of captains in each class , order by the y axis in descending .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      ",",
      "order",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "avg",
      "(",
      "age",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Draw a bar chart of manager name versus how many manager name",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name'}",
    "record_name": "1511",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of manager name versus how many manager name",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "manager",
      "name",
      "versus",
      "how",
      "many",
      "manager",
      "name"
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]"
  },
  {
    "nl_queries": "Show me a bar chart comparing the total number of captains in each rank , rank in ascending by the Rank .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC'}",
    "record_name": "2751@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart comparing the total number of captains in each rank , rank in ascending by the Rank .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      ",",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "Rank",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Return the average age of captains in each class , and rank Y-axis from low to high order please .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC'}",
    "record_name": "2740@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the average age of captains in each class , and rank Y-axis from low to high order please .",
    "question_toks": [
      "Return",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      ",",
      "and",
      "rank",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "avg",
      "(",
      "age",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Give me a histogram for how many climbers are from each country ? , and could you rank in descending by the x axis ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "485@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for how many climbers are from each country ? , and could you rank in descending by the x axis ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "x",
      "axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Show me a scatter plot of avg(age) and minimal age for .",
    "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT avg(age) , min(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS'}",
    "record_name": "2743",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show me a scatter plot of avg(age) and minimal age for .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "scatter",
      "plot",
      "of",
      "avg(age)",
      "and",
      "minimal",
      "age",
      "for",
      "."
    ],
    "query": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Group by the result and count them by a bar chart .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result'}",
    "record_name": "3261",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Group by the result and count them by a bar chart .",
    "question_toks": [
      "Group",
      "by",
      "the",
      "result",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "What are the number of the countries of mountains with height bigger than 5000 ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "490",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the countries of mountains with height bigger than 5000 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "A bar chart about how many captains are in each rank ? , and I want to list in ascending by the Y-axis .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC'}",
    "record_name": "2747@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many captains are in each rank ? , and I want to list in ascending by the Y-axis .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Show the number of venue from each venue , sort how many venue in desc order .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC'}",
    "record_name": "3260@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of venue from each venue , sort how many venue in desc order .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "venue",
      "from",
      "each",
      "venue",
      ",",
      "sort",
      "how",
      "many",
      "venue",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Venue",
      ")",
      "DESC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]"
  },
  {
    "nl_queries": "count yearid for visualizing a line chart , and sort X in asc order .",
    "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR'}",
    "record_name": "157@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "year"
      ],
      "vis": 2
    },
    "question": "count yearid for visualizing a line chart , and sort X in asc order .",
    "question_toks": [
      "count",
      "yearid",
      "for",
      "visualizing",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "sort",
      "X",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "yearid",
      "ASC",
      "BIN",
      "yearid",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]"
  },
  {
    "nl_queries": "What are the countries of mountains with height bigger than 5000 , and count them by a pie chart",
    "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "489",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the countries of mountains with height bigger than 5000 , and count them by a pie chart",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "pie",
      "chart"
    ],
    "query": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , order in descending by the Y-axis please .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , order in descending by the Y-axis please .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "Y-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "How many companies each investor has invested ? Show me a bar chart , and show by the X from low to high .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC'}",
    "record_name": "1373@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies each investor has invested ? Show me a bar chart , and show by the X from low to high .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "How many entrepreneurs correspond to each investor .",
    "VQL": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1370",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many entrepreneurs correspond to each investor .",
    "question_toks": [
      "How",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "."
    ],
    "query": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count in a pie chart .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count in a pie chart .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the countries of mountains with height bigger than 5000 ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "490",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the countries of mountains with height bigger than 5000 ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , and list from high to low by the Y-axis .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , and list from high to low by the Y-axis .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "and",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "A bar chart about how many captains are in each rank ? , and rank in desc by the the total number please .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC'}",
    "record_name": "2747@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many captains are in each rank ? , and rank in desc by the the total number please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "and",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "the",
      "total",
      "number",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , and order in desc by the X-axis .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , and order in desc by the X-axis .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "and",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Can you give me a bar chart to show the name and membership level of the visitors whose membership level is higher than 4 , and list by the Level_of_membership in desc .",
    "VQL": "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
    "db_id": "museum_visit",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC'}",
    "record_name": "2417@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you give me a bar chart to show the name and membership level of the visitors whose membership level is higher than 4 , and list by the Level_of_membership in desc .",
    "question_toks": [
      "Can",
      "you",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "and",
      "list",
      "by",
      "the",
      "Level_of_membership",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "Level_of_membership",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4",
      "ORDER",
      "BY",
      "Level_of_membership",
      "DESC"
    ],
    "choose_schema": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visitor, columns = [*,ID, Name, Level_of_membership, Age]",
    "choose_schema_rat": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visit, columns = [*,Museum_ID, visitor_ID, Num_of_Ticket, Total_spent]"
  },
  {
    "nl_queries": "How many companies each investor has invested ? Show me a pie chart .",
    "VQL": "Visualize PIE SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1372",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many companies each investor has invested ? Show me a pie chart .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "?",
      "Show",
      "me",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 . Show bar chart .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2605",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 . Show bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "How many invoices were billed from each state Plot them as bar chart , and I want to show by the billing_state from low to high .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC'}",
    "record_name": "2856@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many invoices were billed from each state Plot them as bar chart , and I want to show by the billing_state from low to high .",
    "question_toks": [
      "How",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "billing_state",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "billing_state",
      "ASC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and order in ascending by the names .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and order in ascending by the names .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "and",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "What is the rank every company in the banking industry ordered by sales and profits ? Show a bar chart .",
    "VQL": "Visualize BAR SELECT Company , Rank FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Company , Rank FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Company , Rank FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion\"}",
    "record_name": "1499",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Banking\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the rank every company in the banking industry ordered by sales and profits ? Show a bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "rank",
      "every",
      "company",
      "in",
      "the",
      "banking",
      "industry",
      "ordered",
      "by",
      "sales",
      "and",
      "profits",
      "?",
      "Show",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Company , Rank FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Company",
      ",",
      "Rank",
      "FROM",
      "company",
      "WHERE",
      "main_industry",
      "=",
      "'Banking'",
      "ORDER",
      "BY",
      "sales_billion",
      ",",
      "profits_billion"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What is the proportion of results for each music festival ? Counld you show me the result with a pie chart .",
    "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result'}",
    "record_name": "2440",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What is the proportion of results for each music festival ? Counld you show me the result with a pie chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "proportion",
      "of",
      "results",
      "for",
      "each",
      "music",
      "festival",
      "?",
      "Counld",
      "you",
      "show",
      "me",
      "the",
      "result",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and order in desc by the X-axis .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and order in desc by the X-axis .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , order in asc by the x-axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC'}",
    "record_name": "2607@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , order in asc by the x-axis .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "A bar chart about what are the main indstries and total market value for each industry ? , I want to order sum market value in asc order .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC'}",
    "record_name": "1508@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the main indstries and total market value for each industry ? , I want to order sum market value in asc order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "?",
      ",",
      "I",
      "want",
      "to",
      "order",
      "sum",
      "market",
      "value",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return a line chart on what is the average number of attendance at home games for each year ? , show from low to high by the year .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC'}",
    "record_name": "171@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart on what is the average number of attendance at home games for each year ? , show from low to high by the year .",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "on",
      "what",
      "is",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "for",
      "each",
      "year",
      "?",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "year",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]"
  },
  {
    "nl_queries": "How many companies each investor has invested ? Show me a bar chart .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1373",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies each investor has invested ? Show me a bar chart .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Show the authors of their total submissions with a bar chart , and display x axis from high to low order .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC'}",
    "record_name": "3263@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the authors of their total submissions with a bar chart , and display x axis from high to low order .",
    "question_toks": [
      "Show",
      "the",
      "authors",
      "of",
      "their",
      "total",
      "submissions",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "Author",
      "DESC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "How many gas stations dors each manager have ? Plot a bar chart , and sort from high to low by the y-axis .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC'}",
    "record_name": "1511@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many gas stations dors each manager have ? Plot a bar chart , and sort from high to low by the y-axis .",
    "question_toks": [
      "How",
      "many",
      "gas",
      "stations",
      "dors",
      "each",
      "manager",
      "have",
      "?",
      "Plot",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Give me a histogram for how many climbers are from each country ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country'}",
    "record_name": "485",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for how many climbers are from each country ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Plot a scatter chart , sum(grant amount) by organisation_id .",
    "VQL": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id'}",
    "record_name": "2961",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Plot a scatter chart , sum(grant amount) by organisation_id .",
    "question_toks": [
      "Plot",
      "a",
      "scatter",
      "chart",
      ",",
      "sum(grant",
      "amount)",
      "by",
      "organisation_id",
      "."
    ],
    "query": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "grant_amount",
      ")",
      ",",
      "organisation_id",
      "FROM",
      "Grants",
      "GROUP",
      "BY",
      "organisation_id"
    ],
    "choose_schema": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]",
    "choose_schema_rat": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Documents, columns = [*,document_id, document_type_code, grant_id, sent_date, response_received_date, other_details]@SEP@Table Organisation_Types, columns = [*,organisation_type, organisation_type_description]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]"
  },
  {
    "nl_queries": "Group by the result and count them by a bar chart , and list by the x-axis from low to high .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC'}",
    "record_name": "3261@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Group by the result and count them by a bar chart , and list by the x-axis from low to high .",
    "question_toks": [
      "Group",
      "by",
      "the",
      "result",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "ASC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 . Visualize by bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show me the proportion on what are the name and level of catalog structure with level number between 5 and 10",
    "VQL": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2604",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me the proportion on what are the name and level of catalog structure with level number between 5 and 10",
    "question_toks": [
      "Show",
      "me",
      "the",
      "proportion",
      "on",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10"
    ],
    "query": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category , I want to rank by the x-axis in asc .",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC'}",
    "record_name": "2436@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of music festivals of each category , I want to rank by the x-axis in asc .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "x-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , could you order capacity in asc order please ?",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC'}",
    "record_name": "2607@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , could you order capacity in asc order please ?",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "could",
      "you",
      "order",
      "capacity",
      "in",
      "asc",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Return the average age of captains in each class , display by the names in descending .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC'}",
    "record_name": "2740@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the average age of captains in each class , display by the names in descending .",
    "question_toks": [
      "Return",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      ",",
      "display",
      "by",
      "the",
      "names",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show the authors of their total submissions with a bar chart , and order from high to low by the how many author please .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC'}",
    "record_name": "3263@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the authors of their total submissions with a bar chart , and order from high to low by the how many author please .",
    "question_toks": [
      "Show",
      "the",
      "authors",
      "of",
      "their",
      "total",
      "submissions",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "how",
      "many",
      "author",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Author",
      ")",
      "DESC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Show the total number from each flag",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag'}",
    "record_name": "2739",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number from each flag",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "from",
      "each",
      "flag"
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Bar graph to show how many result from different result , sort in asc by the X .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC'}",
    "record_name": "3261@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show how many result from different result , sort in asc by the X .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "result",
      "from",
      "different",
      "result",
      ",",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "ASC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Return the countries of the mountains that have a height larger than 5000 , and count them by a bar chart , and list in ascending by the x axis please .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "490@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the countries of the mountains that have a height larger than 5000 , and count them by a bar chart , and list in ascending by the x axis please .",
    "question_toks": [
      "Return",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "x",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Plot year by the average of attendance as a line chart , and sort x axis in asc order .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC'}",
    "record_name": "171@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Plot year by the average of attendance as a line chart , and sort x axis in asc order .",
    "question_toks": [
      "Plot",
      "year",
      "by",
      "the",
      "average",
      "of",
      "attendance",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "sort",
      "x",
      "axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "For each headquarter , what are the headquarter and how many companies are centered there Visualize by bar chart , and I want to list in desc by the total number .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC'}",
    "record_name": "1498@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each headquarter , what are the headquarter and how many companies are centered there Visualize by bar chart , and I want to list in desc by the total number .",
    "question_toks": [
      "For",
      "each",
      "headquarter",
      ",",
      "what",
      "are",
      "the",
      "headquarter",
      "and",
      "how",
      "many",
      "companies",
      "are",
      "centered",
      "there",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and show y axis in descending order .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC'}",
    "record_name": "2607@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and show y axis in descending order .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Can you draw the trend of how many date from over the date from ? , I want to rank in desc by the X-axis .",
    "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC BIN date_from BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC', 'binning': 'BIN date_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC BIN date_from BY YEAR'}",
    "record_name": "2964@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "year"
      ],
      "vis": 2
    },
    "question": "Can you draw the trend of how many date from over the date from ? , I want to rank in desc by the X-axis .",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "the",
      "trend",
      "of",
      "how",
      "many",
      "date",
      "from",
      "over",
      "the",
      "date",
      "from",
      "?",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC BIN date_from BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_from",
      "DESC",
      "BIN",
      "date_from",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ? , and show in desc by the total number please .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC'}",
    "record_name": "1371@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ? , and show in desc by the total number please .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      "?",
      ",",
      "and",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Tell me the relationship between average and minimum age of captains in each class .",
    "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT avg(age) , min(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS'}",
    "record_name": "2743",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Tell me the relationship between average and minimum age of captains in each class .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "relationship",
      "between",
      "average",
      "and",
      "minimum",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      "."
    ],
    "query": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "How many music festivals have had each kind of result , ordered descending by count . Show bar chart .",
    "VQL": "Visualize BAR SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC'}",
    "record_name": "2434",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many music festivals have had each kind of result , ordered descending by count . Show bar chart .",
    "question_toks": [
      "How",
      "many",
      "music",
      "festivals",
      "have",
      "had",
      "each",
      "kind",
      "of",
      "result",
      ",",
      "ordered",
      "descending",
      "by",
      "count",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "RESULT",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Create a bar chart showing how many location across location , and sort by the the number of location from high to low please .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC'}",
    "record_name": "2507@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many location across location , and sort by the the number of location from high to low please .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "location",
      "across",
      "location",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "the",
      "number",
      "of",
      "location",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Location",
      ")",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Show me maximal net worth millions by citizenship in a histogram , and sort by the maximal net worth millions in descending .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC'}",
    "record_name": "2776@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              1,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me maximal net worth millions by citizenship in a histogram , and sort by the maximal net worth millions in descending .",
    "question_toks": [
      "Show",
      "me",
      "maximal",
      "net",
      "worth",
      "millions",
      "by",
      "citizenship",
      "in",
      "a",
      "histogram",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "maximal",
      "net",
      "worth",
      "millions",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "A pie chart about what are the top 5 countries by number of invoices and how many do they have ?",
    "VQL": "Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5'}",
    "record_name": "2849",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          44,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart about what are the top 5 countries by number of invoices and how many do they have ?",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "top",
      "5",
      "countries",
      "by",
      "number",
      "of",
      "invoices",
      "and",
      "how",
      "many",
      "do",
      "they",
      "have",
      "?"
    ],
    "query": "Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "billing_country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "GROUP",
      "BY",
      "billing_country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]@SEP@Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]"
  },
  {
    "nl_queries": "what are the main indstries and total market value for each industry ? , and order by the x-axis in desc .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC'}",
    "record_name": "1508@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "what are the main indstries and total market value for each industry ? , and order by the x-axis in desc .",
    "question_toks": [
      "what",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "?",
      ",",
      "and",
      "order",
      "by",
      "the",
      "x-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "List the name of all playlist , and count them by a bar chart , sort Y from high to low order please .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC'}",
    "record_name": "2855@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the name of all playlist , and count them by a bar chart , sort Y from high to low order please .",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Show me the proportion on how many captains with younger than 50 are in each rank ?",
    "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank'}",
    "record_name": "2736",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me the proportion on how many captains with younger than 50 are in each rank ?",
    "question_toks": [
      "Show",
      "me",
      "the",
      "proportion",
      "on",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?"
    ],
    "query": "Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "How many climbers are from each country . Visualize by pie chart .",
    "VQL": "Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country'}",
    "record_name": "484",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many climbers are from each country . Visualize by pie chart .",
    "question_toks": [
      "How",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      ".",
      "Visualize",
      "by",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Stacked bar of class and the number of class colored by Rank , could you list in descending by the Class ?",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC'}",
    "record_name": "2750@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar of class and the number of class colored by Rank , could you list in descending by the Class ?",
    "question_toks": [
      "Stacked",
      "bar",
      "of",
      "class",
      "and",
      "the",
      "number",
      "of",
      "class",
      "colored",
      "by",
      "Rank",
      ",",
      "could",
      "you",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "Class",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show me a bar chart for how many invoices were billed from each state ? , could you sort Y-axis in asc order ?",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC'}",
    "record_name": "2856@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many invoices were billed from each state ? , could you sort Y-axis in asc order ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "?",
      ",",
      "could",
      "you",
      "sort",
      "Y-axis",
      "in",
      "asc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Show the number of venue from each venue",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue'}",
    "record_name": "3260",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of venue from each venue",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "venue",
      "from",
      "each",
      "venue"
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]"
  },
  {
    "nl_queries": "List the number of invoices from the US , grouped by state Visualize by bar chart , I want to order in descending by the y-axis .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC'}",
    "record_name": "2856@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of invoices from the US , grouped by state Visualize by bar chart , I want to order in descending by the y-axis .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "invoices",
      "from",
      "the",
      "US",
      ",",
      "grouped",
      "by",
      "state",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Bar chart x axis year y axis the number of year , sort y-axis in descending order .",
    "VQL": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC BIN year BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC', 'binning': 'BIN year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC BIN year BY WEEKDAY'}",
    "record_name": "165@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis year y axis the number of year , sort y-axis in descending order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "year",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "year",
      ",",
      "sort",
      "y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC BIN year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "year",
      ")",
      "DESC",
      "BIN",
      "year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "How many home games by each year (bin the year attr into weekdays interval) ? Give me a line chart , and display X-axis in descending order .",
    "VQL": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC BIN year BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC', 'binning': 'BIN year BY YEAR'}, 'VQL': 'Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC BIN year BY YEAR'}",
    "record_name": "166@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "year"
      ],
      "vis": 2
    },
    "question": "How many home games by each year (bin the year attr into weekdays interval) ? Give me a line chart , and display X-axis in descending order .",
    "question_toks": [
      "How",
      "many",
      "home",
      "games",
      "by",
      "each",
      "year",
      "(bin",
      "the",
      "year",
      "attr",
      "into",
      "weekdays",
      "interval)",
      "?",
      "Give",
      "me",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "display",
      "X-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year DESC BIN year BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "year",
      "DESC",
      "BIN",
      "year",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Count the number of players who enter hall of fame for each year with a line chart , rank X-axis in asc order please .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC'}",
    "record_name": "156@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Count the number of players who enter hall of fame for each year with a line chart , rank X-axis in asc order please .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "players",
      "who",
      "enter",
      "hall",
      "of",
      "fame",
      "for",
      "each",
      "year",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "rank",
      "X-axis",
      "in",
      "asc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "ASC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries . Visualize by a pie chart .",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the names and surface areas of the 5 largest countries . Visualize by a pie chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      ".",
      "Visualize",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category by a pie chart .",
    "VQL": "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category'}",
    "record_name": "2435",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the number of music festivals of each category by a pie chart .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Return the results of all music festivals using a bar chart .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result'}",
    "record_name": "2441",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the results of all music festivals using a bar chart .",
    "question_toks": [
      "Return",
      "the",
      "results",
      "of",
      "all",
      "music",
      "festivals",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show me the total number by citizenship in a histogram , rank by the x axis in descending .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC'}",
    "record_name": "2774@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the total number by citizenship in a histogram , rank by the x axis in descending .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "total",
      "number",
      "by",
      "citizenship",
      "in",
      "a",
      "histogram",
      ",",
      "rank",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Return a histogram on how many invoices were billed from each state ? , order in descending by the bars .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC'}",
    "record_name": "2856@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many invoices were billed from each state ? , order in descending by the bars .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "?",
      ",",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "billing_state",
      "DESC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Return the results of all music festivals using a bar chart , list in descending by the X .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC'}",
    "record_name": "2441@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the results of all music festivals using a bar chart , list in descending by the X .",
    "question_toks": [
      "Return",
      "the",
      "results",
      "of",
      "all",
      "music",
      "festivals",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "For each submission , group its acceptance result and count them Visualize them in a bar chart , rank from high to low by the x axis .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC'}",
    "record_name": "3261@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each submission , group its acceptance result and count them Visualize them in a bar chart , rank from high to low by the x axis .",
    "question_toks": [
      "For",
      "each",
      "submission",
      ",",
      "group",
      "its",
      "acceptance",
      "result",
      "and",
      "count",
      "them",
      "Visualize",
      "them",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "DESC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Display a bar chart for how many climbers are from each country ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country'}",
    "record_name": "485",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many climbers are from each country ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Visualize a bar chart showing the average age of captains in each class , I want to rank in asc by the x axis .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC'}",
    "record_name": "2740@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart showing the average age of captains in each class , I want to rank in asc by the x axis .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "in",
      "asc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and I want to order in ascending by the Y .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and I want to order in ascending by the Y .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "What are the names of all the playlists , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "db_id": "store_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name'}",
    "record_name": "2855",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names of all the playlists , and count them by a bar chart",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "count yearid for visualizing a line chart , and order X-axis in asc order .",
    "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR'}",
    "record_name": "157@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "year"
      ],
      "vis": 2
    },
    "question": "count yearid for visualizing a line chart , and order X-axis in asc order .",
    "question_toks": [
      "count",
      "yearid",
      "for",
      "visualizing",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "order",
      "X-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "yearid",
      "ASC",
      "BIN",
      "yearid",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]"
  },
  {
    "nl_queries": "What are the countries of mountains with height bigger than 5000 , and count them by a bar chart , and could you show in ascending by the bars ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "490@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the countries of mountains with height bigger than 5000 , and count them by a bar chart , and could you show in ascending by the bars ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "bars",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "For each citizenship , how many singers are from that country , and rank by the x axis in descending .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC'}",
    "record_name": "2774@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each citizenship , how many singers are from that country , and rank by the x axis in descending .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "that",
      "country",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Display a pie chart for how many hosts does each nationality have ? List the nationality and the count .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Display a pie chart for how many hosts does each nationality have ? List the nationality and the count .",
    "question_toks": [
      "Display",
      "a",
      "pie",
      "chart",
      "for",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Bar chart of the total number from each headquarters , rank by the Y in descending .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC'}",
    "record_name": "1498@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each headquarters , rank by the Y in descending .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "headquarters",
      ",",
      "rank",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the category of music festivals with result \"Awarded\" ? , rank by the Y in descending .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC'}",
    "record_name": "2439@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the category of music festivals with result \"Awarded\" ? , rank by the Y in descending .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?",
      ",",
      "rank",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "What are the countries of mountains with height bigger than 5000 , and count them by a bar chart , and display from high to low by the x axis please .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "490@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the countries of mountains with height bigger than 5000 , and count them by a bar chart , and display from high to low by the x axis please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Return the number of venues of each workshop in a bar chart , and rank X-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC'}",
    "record_name": "3260@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of venues of each workshop in a bar chart , and rank X-axis in ascending order .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "venues",
      "of",
      "each",
      "workshop",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "X-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "Venue",
      "ASC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "For each citizenship , how many singers are from that country . Show the proportion .",
    "VQL": "Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship'}",
    "record_name": "2773",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "For each citizenship , how many singers are from that country . Show the proportion .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "that",
      "country",
      ".",
      "Show",
      "the",
      "proportion",
      "."
    ],
    "query": "Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "A pie chart about what are the names and areas of countries with the top 5 largest area ?",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart about what are the names and areas of countries with the top 5 largest area ?",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show me the total number by category in a histogram , list in descending by the names .",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC'}",
    "record_name": "2436@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the total number by category in a histogram , list in descending by the names .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "total",
      "number",
      "by",
      "category",
      "in",
      "a",
      "histogram",
      ",",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Draw a bar chart of manager name versus how many manager name , and show by the total number from low to high .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC'}",
    "record_name": "1511@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of manager name versus how many manager name , and show by the total number from low to high .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "manager",
      "name",
      "versus",
      "how",
      "many",
      "manager",
      "name",
      ",",
      "and",
      "show",
      "by",
      "the",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY COUNT(Manager_Name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]"
  },
  {
    "nl_queries": "Show me a bar chart comparing the total number of captains in each rank , and list how many rank in asc order please .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC'}",
    "record_name": "2751@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart comparing the total number of captains in each rank , and list how many rank in asc order please .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      ",",
      "and",
      "list",
      "how",
      "many",
      "rank",
      "in",
      "asc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Rank",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Tell me the proportion of the total number of different ranks using a bar graph .",
    "VQL": "Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank'}",
    "record_name": "2754",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Tell me the proportion of the total number of different ranks using a bar graph .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "number",
      "of",
      "different",
      "ranks",
      "using",
      "a",
      "bar",
      "graph",
      "."
    ],
    "query": "Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Compare the total number of different ranks using a bar graph , could you order X in desc order ?",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC'}",
    "record_name": "2751@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of different ranks using a bar graph , could you order X in desc order ?",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "different",
      "ranks",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "could",
      "you",
      "order",
      "X",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1371",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor .",
    "question_toks": [
      "What",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Return a histogram on how many invoices were billed from each state ?",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state'}",
    "record_name": "2856",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many invoices were billed from each state ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "?"
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "For each citizenship , how many singers are from that country , and display by the y-axis from high to low .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC'}",
    "record_name": "2774@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each citizenship , how many singers are from that country , and display by the y-axis from high to low .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "that",
      "country",
      ",",
      "and",
      "display",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Return a line chart on how many players enter hall of fame each year ? , display by the X-axis in asc .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC'}",
    "record_name": "156@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart on how many players enter hall of fame each year ? , display by the X-axis in asc .",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "on",
      "how",
      "many",
      "players",
      "enter",
      "hall",
      "of",
      "fame",
      "each",
      "year",
      "?",
      ",",
      "display",
      "by",
      "the",
      "X-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "ASC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Bar graph to show the number of rank from different rank , and rank by the total number in descending .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC'}",
    "record_name": "2751@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of rank from different rank , and rank by the total number in descending .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "rank",
      "from",
      "different",
      "rank",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Rank",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , and show by the y axis from high to low .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC'}",
    "record_name": "2607@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , and show by the y axis from high to low .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "and",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Return the countries of the mountains that have a height larger than 5000 , and count them by a bar chart , list in desc by the y axis please .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC'}",
    "record_name": "490@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the countries of the mountains that have a height larger than 5000 , and count them by a bar chart , list in desc by the y axis please .",
    "question_toks": [
      "Return",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "y",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "How many gas stations dors each manager have ? Plot a bar chart .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name'}",
    "record_name": "1511",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many gas stations dors each manager have ? Plot a bar chart .",
    "question_toks": [
      "How",
      "many",
      "gas",
      "stations",
      "dors",
      "each",
      "manager",
      "have",
      "?",
      "Plot",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What is the total number of captains with different classes ? , sort by the bars in desc .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC'}",
    "record_name": "2753@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of captains with different classes ? , sort by the bars in desc .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "with",
      "different",
      "classes",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "bars",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "How many companies that are not headquartered in the United States for each main industry ? Show me a bar chart , and could you display by the total number from high to low ?",
    "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC",
    "db_id": "gas_company",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC\"}",
    "record_name": "1506@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies that are not headquartered in the United States for each main industry ? Show me a bar chart , and could you display by the total number from high to low ?",
    "question_toks": [
      "How",
      "many",
      "companies",
      "that",
      "are",
      "not",
      "headquartered",
      "in",
      "the",
      "United",
      "States",
      "for",
      "each",
      "main",
      "industry",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "display",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank by a bar chart .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank'}",
    "record_name": "2747",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains that have each rank by a bar chart .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000 , could you show in ascending by the bars ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "490@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000 , could you show in ascending by the bars ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "could",
      "you",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "bars",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , show in descending by the y axis please .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , show in descending by the y axis please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "y",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Show me a bar chart for how many captains with younger than 50 are in each rank ?",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank'}",
    "record_name": "2737",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many captains with younger than 50 are in each rank ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?"
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "I want to know the proportion of the average age for each class .",
    "VQL": "Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS'}",
    "record_name": "2744",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of the average age for each class .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "the",
      "average",
      "age",
      "for",
      "each",
      "class",
      "."
    ],
    "query": "Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart , sort by the X in desc please .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC'}",
    "record_name": "2439@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart , sort by the X in desc please .",
    "question_toks": [
      "Return",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "X",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Group by the result and count them by a bar chart , show from high to low by the y axis .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC'}",
    "record_name": "3261@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Group by the result and count them by a bar chart , show from high to low by the y axis .",
    "question_toks": [
      "Group",
      "by",
      "the",
      "result",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year , rank by the Y in descending please .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) DESC BIN First_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) DESC', 'binning': 'BIN First_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) DESC BIN First_year BY WEEKDAY'}",
    "record_name": "2498@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        4,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year , rank by the Y in descending please .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "first",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "the",
      "first",
      "year",
      ",",
      "rank",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) DESC BIN First_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "First_year",
      ")",
      "DESC",
      "BIN",
      "First_year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "For each citizenship , how many singers are from that country .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship'}",
    "record_name": "2774",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each citizenship , how many singers are from that country .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "that",
      "country",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Show me a scatter plot for the relationship between average and minimum age of captains in each class , color different classes .",
    "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT avg(age) , min(age) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class'}",
    "record_name": "2745",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show me a scatter plot for the relationship between average and minimum age of captains in each class , color different classes .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "scatter",
      "plot",
      "for",
      "the",
      "relationship",
      "between",
      "average",
      "and",
      "minimum",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      ",",
      "color",
      "different",
      "classes",
      "."
    ],
    "query": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , and could you sort by the x axis in ascending ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , and could you sort by the x axis in ascending ?",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "ascending",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , and display by the Y-axis from low to high please .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC'}",
    "record_name": "2607@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , and display by the Y-axis from low to high please .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "ASC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "How many gas stations dors each manager have ? Plot a bar chart , show by the names in ascending .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC'}",
    "record_name": "1511@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many gas stations dors each manager have ? Plot a bar chart , show by the names in ascending .",
    "question_toks": [
      "How",
      "many",
      "gas",
      "stations",
      "dors",
      "each",
      "manager",
      "have",
      "?",
      "Plot",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "names",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "Manager_Name",
      "ASC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What are the different ship flags , and how many ships have each Plot them as bar chart , rank Y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC'}",
    "record_name": "2739@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different ship flags , and how many ships have each Plot them as bar chart , rank Y-axis in descending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "rank",
      "Y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show me maximal net worth millions by citizenship in a histogram , and show by the x-axis in ascending .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC'}",
    "record_name": "2776@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me maximal net worth millions by citizenship in a histogram , and show by the x-axis in ascending .",
    "question_toks": [
      "Show",
      "me",
      "maximal",
      "net",
      "worth",
      "millions",
      "by",
      "citizenship",
      "in",
      "a",
      "histogram",
      ",",
      "and",
      "show",
      "by",
      "the",
      "x-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank Visualize by bar chart , and order by the y-axis in ascending please .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC'}",
    "record_name": "2747@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains that have each rank Visualize by bar chart , and order by the y-axis in ascending please .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "y-axis",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" , sort from low to high by the x-axis .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC'}",
    "record_name": "2439@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" , sort from low to high by the x-axis .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "sort",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Display a pie chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ?",
    "VQL": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1370",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Display a pie chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ?",
    "question_toks": [
      "Display",
      "a",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      "?"
    ],
    "query": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "count yearid for visualizing a line chart .",
    "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR'}",
    "record_name": "157",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "year"
      ],
      "vis": 2
    },
    "question": "count yearid for visualizing a line chart .",
    "question_toks": [
      "count",
      "yearid",
      "for",
      "visualizing",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "BIN",
      "yearid",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]"
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you rank in desc by the total number ?",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC'}",
    "record_name": "3269@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you rank in desc by the total number ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "could",
      "you",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "How many home games by each weekday (bin the year attr into weekdays interval) ? Give me a bar chart , could you sort by the Y-axis in descending please ?",
    "VQL": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC BIN year BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC', 'binning': 'BIN year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC BIN year BY WEEKDAY'}",
    "record_name": "165@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "weekday"
      ],
      "vis": 0
    },
    "question": "How many home games by each weekday (bin the year attr into weekdays interval) ? Give me a bar chart , could you sort by the Y-axis in descending please ?",
    "question_toks": [
      "How",
      "many",
      "home",
      "games",
      "by",
      "each",
      "weekday",
      "(bin",
      "the",
      "year",
      "attr",
      "into",
      "weekdays",
      "interval)",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "Y-axis",
      "in",
      "descending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT year , COUNT(year) FROM home_game  ORDER BY COUNT(year) DESC BIN year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "year",
      ")",
      "DESC",
      "BIN",
      "year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Display a bar chart for how many climbers are from each country ? , and list from low to high by the the total number please .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC'}",
    "record_name": "485@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many climbers are from each country ? , and list from low to high by the the total number please .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "and",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "the",
      "total",
      "number",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , and could you sort by the total number from high to low ?",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC'}",
    "record_name": "2776@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              1,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , and could you sort by the total number from high to low ?",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "count yearid for visualizing a line chart , and could you show x-axis in desc order ?",
    "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR'}",
    "record_name": "157@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "year"
      ],
      "vis": 2
    },
    "question": "count yearid for visualizing a line chart , and could you show x-axis in desc order ?",
    "question_toks": [
      "count",
      "yearid",
      "for",
      "visualizing",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "show",
      "x-axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "yearid",
      "DESC",
      "BIN",
      "yearid",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank by a bar chart , and list by the X-axis in ascending .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC'}",
    "record_name": "2747@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains that have each rank by a bar chart , and list by the X-axis in ascending .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "X-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "For each year , return the year and the average number of attendance at home games .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR'}",
    "record_name": "171",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "For each year , return the year and the average number of attendance at home games .",
    "question_toks": [
      "For",
      "each",
      "year",
      ",",
      "return",
      "the",
      "year",
      "and",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Return the average age of captains in each class .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS'}",
    "record_name": "2740",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the average age of captains in each class .",
    "question_toks": [
      "Return",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "What are the number of the category of music festivals with result \"Awarded\" ?",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2439",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the category of music festivals with result \"Awarded\" ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Visualize a bar chart for how many authors submit to the workshop , sort Author in descending order please .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC'}",
    "record_name": "3263@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for how many authors submit to the workshop , sort Author in descending order please .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "authors",
      "submit",
      "to",
      "the",
      "workshop",
      ",",
      "sort",
      "Author",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "Author",
      "DESC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Show me a pie chart for what are the different ship flags , and how many ships have each ?",
    "VQL": "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag'}",
    "record_name": "2738",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me a pie chart for what are the different ship flags , and how many ships have each ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?"
    ],
    "query": "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show me the total number by category in a histogram , could you order Y in descending order ?",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC'}",
    "record_name": "2436@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the total number by category in a histogram , could you order Y in descending order ?",
    "question_toks": [
      "Show",
      "me",
      "the",
      "total",
      "number",
      "by",
      "category",
      "in",
      "a",
      "histogram",
      ",",
      "could",
      "you",
      "order",
      "Y",
      "in",
      "descending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship , and rank by the bars from low to high .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC'}",
    "record_name": "2776@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship , and rank by the bars from low to high .",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "bars",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Draw a bar chart of main industry versus total number of market value , order from high to low by the names .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC'}",
    "record_name": "1508@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of main industry versus total number of market value , order from high to low by the names .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "main",
      "industry",
      "versus",
      "total",
      "number",
      "of",
      "market",
      "value",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show all main industry and total market value in each industry by a bar chart , rank in descending by the Y .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC'}",
    "record_name": "1508@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all main industry and total market value in each industry by a bar chart , rank in descending by the Y .",
    "question_toks": [
      "Show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "List the company name and rank for all companies in the decreasing order of their sales . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Company , Rank FROM company ORDER BY Sales_billion DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC'}",
    "record_name": "1519",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the company name and rank for all companies in the decreasing order of their sales . Visualize by bar chart .",
    "question_toks": [
      "List",
      "the",
      "company",
      "name",
      "and",
      "rank",
      "for",
      "all",
      "companies",
      "in",
      "the",
      "decreasing",
      "order",
      "of",
      "their",
      "sales",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Company",
      ",",
      "Rank",
      "FROM",
      "company",
      "ORDER",
      "BY",
      "Sales_billion",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show me a bar chart for how many captains with younger than 50 are in each rank ? , and rank Y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC'}",
    "record_name": "2737@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many captains with younger than 50 are in each rank ? , and rank Y-axis in descending order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "and",
      "rank",
      "Y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "List the name of all playlist , and count them by a bar chart , and sort in desc by the X .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC'}",
    "record_name": "2855@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the name of all playlist , and count them by a bar chart , and sort in desc by the X .",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "What are the number of the category of music festivals with result \"Awarded\" ? , could you list Y from low to high order ?",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC'}",
    "record_name": "2439@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the category of music festivals with result \"Awarded\" ? , could you list Y from low to high order ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?",
      ",",
      "could",
      "you",
      "list",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , and rank in descending by the x-axis .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC'}",
    "record_name": "3269@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , and rank in descending by the x-axis .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "and",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Compare the total number of captains with different classes using a bar graph , show by the Class in ascending .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC'}",
    "record_name": "2753@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of captains with different classes using a bar graph , show by the Class in ascending .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "with",
      "different",
      "classes",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "show",
      "by",
      "the",
      "Class",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Stacked bar of class and the number of class colored by Rank , sort Y in descending order .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC'}",
    "record_name": "2750@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar of class and the number of class colored by Rank , sort Y in descending order .",
    "question_toks": [
      "Stacked",
      "bar",
      "of",
      "class",
      "and",
      "the",
      "number",
      "of",
      "class",
      "colored",
      "by",
      "Rank",
      ",",
      "sort",
      "Y",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you show from low to high by the total number ?",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC'}",
    "record_name": "3269@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you show from low to high by the total number ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "could",
      "you",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Plot date of latest revision by the number of date of latest revision as a line chart , rank by the x axis in asc please .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Plot date of latest revision by the number of date of latest revision as a line chart , rank by the x axis in asc please .",
    "question_toks": [
      "Plot",
      "date",
      "of",
      "latest",
      "revision",
      "by",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "asc",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "ASC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "Create a bar chart showing how many location across location , and display by the total number from low to high .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC'}",
    "record_name": "2507@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many location across location , and display by the total number from low to high .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "location",
      "across",
      "location",
      ",",
      "and",
      "display",
      "by",
      "the",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Location",
      ")",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter with a bar chart , show Headquarters in descending order .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC'}",
    "record_name": "1498@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List all headquarters and the number of companies in each headquarter with a bar chart , show Headquarters in descending order .",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "Headquarters",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah , and I want to show in ascending by the the number of last year .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC'}",
    "record_name": "2497@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah , and I want to show in ascending by the the number of last year .",
    "question_toks": [
      "Count",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "grpah",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "number",
      "of",
      "last",
      "year",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "ASC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , and sort X-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , and sort X-axis from high to low order .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters'}",
    "record_name": "1498",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List all headquarters and the number of companies in each headquarter .",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "How many companies that are not headquartered in the United States for each main industry ? Show me a pie chart .",
    "VQL": "Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry\", 'binning': ''}, 'VQL': \"Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry\"}",
    "record_name": "1505",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many companies that are not headquartered in the United States for each main industry ? Show me a pie chart .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "that",
      "are",
      "not",
      "headquartered",
      "in",
      "the",
      "United",
      "States",
      "for",
      "each",
      "main",
      "industry",
      "?",
      "Show",
      "me",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Draw a bar chart for how many captains with younger than 50 are in each rank ? , order from high to low by the X .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC'}",
    "record_name": "2737@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for how many captains with younger than 50 are in each rank ? , order from high to low by the X .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Draw a pie chart to show all main industry and total market value in each industry .",
    "VQL": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
    "record_name": "1507",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Draw a pie chart to show all main industry and total market value in each industry .",
    "question_toks": [
      "Draw",
      "a",
      "pie",
      "chart",
      "to",
      "show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      "."
    ],
    "query": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Visualize a scatter chart on what is the total amount of grants given by each organisations ? Also list the organisation id .",
    "VQL": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id'}",
    "record_name": "2961",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Visualize a scatter chart on what is the total amount of grants given by each organisations ? Also list the organisation id .",
    "question_toks": [
      "Visualize",
      "a",
      "scatter",
      "chart",
      "on",
      "what",
      "is",
      "the",
      "total",
      "amount",
      "of",
      "grants",
      "given",
      "by",
      "each",
      "organisations",
      "?",
      "Also",
      "list",
      "the",
      "organisation",
      "id",
      "."
    ],
    "query": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "grant_amount",
      ")",
      ",",
      "organisation_id",
      "FROM",
      "Grants",
      "GROUP",
      "BY",
      "organisation_id"
    ],
    "choose_schema": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]",
    "choose_schema_rat": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]@SEP@Table Documents, columns = [*,document_id, document_type_code, grant_id, sent_date, response_received_date, other_details]@SEP@Table Organisation_Types, columns = [*,organisation_type, organisation_type_description]"
  },
  {
    "nl_queries": "Return the countries of the mountains that have a height larger than 5000 , and count them by a bar chart , could you sort y-axis in ascending order ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC'}",
    "record_name": "490@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the countries of the mountains that have a height larger than 5000 , and count them by a bar chart , could you sort y-axis in ascending order ?",
    "question_toks": [
      "Return",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "sort",
      "y-axis",
      "in",
      "ascending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the name of all playlist .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "db_id": "store_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name'}",
    "record_name": "2855",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the name of all playlist .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Return a line chart on what is the average number of attendance at home games for each year ? , and show in desc by the x-axis .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC'}",
    "record_name": "171@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart on what is the average number of attendance at home games for each year ? , and show in desc by the x-axis .",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "on",
      "what",
      "is",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "for",
      "each",
      "year",
      "?",
      ",",
      "and",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]"
  },
  {
    "nl_queries": "What are the category of music festivals with result \"Awarded\" , and count them by a bar chart , and show by the x axis in desc .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC'}",
    "record_name": "2439@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the category of music festivals with result \"Awarded\" , and count them by a bar chart , and show by the x axis in desc .",
    "question_toks": [
      "What",
      "are",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , sort X-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC'}",
    "record_name": "3269@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , sort X-axis in ascending order .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "sort",
      "X-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and rank in desc by the sum population please .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and rank in desc by the sum population please .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "sum",
      "population",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN First_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"', 'binning': 'BIN First_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN First_year BY WEEKDAY'}",
    "record_name": "2498",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        4,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "first",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "the",
      "first",
      "year",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN First_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "BIN",
      "First_year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "List the number of the name of all playlist , and show by the the number of name from high to low .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC'}",
    "record_name": "2855@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of the name of all playlist , and show by the the number of name from high to low .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "and",
      "show",
      "by",
      "the",
      "the",
      "number",
      "of",
      "name",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Tell me the relationship between average and minimum age of captains in each class . Give a scatter plot .",
    "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT avg(age) , min(age) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class'}",
    "record_name": "2745",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Tell me the relationship between average and minimum age of captains in each class . Give a scatter plot .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "relationship",
      "between",
      "average",
      "and",
      "minimum",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      ".",
      "Give",
      "a",
      "scatter",
      "plot",
      "."
    ],
    "query": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Please give me a bar chart to show the distribution of results of all music festival , and show by the x axis from low to high please .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC'}",
    "record_name": "2441@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please give me a bar chart to show the distribution of results of all music festival , and show by the x axis from low to high please .",
    "question_toks": [
      "Please",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "distribution",
      "of",
      "results",
      "of",
      "all",
      "music",
      "festival",
      ",",
      "and",
      "show",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Draw a bar chart of manager name versus how many manager name , and list X from low to high order .",
    "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC'}",
    "record_name": "1511@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of manager name versus how many manager name , and list X from low to high order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "manager",
      "name",
      "versus",
      "how",
      "many",
      "manager",
      "name",
      ",",
      "and",
      "list",
      "X",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Manager_Name",
      ",",
      "COUNT",
      "(",
      "Manager_Name",
      ")",
      "FROM",
      "gas_station",
      "GROUP",
      "BY",
      "Manager_Name",
      "ORDER",
      "BY",
      "Manager_Name",
      "ASC"
    ],
    "choose_schema": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
    "choose_schema_rat": "Table gas_station, columns = [*,Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]"
  },
  {
    "nl_queries": "Return a bar chart on what are the different ship flags , and how many ships have each ?",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag'}",
    "record_name": "2739",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on what are the different ship flags , and how many ships have each ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?"
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "How many captains with younger than 50 are in each rank , display y axis in asc order .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC'}",
    "record_name": "2737@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many captains with younger than 50 are in each rank , display y axis in asc order .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      ",",
      "display",
      "y",
      "axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Find the name and membership level of the visitors whose membership level is higher than 4 . Plot them as pie chart .",
    "VQL": "Visualize PIE SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4",
    "db_id": "museum_visit",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4'}",
    "record_name": "2416",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Find the name and membership level of the visitors whose membership level is higher than 4 . Plot them as pie chart .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ".",
      "Plot",
      "them",
      "as",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "Level_of_membership",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4"
    ],
    "choose_schema": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visitor, columns = [*,ID, Name, Level_of_membership, Age]",
    "choose_schema_rat": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visit, columns = [*,Museum_ID, visitor_ID, Num_of_Ticket, Total_spent]"
  },
  {
    "nl_queries": "Show me the total number by citizenship in a histogram , and display by the y-axis from high to low .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC'}",
    "record_name": "2774@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the total number by citizenship in a histogram , and display by the y-axis from high to low .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "total",
      "number",
      "by",
      "citizenship",
      "in",
      "a",
      "histogram",
      ",",
      "and",
      "display",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "How many entrepreneurs correspond to each investor .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1371",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many entrepreneurs correspond to each investor .",
    "question_toks": [
      "How",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category . Show a pie chart .",
    "VQL": "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category'}",
    "record_name": "2435",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the number of music festivals of each category . Show a pie chart .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "List the number of invoices from the US , grouped by state Visualize by bar chart , I want to rank in ascending by the X please .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC'}",
    "record_name": "2856@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of invoices from the US , grouped by state Visualize by bar chart , I want to rank in ascending by the X please .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "invoices",
      "from",
      "the",
      "US",
      ",",
      "grouped",
      "by",
      "state",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "X",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "billing_state",
      "ASC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "What is the average number of attendance at home games for each year Plot them as line chart , order by the X-axis in asc please .",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC'}",
    "record_name": "171@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "What is the average number of attendance at home games for each year Plot them as line chart , order by the X-axis in asc please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "for",
      "each",
      "year",
      "Plot",
      "them",
      "as",
      "line",
      "chart",
      ",",
      "order",
      "by",
      "the",
      "X-axis",
      "in",
      "asc",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]"
  },
  {
    "nl_queries": "Return a histogram on how many entrepreneurs correspond to each investor ? , sort by the X in ascending .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC'}",
    "record_name": "1371@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many entrepreneurs correspond to each investor ? , sort by the X in ascending .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "X",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , could you list in desc by the y axis ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , could you list in desc by the y axis ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "could",
      "you",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "y",
      "axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Show the relation between avg(age) and minimal age for each Class using a scatter chart",
    "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT avg(age) , min(age) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class'}",
    "record_name": "2745",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show the relation between avg(age) and minimal age for each Class using a scatter chart",
    "question_toks": [
      "Show",
      "the",
      "relation",
      "between",
      "avg(age)",
      "and",
      "minimal",
      "age",
      "for",
      "each",
      "Class",
      "using",
      "a",
      "scatter",
      "chart"
    ],
    "query": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Draw a bar chart for how many captains with younger than 50 are in each rank ?",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank'}",
    "record_name": "2737",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for how many captains with younger than 50 are in each rank ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?"
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Bar chart x axis nationality y axis the total number",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis nationality y axis the total number",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "nationality",
      "y",
      "axis",
      "the",
      "total",
      "number"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "A stacked bar graph shows the total number of captains categorize by ranks of different classes , I want to order by the how many class in desc .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC'}",
    "record_name": "2750@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A stacked bar graph shows the total number of captains categorize by ranks of different classes , I want to order by the how many class in desc .",
    "question_toks": [
      "A",
      "stacked",
      "bar",
      "graph",
      "shows",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "categorize",
      "by",
      "ranks",
      "of",
      "different",
      "classes",
      ",",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "how",
      "many",
      "class",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "What is the total amount of grants given by each organisations ? Also list the organisation id .",
    "VQL": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id'}",
    "record_name": "2961",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "What is the total amount of grants given by each organisations ? Also list the organisation id .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "amount",
      "of",
      "grants",
      "given",
      "by",
      "each",
      "organisations",
      "?",
      "Also",
      "list",
      "the",
      "organisation",
      "id",
      "."
    ],
    "query": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "grant_amount",
      ")",
      ",",
      "organisation_id",
      "FROM",
      "Grants",
      "GROUP",
      "BY",
      "organisation_id"
    ],
    "choose_schema": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]",
    "choose_schema_rat": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]@SEP@Table Documents, columns = [*,document_id, document_type_code, grant_id, sent_date, response_received_date, other_details]@SEP@Table Organisation_Types, columns = [*,organisation_type, organisation_type_description]"
  },
  {
    "nl_queries": "Show the number of companies whose headquarters are not from USA fpr each main industry in a bar chart , show X-axis in ascending order please .",
    "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC",
    "db_id": "gas_company",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC\"}",
    "record_name": "1506@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies whose headquarters are not from USA fpr each main industry in a bar chart , show X-axis in ascending order please .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "whose",
      "headquarters",
      "are",
      "not",
      "from",
      "USA",
      "fpr",
      "each",
      "main",
      "industry",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "X-axis",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Draw a bar chart that counts the number of venues of each workshop , and I want to order in ascending by the X .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC'}",
    "record_name": "3260@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart that counts the number of venues of each workshop , and I want to order in ascending by the X .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "that",
      "counts",
      "the",
      "number",
      "of",
      "venues",
      "of",
      "each",
      "workshop",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "Venue",
      "ASC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "List all headquarters and the number of companies in each headquarter with a bar chart , show from low to high by the Headquarters .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC'}",
    "record_name": "1498@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List all headquarters and the number of companies in each headquarter with a bar chart , show from low to high by the Headquarters .",
    "question_toks": [
      "List",
      "all",
      "headquarters",
      "and",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Headquarters",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Bar chart of how many headquarters from each headquarters , order from high to low by the bars .",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC'}",
    "record_name": "1518@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of how many headquarters from each headquarters , order from high to low by the bars .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "how",
      "many",
      "headquarters",
      "from",
      "each",
      "headquarters",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count . Plot them as pie chart .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count . Plot them as pie chart .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ".",
      "Plot",
      "them",
      "as",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , list from high to low by the total number .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC'}",
    "record_name": "3269@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , list from high to low by the total number .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and show from high to low by the X .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and show from high to low by the X .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "What is the market value of every comapny in the banking industry ordered by sales and profits ? Return a bar chart .",
    "VQL": "Visualize BAR SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion\"}",
    "record_name": "1501",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Banking\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the market value of every comapny in the banking industry ordered by sales and profits ? Return a bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "market",
      "value",
      "of",
      "every",
      "comapny",
      "in",
      "the",
      "banking",
      "industry",
      "ordered",
      "by",
      "sales",
      "and",
      "profits",
      "?",
      "Return",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Company",
      ",",
      "Market_Value",
      "FROM",
      "company",
      "WHERE",
      "main_industry",
      "=",
      "'Banking'",
      "ORDER",
      "BY",
      "sales_billion",
      ",",
      "profits_billion"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category in a bar chart .",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category'}",
    "record_name": "2436",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of music festivals of each category in a bar chart .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "How many companies that are not headquartered in the United States for each main industry ? Show me a bar chart , and list names from high to low order .",
    "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry DESC",
    "db_id": "gas_company",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry DESC\"}",
    "record_name": "1506@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies that are not headquartered in the United States for each main industry ? Show me a bar chart , and list names from high to low order .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "that",
      "are",
      "not",
      "headquartered",
      "in",
      "the",
      "United",
      "States",
      "for",
      "each",
      "main",
      "industry",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "names",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Give me a pie to show the total number from different flag .",
    "VQL": "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag'}",
    "record_name": "2738",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show the total number from different flag .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "flag",
      "."
    ],
    "query": "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year'}",
    "record_name": "2497",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Count",
      "the",
      "last",
      "year",
      "for",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank by a bar chart , and rank by the y axis in asc .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC'}",
    "record_name": "2737@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the number of captains younger than 50 of each rank by a bar chart , and rank by the y axis in asc .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "What are the countries of mountains with height bigger than 5000 , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "490",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the countries of mountains with height bigger than 5000 , and count them by a bar chart",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ? , and I want to display in asc by the y axis .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC'}",
    "record_name": "1371@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor ? , and I want to display in asc by the y axis .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "in",
      "asc",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Bar graph to show how many yearid from different yearid",
    "VQL": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame', 'binning': 'BIN yearid BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY WEEKDAY'}",
    "record_name": "151",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar graph to show how many yearid from different yearid",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "yearid",
      "from",
      "different",
      "yearid"
    ],
    "query": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "BIN",
      "yearid",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different ship flags , and how many ships have each ? , and rank Y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC'}",
    "record_name": "2739@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different ship flags , and how many ships have each ? , and rank Y-axis in descending order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?",
      ",",
      "and",
      "rank",
      "Y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and could you show by the y axis from high to low ?",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and could you show by the y axis from high to low ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "could",
      "you",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart , and order by the y axis from high to low .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC'}",
    "record_name": "2439@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart , and order by the y axis from high to low .",
    "question_toks": [
      "Return",
      "the",
      "categories",
      "of",
      "music",
      "festivals",
      "that",
      "have",
      "the",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "What is the average age of captains in different classes ?",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS'}",
    "record_name": "2740",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average age of captains in different classes ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "different",
      "classes",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show all main industry and total market value in each industry by a bar chart , show in asc by the y-axis please .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC'}",
    "record_name": "1508@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all main industry and total market value in each industry by a bar chart , show in asc by the y-axis please .",
    "question_toks": [
      "Show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "y-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show me maximal net worth millions by citizenship in a histogram , sort Y in asc order .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC'}",
    "record_name": "2776@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              1,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me maximal net worth millions by citizenship in a histogram , sort Y in asc order .",
    "question_toks": [
      "Show",
      "me",
      "maximal",
      "net",
      "worth",
      "millions",
      "by",
      "citizenship",
      "in",
      "a",
      "histogram",
      ",",
      "sort",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "How many captains are in each rank , and I want to show from low to high by the y axis .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC'}",
    "record_name": "2747@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many captains are in each rank , and I want to show from low to high by the y axis .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "are",
      "in",
      "each",
      "rank",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend , and sort by the date_of_latest_revision in descending .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend , and sort by the date_of_latest_revision in descending .",
    "question_toks": [
      "On",
      "which",
      "days",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      "on",
      "catalogs",
      ",",
      "bin",
      "the",
      "date",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "to",
      "show",
      "the",
      "trend",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "date_of_latest_revision",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "DESC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count with a bar chart .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count with a bar chart .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Show me the total number by category in a histogram , and order in asc by the names please .",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC'}",
    "record_name": "2436@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the total number by category in a histogram , and order in asc by the names please .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "total",
      "number",
      "by",
      "category",
      "in",
      "a",
      "histogram",
      ",",
      "and",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "names",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "How many players enter hall of fame each year Show the tendency , display by the x-axis in descending .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC'}",
    "record_name": "156@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "How many players enter hall of fame each year Show the tendency , display by the x-axis in descending .",
    "question_toks": [
      "How",
      "many",
      "players",
      "enter",
      "hall",
      "of",
      "fame",
      "each",
      "year",
      "Show",
      "the",
      "tendency",
      ",",
      "display",
      "by",
      "the",
      "x-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid",
      "ORDER",
      "BY",
      "yearid",
      "DESC"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Return me a bar chart to show the frequency of the year attribute by binning into a weekday interval .",
    "VQL": "Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game', 'binning': 'BIN year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY'}",
    "record_name": "165",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Return me a bar chart to show the frequency of the year attribute by binning into a weekday interval .",
    "question_toks": [
      "Return",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "frequency",
      "of",
      "the",
      "year",
      "attribute",
      "by",
      "binning",
      "into",
      "a",
      "weekday",
      "interval",
      "."
    ],
    "query": "Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "BIN",
      "year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and could you list catalog_entry_name from high to low order please ?",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC'}",
    "record_name": "2607@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and could you list catalog_entry_name from high to low order please ?",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "list",
      "catalog_entry_name",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category .",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category'}",
    "record_name": "2436",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of music festivals of each category .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show the number of companies in each headquarter with a bar chart , and list by the Headquarters from high to low .",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC'}",
    "record_name": "1518@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies in each headquarter with a bar chart , and list by the Headquarters from high to low .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "Headquarters",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What are the category of music festivals with result \"Awarded\" , and count them by a bar chart , I want to list x axis in asc order .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC'}",
    "record_name": "2439@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the category of music festivals with result \"Awarded\" , and count them by a bar chart , I want to list x axis in asc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "x",
      "axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "What is the total number of captains with different classes ? , and list Y in descending order please .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC'}",
    "record_name": "2753@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of captains with different classes ? , and list Y in descending order please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "with",
      "different",
      "classes",
      "?",
      ",",
      "and",
      "list",
      "Y",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Compare the total number of different ranks using a bar graph , and sort bar in ascending order .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC'}",
    "record_name": "2751@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of different ranks using a bar graph , and sort bar in ascending order .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "different",
      "ranks",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "sort",
      "bar",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "Rank",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "How many climbers are from each country , could you list by the total number from high to low please ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC'}",
    "record_name": "485@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many climbers are from each country , could you list by the total number from high to low please ?",
    "question_toks": [
      "How",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      ",",
      "could",
      "you",
      "list",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Bar chart of how many headquarters from each headquarters",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters'}",
    "record_name": "1518",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of how many headquarters from each headquarters",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "how",
      "many",
      "headquarters",
      "from",
      "each",
      "headquarters"
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "A bar chart about how many music festivals have had each kind of result , ordered descending by count ?",
    "VQL": "Visualize BAR SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC'}",
    "record_name": "2434",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many music festivals have had each kind of result , ordered descending by count ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "music",
      "festivals",
      "have",
      "had",
      "each",
      "kind",
      "of",
      "result",
      ",",
      "ordered",
      "descending",
      "by",
      "count",
      "?"
    ],
    "query": "Visualize BAR SELECT Result , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "RESULT",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "How many invoices were billed from each state Plot them as bar chart , and order by the Y-axis from low to high .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC'}",
    "record_name": "2856@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many invoices were billed from each state Plot them as bar chart , and order by the Y-axis from low to high .",
    "question_toks": [
      "How",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Show the number of companies whose headquarters are not from USA fpr each main industry in a bar chart , and display y axis from low to high order please .",
    "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
    "db_id": "gas_company",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC\"}",
    "record_name": "1506@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies whose headquarters are not from USA fpr each main industry in a bar chart , and display y axis from low to high order please .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "whose",
      "headquarters",
      "are",
      "not",
      "from",
      "USA",
      "fpr",
      "each",
      "main",
      "industry",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "FROM",
      "company",
      "WHERE",
      "headquarters",
      "!",
      "=",
      "'USA'",
      "GROUP",
      "BY",
      "Main_Industry",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Main_Industry",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the names of all the playlists ?",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "db_id": "store_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name'}",
    "record_name": "2855",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the names of all the playlists ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      "?"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "How many climbers are from each country , rank X-axis from low to high order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "485@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many climbers are from each country , rank X-axis from low to high order .",
    "question_toks": [
      "How",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      ",",
      "rank",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Please give me a pie chart to show the proportion of results of all music festival .",
    "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "db_id": "music_4",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result'}",
    "record_name": "2440",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Please give me a pie chart to show the proportion of results of all music festival .",
    "question_toks": [
      "Please",
      "give",
      "me",
      "a",
      "pie",
      "chart",
      "to",
      "show",
      "the",
      "proportion",
      "of",
      "results",
      "of",
      "all",
      "music",
      "festival",
      "."
    ],
    "query": "Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "count yearid for visualizing a line chart , and sort X-axis in descending order .",
    "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR'}",
    "record_name": "157@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "year"
      ],
      "vis": 2
    },
    "question": "count yearid for visualizing a line chart , and sort X-axis in descending order .",
    "question_toks": [
      "count",
      "yearid",
      "for",
      "visualizing",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "sort",
      "X-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "yearid",
      "DESC",
      "BIN",
      "yearid",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]"
  },
  {
    "nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship , and sort Y in asc order .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC'}",
    "record_name": "2776@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              1,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship , and sort Y in asc order .",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      ",",
      "and",
      "sort",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2607",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart , could you display by the Citizenship in desc please ?",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC'}",
    "record_name": "2774@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart , could you display by the Citizenship in desc please ?",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "display",
      "by",
      "the",
      "Citizenship",
      "in",
      "desc",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Show me a bar chart for how many captains with younger than 50 are in each rank ? , list by the y-axis in asc .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC'}",
    "record_name": "2737@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many captains with younger than 50 are in each rank ? , list by the y-axis in asc .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      "?",
      ",",
      "list",
      "by",
      "the",
      "y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart , show names from high to low order please .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC'}",
    "record_name": "2750@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart , show names from high to low order please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      "and",
      "class",
      "?",
      "Let",
      "class",
      "as",
      "X-axis",
      ",",
      "and",
      "categorize",
      "by",
      "rank",
      "with",
      "a",
      "stacked",
      "bar",
      "chart",
      ",",
      "show",
      "names",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "How many companies in each headquarter ? Plot a bar chart , I want to order in descending by the Headquarters please .",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC'}",
    "record_name": "1518@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies in each headquarter ? Plot a bar chart , I want to order in descending by the Headquarters please .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "in",
      "each",
      "headquarter",
      "?",
      "Plot",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "Headquarters",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and rank by the Y-axis in descending .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC'}",
    "record_name": "2605@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and rank by the Y-axis in descending .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Y-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "What are the main indstries and total market value for each industry . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
    "record_name": "1508",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the main indstries and total market value for each industry . Visualize by bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart , rank by the X-axis in ascending .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC'}",
    "record_name": "2750@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart , rank by the X-axis in ascending .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      "and",
      "class",
      "?",
      "Let",
      "class",
      "as",
      "X-axis",
      ",",
      "and",
      "categorize",
      "by",
      "rank",
      "with",
      "a",
      "stacked",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "X-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Compare the total number of captains with different classes using a bar graph .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class'}",
    "record_name": "2753",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of captains with different classes using a bar graph .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "with",
      "different",
      "classes",
      "using",
      "a",
      "bar",
      "graph",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Create a bar chart showing the number of author across author",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author'}",
    "record_name": "3263",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing the number of author across author",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "author",
      "across",
      "author"
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]"
  },
  {
    "nl_queries": "Stacked bar of class and the number of class colored by Rank , and display in asc by the x axis please .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC'}",
    "record_name": "2750@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Stacked bar of class and the number of class colored by Rank , and display in asc by the x axis please .",
    "question_toks": [
      "Stacked",
      "bar",
      "of",
      "class",
      "and",
      "the",
      "number",
      "of",
      "class",
      "colored",
      "by",
      "Rank",
      ",",
      "and",
      "display",
      "in",
      "asc",
      "by",
      "the",
      "x",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "Class",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the name of all playlist , and show by the the number of name from high to low .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC'}",
    "record_name": "2855@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the name of all playlist , and show by the the number of name from high to low .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "and",
      "show",
      "by",
      "the",
      "the",
      "number",
      "of",
      "name",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Give me the proportion about the location of each party with a pie chart .",
    "VQL": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location'}",
    "record_name": "2506",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me the proportion about the location of each party with a pie chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "proportion",
      "about",
      "the",
      "location",
      "of",
      "each",
      "party",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Compute the total how many class across class as a pie chart .",
    "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class'}",
    "record_name": "2752",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Compute the total how many class across class as a pie chart .",
    "question_toks": [
      "Compute",
      "the",
      "total",
      "how",
      "many",
      "class",
      "across",
      "class",
      "as",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the names and surface areas of the 5 largest countries . Visualize by bar chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 , show by the total number from high to low .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC'}",
    "record_name": "2605@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 , show by the total number from high to low .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      ",",
      "show",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "What are the different ship flags , and how many ships have each . Show a pie chart .",
    "VQL": "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag'}",
    "record_name": "2738",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the different ship flags , and how many ships have each . Show a pie chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2607",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Count the number of captains that have each rank . Show the proportion .",
    "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank'}",
    "record_name": "2746",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Count the number of captains that have each rank . Show the proportion .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "that",
      "have",
      "each",
      "rank",
      ".",
      "Show",
      "the",
      "proportion",
      "."
    ],
    "query": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend , list in asc by the date_of_latest_revision please .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend , list in asc by the date_of_latest_revision please .",
    "question_toks": [
      "On",
      "which",
      "days",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      "on",
      "catalogs",
      ",",
      "bin",
      "the",
      "date",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "to",
      "show",
      "the",
      "trend",
      ",",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "date_of_latest_revision",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "ASC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Draw a bar chart that counts the number of venues of each workshop .",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue'}",
    "record_name": "3260",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart that counts the number of venues of each workshop .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "that",
      "counts",
      "the",
      "number",
      "of",
      "venues",
      "of",
      "each",
      "workshop",
      "."
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Create a pie chart showing the total number across citizenship .",
    "VQL": "Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship'}",
    "record_name": "2773",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing the total number across citizenship .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "across",
      "citizenship",
      "."
    ],
    "query": "Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , and could you rank by the names from low to high ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , and could you rank by the names from low to high ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "names",
      "from",
      "low",
      "to",
      "high",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the names of all the playlists ? , and show by the y axis from low to high .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC'}",
    "record_name": "2855@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the names of all the playlists ? , and show by the y axis from low to high .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      "?",
      ",",
      "and",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , and could you display Y in asc order ?",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC'}",
    "record_name": "1371@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , and could you display Y in asc order ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "investors",
      "of",
      "entrepreneurs",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "entrepreneurs",
      "invested",
      "by",
      "each",
      "investor",
      ",",
      "and",
      "could",
      "you",
      "display",
      "Y",
      "in",
      "asc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "What are the main indstries and total market value for each industry Visualize by bar chart , I want to sort Y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC'}",
    "record_name": "1508@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the main indstries and total market value for each industry Visualize by bar chart , I want to sort Y-axis in descending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "Y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category in a bar chart , and sort by the y-axis from high to low .",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC'}",
    "record_name": "2436@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of music festivals of each category in a bar chart , and sort by the y-axis from high to low .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Return the number of music festivals of each category , show by the Category in desc .",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC'}",
    "record_name": "2436@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of music festivals of each category , show by the Category in desc .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "music",
      "festivals",
      "of",
      "each",
      "category",
      ",",
      "show",
      "by",
      "the",
      "Category",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and list y-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC'}",
    "record_name": "3269@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and list y-axis in ascending order .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "and",
      "list",
      "y-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Draw a pie chart for how many climbers are from each country ?",
    "VQL": "Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country'}",
    "record_name": "484",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Draw a pie chart for how many climbers are from each country ?",
    "question_toks": [
      "Draw",
      "a",
      "pie",
      "chart",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "query": "Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Return a line chart on how many players enter hall of fame each year ?",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid'}",
    "record_name": "156",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart on how many players enter hall of fame each year ?",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "on",
      "how",
      "many",
      "players",
      "enter",
      "hall",
      "of",
      "fame",
      "each",
      "year",
      "?"
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a scatter chart shows their average life expectancy and the total population of each continent",
    "VQL": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a scatter chart shows their average life expectancy and the total population of each continent",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "scatter",
      "chart",
      "shows",
      "their",
      "average",
      "life",
      "expectancy",
      "and",
      "the",
      "total",
      "population",
      "of",
      "each",
      "continent"
    ],
    "query": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "What is the total amount of grant money given to each organization and what is its id . Show the correlation .",
    "VQL": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id'}",
    "record_name": "2961",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "What is the total amount of grant money given to each organization and what is its id . Show the correlation .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "amount",
      "of",
      "grant",
      "money",
      "given",
      "to",
      "each",
      "organization",
      "and",
      "what",
      "is",
      "its",
      "id",
      ".",
      "Show",
      "the",
      "correlation",
      "."
    ],
    "query": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "grant_amount",
      ")",
      ",",
      "organisation_id",
      "FROM",
      "Grants",
      "GROUP",
      "BY",
      "organisation_id"
    ],
    "choose_schema": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]",
    "choose_schema_rat": "Table Documents, columns = [*,document_id, document_type_code, grant_id, sent_date, response_received_date, other_details]@SEP@Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]"
  },
  {
    "nl_queries": "For each citizenship , how many singers are from that country , and display bars in asc order .",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC'}",
    "record_name": "2774@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each citizenship , how many singers are from that country , and display bars in asc order .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "that",
      "country",
      ",",
      "and",
      "display",
      "bars",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Count the number of captains younger than 50 of each rank in a pie chart .",
    "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank'}",
    "record_name": "2736",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Count the number of captains younger than 50 of each rank in a pie chart .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "captains",
      "younger",
      "than",
      "50",
      "of",
      "each",
      "rank",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Create a bar chart showing the number of author across author , and show from high to low by the x axis .",
    "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC'}",
    "record_name": "3263@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing the number of author across author , and show from high to low by the x axis .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "author",
      "across",
      "author",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author",
      "ORDER",
      "BY",
      "Author",
      "DESC"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]"
  },
  {
    "nl_queries": "What is the average number of attendance at home games for each year Plot them as line chart , and could you display year in desc order ?",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC'}",
    "record_name": "171@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "What is the average number of attendance at home games for each year Plot them as line chart , and could you display year in desc order ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "for",
      "each",
      "year",
      "Plot",
      "them",
      "as",
      "line",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "display",
      "year",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the research staff details , and order in ascending order .",
    "VQL": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC'}",
    "record_name": "2960",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          36,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the research staff details , and order in ascending order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "research",
      "staff",
      "details",
      ",",
      "and",
      "order",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "staff_details",
      ",",
      "COUNT",
      "(",
      "staff_details",
      ")",
      "FROM",
      "Research_Staff",
      "GROUP",
      "BY",
      "staff_details",
      "ORDER",
      "BY",
      "staff_details",
      "ASC"
    ],
    "choose_schema": "Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]",
    "choose_schema_rat": "Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]@SEP@Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]"
  },
  {
    "nl_queries": "What details are there on the research staff ? List the result in ascending alphabetical order , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC'}",
    "record_name": "2960",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          36,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What details are there on the research staff ? List the result in ascending alphabetical order , and count them by a bar chart",
    "question_toks": [
      "What",
      "details",
      "are",
      "there",
      "on",
      "the",
      "research",
      "staff",
      "?",
      "List",
      "the",
      "result",
      "in",
      "ascending",
      "alphabetical",
      "order",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "staff_details",
      ",",
      "COUNT",
      "(",
      "staff_details",
      ")",
      "FROM",
      "Research_Staff",
      "GROUP",
      "BY",
      "staff_details",
      "ORDER",
      "BY",
      "staff_details",
      "ASC"
    ],
    "choose_schema": "Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  },
  {
    "nl_queries": "Show all main industry and total market value in each industry , show in asc by the x-axis .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC'}",
    "record_name": "1508@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all main industry and total market value in each industry , show in asc by the x-axis .",
    "question_toks": [
      "Show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      ",",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Bar graph to show the number of rank from different rank , and display by the Rank in descending .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC'}",
    "record_name": "2751@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of rank from different rank , and display by the Rank in descending .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "rank",
      "from",
      "different",
      "rank",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Rank",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "Rank",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Bar graph to show the number of rank from different rank , and list how many rank in asc order please .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC'}",
    "record_name": "2751@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of rank from different rank , and list how many rank in asc order please .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "rank",
      "from",
      "different",
      "rank",
      ",",
      "and",
      "list",
      "how",
      "many",
      "rank",
      "in",
      "asc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Rank",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY'}",
    "record_name": "2499",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      ",",
      "and",
      "count",
      "the",
      "first",
      "year",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Bar chart of the total number from each country",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country'}",
    "record_name": "485",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each country",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "country"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "What are the number of the names of all the playlists ? , display by the x-axis from high to low please .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC'}",
    "record_name": "2855@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the names of all the playlists ? , display by the x-axis from high to low please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      "?",
      ",",
      "display",
      "by",
      "the",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Draw a bar chart of investor versus the total number",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1371",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of investor versus the total number",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "investor",
      "versus",
      "the",
      "total",
      "number"
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality in a bar chart , order by the names from high to low .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart , order by the names from high to low .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "by",
      "the",
      "names",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "How many captains with younger than 50 are in each rank , display by the the total number from high to low .",
    "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC'}",
    "record_name": "2737@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many captains with younger than 50 are in each rank , display by the the total number from high to low .",
    "question_toks": [
      "How",
      "many",
      "captains",
      "with",
      "younger",
      "than",
      "50",
      "are",
      "in",
      "each",
      "rank",
      ",",
      "display",
      "by",
      "the",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "captain",
      "WHERE",
      "age",
      "<",
      "50",
      "GROUP",
      "BY",
      "rank",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Show all main industry and total market value in each industry , order by the x-axis from high to low .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC'}",
    "record_name": "1508@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all main industry and total market value in each industry , order by the x-axis from high to low .",
    "question_toks": [
      "Show",
      "all",
      "main",
      "industry",
      "and",
      "total",
      "market",
      "value",
      "in",
      "each",
      "industry",
      ",",
      "order",
      "by",
      "the",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Display a bar chart for how many climbers are from each country ? , and could you display X in asc order ?",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "485@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many climbers are from each country ? , and could you display X in asc order ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "climbers",
      "are",
      "from",
      "each",
      "country",
      "?",
      ",",
      "and",
      "could",
      "you",
      "display",
      "X",
      "in",
      "asc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table climber, columns = [*,Climber_ID, Name, Country, Time, Points, Mountain_ID]",
    "choose_schema_rat": "Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]@SEP@Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]"
  },
  {
    "nl_queries": "Bar graph to show how many yearid from different yearid , list in descending by the Y-axis .",
    "VQL": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) DESC BIN yearid BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) DESC', 'binning': 'BIN yearid BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) DESC BIN yearid BY WEEKDAY'}",
    "record_name": "151@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              145,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        145,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar graph to show how many yearid from different yearid , list in descending by the Y-axis .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "yearid",
      "from",
      "different",
      "yearid",
      ",",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) DESC BIN yearid BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "yearid",
      ",",
      "COUNT",
      "(",
      "yearid",
      ")",
      "FROM",
      "hall_of_fame",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "yearid",
      ")",
      "DESC",
      "BIN",
      "yearid",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]"
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort names in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort names in ascending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "sort",
      "names",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities . Show the proportion .",
    "VQL": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2606",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities . Show the proportion .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ".",
      "Show",
      "the",
      "proportion",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "How many home games by each year (bin the year attr into weekdays interval) ? Give me a line chart , list X-axis from low to high order .",
    "VQL": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC BIN year BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC', 'binning': 'BIN year BY YEAR'}, 'VQL': 'Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC BIN year BY YEAR'}",
    "record_name": "166@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              153,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "year"
      ],
      "vis": 2
    },
    "question": "How many home games by each year (bin the year attr into weekdays interval) ? Give me a line chart , list X-axis from low to high order .",
    "question_toks": [
      "How",
      "many",
      "home",
      "games",
      "by",
      "each",
      "year",
      "(bin",
      "the",
      "year",
      "attr",
      "into",
      "weekdays",
      "interval)",
      "?",
      "Give",
      "me",
      "a",
      "line",
      "chart",
      ",",
      "list",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC BIN year BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "ORDER",
      "BY",
      "year",
      "ASC",
      "BIN",
      "year",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Show me a bar chart comparing the total number of captains in each rank .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank'}",
    "record_name": "2751",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart comparing the total number of captains in each rank .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Draw a pie chart to show the proportion of acceptance result .",
    "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result'}",
    "record_name": "3264",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Draw a pie chart to show the proportion of acceptance result .",
    "question_toks": [
      "Draw",
      "a",
      "pie",
      "chart",
      "to",
      "show",
      "the",
      "proportion",
      "of",
      "acceptance",
      "result",
      "."
    ],
    "query": "Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , I want to display y axis from low to high order .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC'}",
    "record_name": "2776@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              1,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart , I want to display y axis from low to high order .",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "display",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "What is the average age of captains in different classes ? , order by the bars from high to low .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC'}",
    "record_name": "2740@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average age of captains in different classes ? , order by the bars from high to low .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "captains",
      "in",
      "different",
      "classes",
      "?",
      ",",
      "order",
      "by",
      "the",
      "bars",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , I want to show in desc by the y axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC'}",
    "record_name": "2607@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , I want to show in desc by the y axis .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "I",
      "want",
      "to",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "Plot the average of age by grouped by class as a bar graph",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS'}",
    "record_name": "2740",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the average of age by grouped by class as a bar graph",
    "question_toks": [
      "Plot",
      "the",
      "average",
      "of",
      "age",
      "by",
      "grouped",
      "by",
      "class",
      "as",
      "a",
      "bar",
      "graph"
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "A bar chart for listing the number of the name of all playlist , and list x axis from low to high order .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC'}",
    "record_name": "2855@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for listing the number of the name of all playlist , and list x axis from low to high order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "name",
      "of",
      "all",
      "playlist",
      ",",
      "and",
      "list",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "List the number of invoices from the US , grouped by state by a bar chart .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state'}",
    "record_name": "2856",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of invoices from the US , grouped by state by a bar chart .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "invoices",
      "from",
      "the",
      "US",
      ",",
      "grouped",
      "by",
      "state",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Give me a pie to show the total number from different headquarters .",
    "VQL": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters'}",
    "record_name": "1497",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show the total number from different headquarters .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "headquarters",
      "."
    ],
    "query": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "What is the total number of captains with different classes ?",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class'}",
    "record_name": "2753",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of captains with different classes ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "with",
      "different",
      "classes",
      "?"
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Give me a histogram for what are the names of the top 8 countries by total invoice size and what are those sizes ?",
    "VQL": "Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8'}",
    "record_name": "2857",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          44,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              46,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the names of the top 8 countries by total invoice size and what are those sizes ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "names",
      "of",
      "the",
      "top",
      "8",
      "countries",
      "by",
      "total",
      "invoice",
      "size",
      "and",
      "what",
      "are",
      "those",
      "sizes",
      "?"
    ],
    "query": "Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_country",
      ",",
      "SUM",
      "(",
      "total",
      ")",
      "FROM",
      "invoices",
      "GROUP",
      "BY",
      "billing_country",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "total",
      ")",
      "DESC",
      "LIMIT",
      "8"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]@SEP@Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]"
  },
  {
    "nl_queries": "How many entrepreneurs correspond to each investor , could you display Y in asc order ?",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC'}",
    "record_name": "1371@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many entrepreneurs correspond to each investor , could you display Y in asc order ?",
    "question_toks": [
      "How",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      ",",
      "could",
      "you",
      "display",
      "Y",
      "in",
      "asc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "What are the names and areas of countries with the top 5 largest area . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and areas of countries with the top 5 largest area . Visualize by bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Return the results of all music festivals using a bar chart , and show Y in desc order .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC'}",
    "record_name": "2441@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the results of all music festivals using a bar chart , and show Y in desc order .",
    "question_toks": [
      "Return",
      "the",
      "results",
      "of",
      "all",
      "music",
      "festivals",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "Y",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Plot date of latest revision by the number of date of latest revision as a line chart , and list date_of_latest_revision from high to low order .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Plot date of latest revision by the number of date of latest revision as a line chart , and list date_of_latest_revision from high to low order .",
    "question_toks": [
      "Plot",
      "date",
      "of",
      "latest",
      "revision",
      "by",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "list",
      "date_of_latest_revision",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "DESC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ],
    "choose_schema": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]"
  },
  {
    "nl_queries": "Create a pie chart showing the total number across nationality .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing the total number across nationality .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "across",
      "nationality",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "How many entrepreneurs correspond to each investor , and show from high to low by the bars please .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC'}",
    "record_name": "1371@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many entrepreneurs correspond to each investor , and show from high to low by the bars please .",
    "question_toks": [
      "How",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "bars",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "What are the number of the countries of mountains with height bigger than 5000 ?",
    "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country'}",
    "record_name": "489",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the number of the countries of mountains with height bigger than 5000 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?"
    ],
    "query": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Show me a bar chart for how many invoices were billed from each state ? , and show in ascending by the billing_state .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC'}",
    "record_name": "2856@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many invoices were billed from each state ? , and show in ascending by the billing_state .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "invoices",
      "were",
      "billed",
      "from",
      "each",
      "state",
      "?",
      ",",
      "and",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "billing_state",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "billing_state",
      "ASC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "Visualize a pie chart for how many authors submit to the workshop .",
    "VQL": "Visualize PIE SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Author , COUNT(Author) FROM submission GROUP BY Author', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Author , COUNT(Author) FROM submission GROUP BY Author'}",
    "record_name": "3262",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize a pie chart for how many authors submit to the workshop .",
    "question_toks": [
      "Visualize",
      "a",
      "pie",
      "chart",
      "for",
      "how",
      "many",
      "authors",
      "submit",
      "to",
      "the",
      "workshop",
      "."
    ],
    "query": "Visualize PIE SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Author",
      ",",
      "COUNT",
      "(",
      "Author",
      ")",
      "FROM",
      "submission",
      "GROUP",
      "BY",
      "Author"
    ],
    "choose_schema": "Table submission, columns = [*,Submission_ID, Scores, Author, College]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , could you list x axis in desc order ?",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC'}",
    "record_name": "2607@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , could you list x axis in desc order ?",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      "Show",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "x",
      "axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "DESC"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Return the number of venues of each workshop in a bar chart , could you rank by the total number in asc ?",
    "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC'}",
    "record_name": "3260@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the number of venues of each workshop in a bar chart , could you rank by the total number in asc ?",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "venues",
      "of",
      "each",
      "workshop",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Venue",
      ")",
      "ASC"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "A pie chart for what are the number of the category of music festivals with result \"Awarded\" ?",
    "VQL": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2438",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart for what are the number of the category of music festivals with result \"Awarded\" ?",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?"
    ],
    "query": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show me a pie chart comparing the total number of captains in each rank .",
    "VQL": "Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank'}",
    "record_name": "2754",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me a pie chart comparing the total number of captains in each rank .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "pie",
      "chart",
      "comparing",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      "."
    ],
    "query": "Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities with a pie chart .",
    "VQL": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2606",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities with a pie chart .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ],
    "choose_schema": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
    "choose_schema_rat": "Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]@SEP@Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]"
  },
  {
    "nl_queries": "how many entrepreneurs correspond to each investor ? , and sort Y in asc order .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC'}",
    "record_name": "1371@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "how many entrepreneurs correspond to each investor ? , and sort Y in asc order .",
    "question_toks": [
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?",
      ",",
      "and",
      "sort",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "I want to see trend of the total number by yearid",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid'}",
    "record_name": "156",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend of the total number by yearid",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "total",
      "number",
      "by",
      "yearid"
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]"
  },
  {
    "nl_queries": "When do all the researcher role staff stop working ? Bin the time into weekday interval and count them with a bar chart , order by the the number of date to in asc .",
    "VQL": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY COUNT(date_to) ASC BIN date_to BY WEEKDAY",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY COUNT(date_to) ASC', 'binning': 'BIN date_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY COUNT(date_to) ASC BIN date_to BY WEEKDAY'}",
    "record_name": "2963@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              27,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "weekday"
      ],
      "vis": 0
    },
    "question": "When do all the researcher role staff stop working ? Bin the time into weekday interval and count them with a bar chart , order by the the number of date to in asc .",
    "question_toks": [
      "When",
      "do",
      "all",
      "the",
      "researcher",
      "role",
      "staff",
      "stop",
      "working",
      "?",
      "Bin",
      "the",
      "time",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "by",
      "the",
      "the",
      "number",
      "of",
      "date",
      "to",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY COUNT(date_to) ASC BIN date_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_to",
      ")",
      "ASC",
      "BIN",
      "date_to",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Staff_Roles, columns = [*,role_code, role_description]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  },
  {
    "nl_queries": "Draw a bar chart of main industry versus total number of market value , I want to show by the X-axis from low to high .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC'}",
    "record_name": "1508@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of main industry versus total number of market value , I want to show by the X-axis from low to high .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "main",
      "industry",
      "versus",
      "total",
      "number",
      "of",
      "market",
      "value",
      ",",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Group by the result and count them by a bar chart , rank from low to high by the Y .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC'}",
    "record_name": "3261@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Group by the result and count them by a bar chart , rank from low to high by the Y .",
    "question_toks": [
      "Group",
      "by",
      "the",
      "result",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "ASC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Show me a line chart for how many players enter hall of fame each year ?",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid'}",
    "record_name": "156",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me a line chart for how many players enter hall of fame each year ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "line",
      "chart",
      "for",
      "how",
      "many",
      "players",
      "enter",
      "hall",
      "of",
      "fame",
      "each",
      "year",
      "?"
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "A pie chart about how many entrepreneurs correspond to each investor ?",
    "VQL": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1370",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart about how many entrepreneurs correspond to each investor ?",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "about",
      "how",
      "many",
      "entrepreneurs",
      "correspond",
      "to",
      "each",
      "investor",
      "?"
    ],
    "query": "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and could you list in ascending by the y axis ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and could you list in ascending by the y axis ?",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "Return a bar chart on what are the different ship flags , and how many ships have each ? , order in asc by the bar .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC'}",
    "record_name": "2739@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on what are the different ship flags , and how many ships have each ? , order in asc by the bar .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "Flag",
      "ASC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Return the countries of the mountains that have a height larger than 5000 , and count them by a bar chart , display X in descending order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "490@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the countries of the mountains that have a height larger than 5000 , and count them by a bar chart , display X in descending order .",
    "question_toks": [
      "Return",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "X",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "List the number of invoices from the US , grouped by state by a bar chart , sort x axis from low to high order .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC'}",
    "record_name": "2856@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of invoices from the US , grouped by state by a bar chart , sort x axis from low to high order .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "invoices",
      "from",
      "the",
      "US",
      ",",
      "grouped",
      "by",
      "state",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "billing_state",
      "ASC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000 , list in desc by the X .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC'}",
    "record_name": "490@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000 , list in desc by the X .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "DESC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "For each headquarter , what are the headquarter and how many companies are centered there Visualize by bar chart , and show from low to high by the total number please .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC'}",
    "record_name": "1498@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each headquarter , what are the headquarter and how many companies are centered there Visualize by bar chart , and show from low to high by the total number please .",
    "question_toks": [
      "For",
      "each",
      "headquarter",
      ",",
      "what",
      "are",
      "the",
      "headquarter",
      "and",
      "how",
      "many",
      "companies",
      "are",
      "centered",
      "there",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Bar chart of how many headquarters from each headquarters , list names in asc order .",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC'}",
    "record_name": "1518@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of how many headquarters from each headquarters , list names in asc order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "how",
      "many",
      "headquarters",
      "from",
      "each",
      "headquarters",
      ",",
      "list",
      "names",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "Headquarters",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000 , and I want to list y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC'}",
    "record_name": "490@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000 , and I want to list y-axis in asc order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "returning",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "the",
      "mountains",
      "that",
      "have",
      "a",
      "height",
      "larger",
      "than",
      "5000",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Country",
      ")",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Draw a pie chart for what are the name and level of catalog structure with level number between 5 and 10",
    "VQL": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2604",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Draw a pie chart for what are the name and level of catalog structure with level number between 5 and 10",
    "question_toks": [
      "Draw",
      "a",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10"
    ],
    "query": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "Give me a bar chart , that group by location and count them , show by the Location in descending .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC'}",
    "record_name": "2507@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart , that group by location and count them , show by the Location in descending .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "that",
      "group",
      "by",
      "location",
      "and",
      "count",
      "them",
      ",",
      "show",
      "by",
      "the",
      "Location",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "Location",
      "DESC"
    ],
    "choose_schema": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "Plot the average of age by grouped by class as a bar graph , and show by the bar in descending .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC'}",
    "record_name": "2740@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the average of age by grouped by class as a bar graph , and show by the bar in descending .",
    "question_toks": [
      "Plot",
      "the",
      "average",
      "of",
      "age",
      "by",
      "grouped",
      "by",
      "class",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "show",
      "by",
      "the",
      "bar",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "Class",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "I want to know the proportion of the total number for each venue .",
    "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue'}",
    "record_name": "3259",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of the total number for each venue .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "number",
      "for",
      "each",
      "venue",
      "."
    ],
    "query": "Visualize PIE SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]"
  },
  {
    "nl_queries": "Plot the number of result by grouped by result as a bar graph , could you order bar from low to high order please ?",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC'}",
    "record_name": "2441@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of result by grouped by result as a bar graph , could you order bar from low to high order please ?",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "result",
      "by",
      "grouped",
      "by",
      "result",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "could",
      "you",
      "order",
      "bar",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "Result",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , I want to list x axis in desc order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , I want to list x axis in desc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "x",
      "axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "what are the main indstries and total market value for each industry ? , and sort by the Y in descending .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC'}",
    "record_name": "1508@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "what are the main indstries and total market value for each industry ? , and sort by the Y in descending .",
    "question_toks": [
      "what",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "?",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Bar chart x axis nationality y axis the total number , show by the X-axis from low to high .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis nationality y axis the total number , show by the X-axis from low to high .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "nationality",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "show",
      "by",
      "the",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "For each citizenship , what is the maximum net worth Visualize by bar chart , and rank by the X in descending .",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC'}",
    "record_name": "2776@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each citizenship , what is the maximum net worth Visualize by bar chart , and rank by the X in descending .",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "what",
      "is",
      "the",
      "maximum",
      "net",
      "worth",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "X",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , show by the names in asc .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC'}",
    "record_name": "3269@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , show by the names in asc .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "show",
      "by",
      "the",
      "names",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "ASC"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]@SEP@Table sqlite_sequence, columns = [*,name, seq]"
  },
  {
    "nl_queries": "Create a pie chart showing how many investor across investor .",
    "VQL": "Visualize PIE SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1372",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing how many investor across investor .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "how",
      "many",
      "investor",
      "across",
      "investor",
      "."
    ],
    "query": "Visualize PIE SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 . Show a pie chart .",
    "VQL": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2604",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 . Show a pie chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ],
    "choose_schema": "Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
    "choose_schema_rat": "Table Catalogs, columns = [*,catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]@SEP@Table Catalog_Structure, columns = [*,catalog_level_number, catalog_id, catalog_level_name]@SEP@Table Catalog_Contents, columns = [*,catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]@SEP@Table Catalog_Contents_Additional_Attributes, columns = [*,catalog_entry_id, catalog_level_number, attribute_id, attribute_value]"
  },
  {
    "nl_queries": "What are the number of the category of music festivals with result \"Awarded\" ?",
    "VQL": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
    "record_name": "2438",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the number of the category of music festivals with result \"Awarded\" ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?"
    ],
    "query": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Bar chart x axis year y axis the number of year",
    "VQL": "Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game', 'binning': 'BIN year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY'}",
    "record_name": "165",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        2,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis year y axis the number of year",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "year",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "year"
    ],
    "query": "Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "COUNT",
      "(",
      "year",
      ")",
      "FROM",
      "home_game",
      "BIN",
      "year",
      "BY",
      "WEEKDAY"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Compare the total number of different ranks using a bar graph , and sort from low to high by the Y .",
    "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC'}",
    "record_name": "2751@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the total number of different ranks using a bar graph , and sort from low to high by the Y .",
    "question_toks": [
      "Compare",
      "the",
      "total",
      "number",
      "of",
      "different",
      "ranks",
      "using",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "sort",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Rank",
      ",",
      "COUNT",
      "(",
      "Rank",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Rank",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]"
  },
  {
    "nl_queries": "Scatter chart . what is the total amount of grants given by each organisations ? Also list the organisation id .",
    "VQL": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "db_id": "tracking_grants_for_research",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id'}",
    "record_name": "2961",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Scatter chart . what is the total amount of grants given by each organisations ? Also list the organisation id .",
    "question_toks": [
      "Scatter",
      "chart",
      ".",
      "what",
      "is",
      "the",
      "total",
      "amount",
      "of",
      "grants",
      "given",
      "by",
      "each",
      "organisations",
      "?",
      "Also",
      "list",
      "the",
      "organisation",
      "id",
      "."
    ],
    "query": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "grant_amount",
      ")",
      ",",
      "organisation_id",
      "FROM",
      "Grants",
      "GROUP",
      "BY",
      "organisation_id"
    ],
    "choose_schema": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]",
    "choose_schema_rat": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]@SEP@Table Documents, columns = [*,document_id, document_type_code, grant_id, sent_date, response_received_date, other_details]@SEP@Table Organisation_Types, columns = [*,organisation_type, organisation_type_description]"
  },
  {
    "nl_queries": "Visualize the proportion of the total number of captains in each class using a pie chart .",
    "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class'}",
    "record_name": "2752",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize the proportion of the total number of captains in each class using a pie chart .",
    "question_toks": [
      "Visualize",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "class",
      "using",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Please give me a bar chart to show the distribution of results of all music festival , and display by the Y-axis from low to high .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC'}",
    "record_name": "2441@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please give me a bar chart to show the distribution of results of all music festival , and display by the Y-axis from low to high .",
    "question_toks": [
      "Please",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "distribution",
      "of",
      "results",
      "of",
      "all",
      "music",
      "festival",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "A stacked bar graph shows the total number of captains categorize by ranks of different classes , and I want to order total number from low to high order please .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC'}",
    "record_name": "2750@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A stacked bar graph shows the total number of captains categorize by ranks of different classes , and I want to order total number from low to high order please .",
    "question_toks": [
      "A",
      "stacked",
      "bar",
      "graph",
      "shows",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "categorize",
      "by",
      "ranks",
      "of",
      "different",
      "classes",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Class",
      ")",
      "ASC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the countries of mountains with height bigger than 5000 ? , and I want to show by the X in ascending .",
    "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "db_id": "climbing",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "490@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5000.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the countries of mountains with height bigger than 5000 ? , and I want to show by the X in ascending .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "countries",
      "of",
      "mountains",
      "with",
      "height",
      "bigger",
      "than",
      "5000",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "X",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "Country",
      ")",
      "FROM",
      "mountain",
      "WHERE",
      "Height",
      ">",
      "5000",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Return the results of all music festivals using a bar chart , I want to sort Y in ascending order .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC'}",
    "record_name": "2441@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the results of all music festivals using a bar chart , I want to sort Y in ascending order .",
    "question_toks": [
      "Return",
      "the",
      "results",
      "of",
      "all",
      "music",
      "festivals",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "Y",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Show me a pie chart for how many hosts does each nationality have ? List the nationality and the count .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me a pie chart for how many hosts does each nationality have ? List the nationality and the count .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "pie",
      "chart",
      "for",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]"
  },
  {
    "nl_queries": "What are the main indstries and total market value for each industry Visualize by bar chart , I want to order sum market value in asc order .",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC'}",
    "record_name": "1508@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the main indstries and total market value for each industry Visualize by bar chart , I want to order sum market value in asc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "sum",
      "market",
      "value",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "sum",
      "(",
      "market_value",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Compute the proportion of acceptance result , and return a pie chart .",
    "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result'}",
    "record_name": "3264",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Compute the proportion of acceptance result , and return a pie chart .",
    "question_toks": [
      "Compute",
      "the",
      "proportion",
      "of",
      "acceptance",
      "result",
      ",",
      "and",
      "return",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "what are the main indstries and total market value for each industry ? , and could you display bars in asc order ?",
    "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC'}",
    "record_name": "1508@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "what are the main indstries and total market value for each industry ? , and could you display bars in asc order ?",
    "question_toks": [
      "what",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "?",
      ",",
      "and",
      "could",
      "you",
      "display",
      "bars",
      "in",
      "asc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry",
      "ORDER",
      "BY",
      "Main_Industry",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Draw a bar chart for what are the different ship flags , and how many ships have each ? , show names in ascending order please .",
    "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC'}",
    "record_name": "2739@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the different ship flags , and how many ships have each ? , show names in ascending order please .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "ship",
      "flags",
      ",",
      "and",
      "how",
      "many",
      "ships",
      "have",
      "each",
      "?",
      ",",
      "show",
      "names",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Flag",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "GROUP",
      "BY",
      "flag",
      "ORDER",
      "BY",
      "Flag",
      "ASC"
    ],
    "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and display y-axis in desc order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and display y-axis in desc order .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "y-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ],
    "choose_schema": "Table host, columns = [*,Host_ID, Name, Nationality, Age]",
    "choose_schema_rat": "Table party, columns = [*,Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]@SEP@Table party_host, columns = [*,Party_ID, Host_ID, Is_Main_in_Charge]@SEP@Table host, columns = [*,Host_ID, Name, Nationality, Age]"
  },
  {
    "nl_queries": "What are the top 5 countries by number of invoices and how many do they have . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5'}",
    "record_name": "2850",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          44,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the top 5 countries by number of invoices and how many do they have . Plot them as bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "top",
      "5",
      "countries",
      "by",
      "number",
      "of",
      "invoices",
      "and",
      "how",
      "many",
      "do",
      "they",
      "have",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "GROUP",
      "BY",
      "billing_country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "5"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]@SEP@Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]"
  },
  {
    "nl_queries": "Show me a pie chart for what are the main indstries and total market value for each industry ?",
    "VQL": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
    "record_name": "1507",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me a pie chart for what are the main indstries and total market value for each industry ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "main",
      "indstries",
      "and",
      "total",
      "market",
      "value",
      "for",
      "each",
      "industry",
      "?"
    ],
    "query": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Main_Industry",
      ",",
      "sum",
      "(",
      "market_value",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "main_industry"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Count the number of players who enter hall of fame for each year with a line chart .",
    "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid', 'binning': ''}, 'VQL': 'Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid'}",
    "record_name": "156",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            12
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                145,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          145,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Count the number of players who enter hall of fame for each year with a line chart .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "players",
      "who",
      "enter",
      "hall",
      "of",
      "fame",
      "for",
      "each",
      "year",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "yearid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "hall_of_fame",
      "GROUP",
      "BY",
      "yearid"
    ],
    "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
    "choose_schema_rat": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table player, columns = [*,player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]"
  },
  {
    "nl_queries": "Bar chart of the total number from each headquarters , I want to list Y in asc order .",
    "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC'}",
    "record_name": "1498@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each headquarters , I want to list Y in asc order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "headquarters",
      ",",
      "I",
      "want",
      "to",
      "list",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "headquarters",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show me the total number by category in a histogram , show total number from low to high order .",
    "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
    "db_id": "music_4",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC'}",
    "record_name": "2436@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me the total number by category in a histogram , show total number from low to high order .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "total",
      "number",
      "by",
      "category",
      "in",
      "a",
      "histogram",
      ",",
      "show",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "music_festival",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "For each submission , group its acceptance result and count them . Visualize them in a bar chart .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result'}",
    "record_name": "3261",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each submission , group its acceptance result and count them . Visualize them in a bar chart .",
    "question_toks": [
      "For",
      "each",
      "submission",
      ",",
      "group",
      "its",
      "acceptance",
      "result",
      "and",
      "count",
      "them",
      ".",
      "Visualize",
      "them",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table submission, columns = [Submission_ID, Scores, Author, College]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Plot the average of age by grouped by class as a bar graph , and show in desc by the total number .",
    "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC",
    "db_id": "ship_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC'}",
    "record_name": "2740@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the average of age by grouped by class as a bar graph , and show in desc by the total number .",
    "question_toks": [
      "Plot",
      "the",
      "average",
      "of",
      "age",
      "by",
      "grouped",
      "by",
      "class",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS",
      "ORDER",
      "BY",
      "avg",
      "(",
      "age",
      ")",
      "DESC"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "How many companies each investor has invested ? Show me a bar chart , and display Y-axis in descending order please .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC'}",
    "record_name": "1373@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many companies each investor has invested ? Show me a bar chart , and display Y-axis in descending order please .",
    "question_toks": [
      "How",
      "many",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "?",
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "Y-axis",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Investor",
      ")",
      "DESC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "What are the category of music festivals with result \"Awarded\" , and count them by a bar chart , show from low to high by the y axis .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC'}",
    "record_name": "2439@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the category of music festivals with result \"Awarded\" , and count them by a bar chart , show from low to high by the y axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Category",
      ")",
      "ASC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Return the number of venues of each workshop in a pie chart .",
    "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "db_id": "workshop_paper",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue'}",
    "record_name": "3259",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the number of venues of each workshop in a pie chart .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "venues",
      "of",
      "each",
      "workshop",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Venue",
      ",",
      "COUNT",
      "(",
      "Venue",
      ")",
      "FROM",
      "workshop",
      "GROUP",
      "BY",
      "Venue"
    ],
    "choose_schema": "Table workshop, columns = [*,Workshop_ID, Date, Venue, Name]",
    "choose_schema_rat": "Table workshop, columns = [Workshop_ID, Date, Venue, Name]@SEP@Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Show me a scatter plot for the relationship between average and minimum age of captains in each class .",
    "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS",
    "db_id": "ship_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT avg(age) , min(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS'}",
    "record_name": "2743",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show me a scatter plot for the relationship between average and minimum age of captains in each class .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "scatter",
      "plot",
      "for",
      "the",
      "relationship",
      "between",
      "average",
      "and",
      "minimum",
      "age",
      "of",
      "captains",
      "in",
      "each",
      "class",
      "."
    ],
    "query": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "CLASS"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "When do all the researcher role staff start to work ? Bin the time into YEAR interval and count them with a line chart , and rank X from high to low order .",
    "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC BIN date_from BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC', 'binning': 'BIN date_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC BIN date_from BY YEAR'}",
    "record_name": "2964@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        26,
        "year"
      ],
      "vis": 2
    },
    "question": "When do all the researcher role staff start to work ? Bin the time into YEAR interval and count them with a line chart , and rank X from high to low order .",
    "question_toks": [
      "When",
      "do",
      "all",
      "the",
      "researcher",
      "role",
      "staff",
      "start",
      "to",
      "work",
      "?",
      "Bin",
      "the",
      "time",
      "into",
      "YEAR",
      "interval",
      "and",
      "count",
      "them",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "rank",
      "X",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC BIN date_from BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_from",
      ",",
      "COUNT",
      "(",
      "date_from",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_from",
      "DESC",
      "BIN",
      "date_from",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Staff_Roles, columns = [*,role_code, role_description]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  },
  {
    "nl_queries": "What is the name and rank of every company ordered by descending number of sales . Show bar chart .",
    "VQL": "Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Company , Rank FROM company ORDER BY Sales_billion DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC'}",
    "record_name": "1519",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the name and rank of every company ordered by descending number of sales . Show bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "rank",
      "of",
      "every",
      "company",
      "ordered",
      "by",
      "descending",
      "number",
      "of",
      "sales",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Company , Rank FROM company ORDER BY Sales_billion DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Company",
      ",",
      "Rank",
      "FROM",
      "company",
      "ORDER",
      "BY",
      "Sales_billion",
      "DESC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]@SEP@Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]"
  },
  {
    "nl_queries": "What is the market value of every comapny in the banking industry ? Return a pie chart .",
    "VQL": "Visualize PIE SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': \"SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'\", 'binning': ''}, 'VQL': \"Visualize PIE SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'\"}",
    "record_name": "1500",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Banking\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What is the market value of every comapny in the banking industry ? Return a pie chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "market",
      "value",
      "of",
      "every",
      "comapny",
      "in",
      "the",
      "banking",
      "industry",
      "?",
      "Return",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Company",
      ",",
      "Market_Value",
      "FROM",
      "company",
      "WHERE",
      "main_industry",
      "=",
      "'Banking'"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Bar graph to show how many result from different result , show by the y axis in descending .",
    "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC",
    "db_id": "workshop_paper",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC'}",
    "record_name": "3261@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show how many result from different result , show by the y axis in descending .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "result",
      "from",
      "different",
      "result",
      ",",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY COUNT(Result) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Result",
      ",",
      "COUNT",
      "(",
      "Result",
      ")",
      "FROM",
      "acceptance",
      "GROUP",
      "BY",
      "Result",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Result",
      ")",
      "DESC"
    ],
    "choose_schema": "Table Acceptance, columns = [*,Submission_ID, Workshop_ID, Result]",
    "choose_schema_rat": "Table Acceptance, columns = [Submission_ID, Workshop_ID, Result]"
  },
  {
    "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , could you sort by the x-axis in asc please ?",
    "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "db_id": "singer",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC'}",
    "record_name": "2774@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , could you sort by the x-axis in asc please ?",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "x-axis",
      "in",
      "asc",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "Citizenship",
      "ASC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Bar graph to show the number of investor from different investor , rank by the bars from low to high .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC'}",
    "record_name": "1373@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of investor from different investor , rank by the bars from low to high .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "investor",
      "from",
      "different",
      "investor",
      ",",
      "rank",
      "by",
      "the",
      "bars",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "Investor",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "A bar chart for what are the number of the category of music festivals with result \"Awarded\" ? , and I want to order by the X-axis from high to low .",
    "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "db_id": "music_4",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC'}",
    "record_name": "2439@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ],
          "\"Awarded\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart for what are the number of the category of music festivals with result \"Awarded\" ? , and I want to order by the X-axis from high to low .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "category",
      "of",
      "music",
      "festivals",
      "with",
      "result",
      "\"Awarded\"",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Category",
      ",",
      "COUNT",
      "(",
      "Category",
      ")",
      "FROM",
      "music_festival",
      "WHERE",
      "RESULT",
      "=",
      "\"Awarded\"",
      "GROUP",
      "BY",
      "Category",
      "ORDER",
      "BY",
      "Category",
      "DESC"
    ],
    "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
    "choose_schema_rat": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]"
  },
  {
    "nl_queries": "Draw a bar chart of investor versus the total number , show total number in ascending order please .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "db_id": "entrepreneur",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC'}",
    "record_name": "1371@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of investor versus the total number , show total number in ascending order please .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "investor",
      "versus",
      "the",
      "total",
      "number",
      ",",
      "show",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Bar chart of the total number from each country , I want to show by the x-axis in ascending .",
    "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
    "db_id": "climbing",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC'}",
    "record_name": "485@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each country , I want to show by the x-axis in ascending .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "country",
      ",",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "x-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Country",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "climber",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "Country",
      "ASC"
    ],
    "choose_schema": "Table mountain, columns = [*,Mountain_ID, Name, Height, Prominence, Range, Country]",
    "choose_schema_rat": "Table mountain, columns = [Mountain_ID, Name, Height, Prominence, Range, Country]@SEP@Table climber, columns = [Climber_ID, Name, Country, Time, Points, Mountain_ID]"
  },
  {
    "nl_queries": "Show the number of companies in each headquarter with a pie chart .",
    "VQL": "Visualize PIE SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "db_id": "gas_company",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters'}",
    "record_name": "1517",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show the number of companies in each headquarter with a pie chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "List the number of invoices from the US , grouped by state Visualize by bar chart , list by the billing_state in descending .",
    "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
    "db_id": "store_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC'}",
    "record_name": "2856@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              44,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          43,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of invoices from the US , grouped by state Visualize by bar chart , list by the billing_state in descending .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "invoices",
      "from",
      "the",
      "US",
      ",",
      "grouped",
      "by",
      "state",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "billing_state",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "billing_state",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "invoices",
      "WHERE",
      "billing_country",
      "=",
      "\"USA\"",
      "GROUP",
      "BY",
      "billing_state",
      "ORDER",
      "BY",
      "billing_state",
      "DESC"
    ],
    "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
    "choose_schema_rat": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]@SEP@Table invoice_lines, columns = [*,id, invoice_id, track_id, unit_price, quantity]@SEP@Table employees, columns = [*,id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]@SEP@Table customers, columns = [*,id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]"
  },
  {
    "nl_queries": "What are the number of the names of all the playlists ? , and could you sort by the Y in descending please ?",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC'}",
    "record_name": "2855@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the names of all the playlists ? , and could you sort by the Y in descending please ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      "?",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "DESC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "Show the number of companies each investor has invested with a bar chart .",
    "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "db_id": "entrepreneur",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor'}",
    "record_name": "1373",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies each investor has invested with a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "each",
      "investor",
      "has",
      "invested",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Investor",
      ",",
      "COUNT",
      "(",
      "Investor",
      ")",
      "FROM",
      "entrepreneur",
      "GROUP",
      "BY",
      "Investor"
    ],
    "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
    "choose_schema_rat": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]"
  },
  {
    "nl_queries": "Show the number of companies in each headquarter with a bar chart , show y-axis from low to high order please .",
    "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
    "db_id": "gas_company",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC'}",
    "record_name": "1518@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the number of companies in each headquarter with a bar chart , show y-axis from low to high order please .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "each",
      "headquarter",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Headquarters",
      ",",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "FROM",
      "company",
      "GROUP",
      "BY",
      "Headquarters",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Headquarters",
      ")",
      "ASC"
    ],
    "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
    "choose_schema_rat": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]@SEP@Table station_company, columns = [*,Station_ID, Company_ID, Rank_of_the_Year]"
  },
  {
    "nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship , could you show by the Y in descending please ?",
    "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC",
    "db_id": "singer",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC'}",
    "record_name": "2776@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              1,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship , could you show by the Y in descending please ?",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      ",",
      "could",
      "you",
      "show",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "DESC"
    ],
    "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
    "choose_schema_rat": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]@SEP@Table song, columns = [*,Song_ID, Title, Singer_ID, Sales, Highest_Position]"
  },
  {
    "nl_queries": "Show sum(population) vs mean lifeexpectancy as scatter plot use a different color for each Continent",
    "VQL": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show sum(population) vs mean lifeexpectancy as scatter plot use a different color for each Continent",
    "question_toks": [
      "Show",
      "sum(population)",
      "vs",
      "mean",
      "lifeexpectancy",
      "as",
      "scatter",
      "plot",
      "use",
      "a",
      "different",
      "color",
      "for",
      "each",
      "Continent"
    ],
    "query": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ],
    "choose_schema": "Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
    "choose_schema_rat": "Table city, columns = [*,ID, Name, CountryCode, District, Population]@SEP@Table country, columns = [*,Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]@SEP@Table countrylanguage, columns = [*,CountryCode, Language, IsOfficial, Percentage]"
  },
  {
    "nl_queries": "Return a line chart on what is the average number of attendance at home games for each year ?",
    "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "db_id": "baseball_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR'}",
    "record_name": "171",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            13
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                153,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                161,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          153,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart on what is the average number of attendance at home games for each year ?",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "on",
      "what",
      "is",
      "the",
      "average",
      "number",
      "of",
      "attendance",
      "at",
      "home",
      "games",
      "for",
      "each",
      "year",
      "?"
    ],
    "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "avg",
      "(",
      "attendance",
      ")",
      "FROM",
      "home_game",
      "GROUP",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
    "choose_schema_rat": "Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_franchise, columns = [*,franchise_id, franchise_name, active, na_assoc]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_college, columns = [*,player_id, college_id, year]"
  },
  {
    "nl_queries": "What are the number of the names of all the playlists ? , and display in ascending by the the number of name .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "db_id": "store_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC'}",
    "record_name": "2855@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                64,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          64,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              64,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the number of the names of all the playlists ? , and display in ascending by the the number of name .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "names",
      "of",
      "all",
      "the",
      "playlists",
      "?",
      ",",
      "and",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "number",
      "of",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "playlists",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "ASC"
    ],
    "choose_schema": "Table artists, columns = [*,id, name]@SEP@Table sqlite_sequence, columns = [*,name, seq]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlists, columns = [*,id, name]",
    "choose_schema_rat": "Table sqlite_sequence, columns = [*,name, seq]@SEP@Table artists, columns = [*,id, name]@SEP@Table genres, columns = [*,id, name]@SEP@Table media_types, columns = [*,id, name]@SEP@Table tracks, columns = [*,id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]@SEP@Table playlist_tracks, columns = [*,playlist_id, track_id]@SEP@Table playlists, columns = [*,id, name]"
  },
  {
    "nl_queries": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart .",
    "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class",
    "db_id": "ship_1",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class'}",
    "record_name": "2750",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ],
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "captains",
      "in",
      "each",
      "rank",
      "and",
      "class",
      "?",
      "Let",
      "class",
      "as",
      "X-axis",
      ",",
      "and",
      "categorize",
      "by",
      "rank",
      "with",
      "a",
      "stacked",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Class",
      ",",
      "COUNT",
      "(",
      "Class",
      ")",
      "FROM",
      "captain",
      "GROUP",
      "BY",
      "Rank",
      ",",
      "Class"
    ],
    "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
    "choose_schema_rat": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]"
  },
  {
    "nl_queries": "When do all the researcher role staff stop working ? Bin the time into YEAR interval and count them with a line chart , and could you show by the X in desc ?",
    "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC BIN date_to BY YEAR",
    "db_id": "tracking_grants_for_research",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC', 'binning': 'BIN date_to BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC BIN date_to BY YEAR'}",
    "record_name": "2965@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        27,
        "year"
      ],
      "vis": 2
    },
    "question": "When do all the researcher role staff stop working ? Bin the time into YEAR interval and count them with a line chart , and could you show by the X in desc ?",
    "question_toks": [
      "When",
      "do",
      "all",
      "the",
      "researcher",
      "role",
      "staff",
      "stop",
      "working",
      "?",
      "Bin",
      "the",
      "time",
      "into",
      "YEAR",
      "interval",
      "and",
      "count",
      "them",
      "with",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "show",
      "by",
      "the",
      "X",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to DESC BIN date_to BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_to",
      ",",
      "COUNT",
      "(",
      "date_to",
      ")",
      "FROM",
      "Project_Staff",
      "ORDER",
      "BY",
      "date_to",
      "DESC",
      "BIN",
      "date_to",
      "BY",
      "YEAR"
    ],
    "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
    "choose_schema_rat": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]@SEP@Table Staff_Roles, columns = [*,role_code, role_description]@SEP@Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]"
  }
]