[
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries . Visualize by a pie chart .",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the names and surface areas of the 5 largest countries . Visualize by a pie chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      ".",
      "Visualize",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ]
  },
  {
    "nl_queries": "Draw a bar chart for what are the names and the average grades for each high schooler ? , and display in ascending by the bar please .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2453@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the names and the average grades for each high schooler ? , and display in ascending by the bar please .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "and",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "bar",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Can you show me a bar chart to answer how many people with different names for each high schooler ?",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name'}",
    "record_name": "2451",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you show me a bar chart to answer how many people with different names for each high schooler ?",
    "question_toks": [
      "Can",
      "you",
      "show",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "answer",
      "how",
      "many",
      "people",
      "with",
      "different",
      "names",
      "for",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count . Visualize by bar chart .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis , sort by the y-axis from low to high .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis , sort by the y-axis from low to high .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "sort",
      "by",
      "the",
      "y-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "What are the names and number of hours spent training for each player who trains for less than 1500 hours Visualize by bar chart , and list in ascending by the names .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC'}",
    "record_name": "2790@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours Visualize by bar chart , and list in ascending by the names .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "pName",
      "ASC"
    ]
  },
  {
    "nl_queries": "Please use a bar chart to show the total amount of payment by each payment method code , could you sort by the names from high to low ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2011@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the total amount of payment by each payment method code , could you sort by the names from high to low ?",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "names",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 , and list by the y axis in ascending .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC'}",
    "record_name": "2605@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 , and list by the y axis in ascending .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "ASC"
    ]
  },
  {
    "nl_queries": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by year and return a bar chart .",
    "VQL": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_start BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"', 'binning': 'BIN date_incident_start BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_start BY YEAR'}",
    "record_name": "281",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        44,
        "year"
      ],
      "vis": 0
    },
    "question": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by year and return a bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "start",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      "Bin",
      "by",
      "year",
      "and",
      "return",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_start BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_start",
      ",",
      "COUNT",
      "(",
      "date_incident_start",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "BIN",
      "date_incident_start",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show minimal enr from each state",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state'}",
    "record_name": "2800",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show minimal enr from each state",
    "question_toks": [
      "Show",
      "minimal",
      "enr",
      "from",
      "each",
      "state"
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "How many counties correspond to each police force , and display in descending by the Police_force please .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC'}",
    "record_name": "709@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many counties correspond to each police force , and display in descending by the Police_force please .",
    "question_toks": [
      "How",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      ",",
      "and",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "Police_force",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "Police_force",
      "DESC"
    ]
  },
  {
    "nl_queries": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart , rank by the Y-axis in asc .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart , rank by the Y-axis in asc .",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "of",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "Y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "What are the names and total grades for each high schooler . Plot them as a bar chart .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2452",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and total grades for each high schooler . Plot them as a bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      ".",
      "Plot",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing the total number across police force , and sort by the X from low to high please .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC'}",
    "record_name": "709@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing the total number across police force , and sort by the X from low to high please .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "across",
      "police",
      "force",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "Police_force",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the different product names ? What is the average product price for each of them Show bar chart , could you list total number from low to high order ?",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC'}",
    "record_name": "859@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different product names ? What is the average product price for each of them Show bar chart , could you list total number from low to high order ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "Show",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Product_Price",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the names and total grades for each high schooler Plot them as a bar chart , and order by the Y in ascending .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC'}",
    "record_name": "2452@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and total grades for each high schooler Plot them as a bar chart , and order by the Y in ascending .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the number of students who participate in the tryout for each college ordered by descending count . Visualize by pie chart .",
    "VQL": "Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC'}",
    "record_name": "2801",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Find the number of students who participate in the tryout for each college ordered by descending count . Visualize by pie chart .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "students",
      "who",
      "participate",
      "in",
      "the",
      "tryout",
      "for",
      "each",
      "college",
      "ordered",
      "by",
      "descending",
      "count",
      ".",
      "Visualize",
      "by",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "tryout",
      "GROUP",
      "BY",
      "cName",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Plot the number of order date over order date in a line chart",
    "VQL": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS', 'binning': 'BIN Order_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR'}",
    "record_name": "861",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "year"
      ],
      "vis": 2
    },
    "question": "Plot the number of order date over order date in a line chart",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "order",
      "date",
      "over",
      "order",
      "date",
      "in",
      "a",
      "line",
      "chart"
    ],
    "query": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Order_Date",
      ",",
      "COUNT",
      "(",
      "Order_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Order_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find date_address_to and the sum of monthly_rental bin date_address_to by weekday , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "238",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find date_address_to and the sum of monthly_rental bin date_address_to by weekday , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "List the number of departments for each building with a bar chart , sort by the Y in asc please .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC'}",
    "record_name": "625@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of departments for each building with a bar chart , sort by the Y in asc please .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "departments",
      "for",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "Y",
      "in",
      "asc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "building",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , display in descending by the Y .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , display in descending by the Y .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and I want to list in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC'}",
    "record_name": "2605@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and I want to list in ascending by the y axis .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the trend about the frequency of the claim dates , and I want to order in desc by the X .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC'}",
    "record_name": "2021@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the frequency of the claim dates , and I want to order in desc by the X .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "frequency",
      "of",
      "the",
      "claim",
      "dates",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code in a bar chart , and could you rank by the bars from low to high ?",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC'}",
    "record_name": "872@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all payment method codes and the number of orders for each code in a bar chart , and could you rank by the bars from low to high ?",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "bars",
      "from",
      "low",
      "to",
      "high",
      "?"
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "payment_method_code",
      "ASC"
    ]
  },
  {
    "nl_queries": "Compare the smallest enrollment of schools in each state using a bar chart , list total number in asc order .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC'}",
    "record_name": "2798@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the smallest enrollment of schools in each state using a bar chart , list total number in asc order .",
    "question_toks": [
      "Compare",
      "the",
      "smallest",
      "enrollment",
      "of",
      "schools",
      "in",
      "each",
      "state",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "total",
      "number",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show all the planned delivery dates and bin by weekday in a bar chart .",
    "VQL": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS', 'binning': 'BIN Planned_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY WEEKDAY'}",
    "record_name": "862",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show all the planned delivery dates and bin by weekday in a bar chart .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "planned",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each dept name",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name'}",
    "record_name": "654",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each dept name",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "dept",
      "name"
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend .",
    "question_toks": [
      "On",
      "which",
      "days",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      "on",
      "catalogs",
      ",",
      "bin",
      "the",
      "date",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "to",
      "show",
      "the",
      "trend",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Show minimal enr from each state , and could you show by the x-axis in ascending ?",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC'}",
    "record_name": "2800@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show minimal enr from each state , and could you show by the x-axis in ascending ?",
    "question_toks": [
      "Show",
      "minimal",
      "enr",
      "from",
      "each",
      "state",
      ",",
      "and",
      "could",
      "you",
      "show",
      "by",
      "the",
      "x-axis",
      "in",
      "ascending",
      "?"
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "state",
      "ASC"
    ]
  },
  {
    "nl_queries": "How many students are in each department Plot them as bar chart , and I want to show in descending by the total number .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC'}",
    "record_name": "654@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many students are in each department Plot them as bar chart , and I want to show in descending by the total number .",
    "question_toks": [
      "How",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each payment method code , and show in descending by the Y-axis .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC'}",
    "record_name": "872@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each payment method code , and show in descending by the Y-axis .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a scatter chart about the correlation between student_id and address_id , and group by attribute other_details .",
    "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "251",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Draw a scatter chart about the correlation between student_id and address_id , and group by attribute other_details .",
    "question_toks": [
      "Draw",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "address_id",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "address_id",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show minimal enr from different cname , and sort in asc by the minimal enr .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC'}",
    "record_name": "2798@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show minimal enr from different cname , and sort in asc by the minimal enr .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "minimal",
      "enr",
      "from",
      "different",
      "cname",
      ",",
      "and",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "minimal",
      "enr",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , I want to list x axis in desc order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , I want to list x axis in desc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "x",
      "axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart for what are the number of the dates of the assessment notes ? , could you sort by the total number from high to low ?",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart for what are the number of the dates of the assessment notes ? , could you sort by the total number from high to low ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "DESC",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Scatter chart . how many total tours were there for each ranking date ?",
    "VQL": "Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date'}",
    "record_name": "3285",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          39,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Scatter chart . how many total tours were there for each ranking date ?",
    "question_toks": [
      "Scatter",
      "chart",
      ".",
      "how",
      "many",
      "total",
      "tours",
      "were",
      "there",
      "for",
      "each",
      "ranking",
      "date",
      "?"
    ],
    "query": "Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "FROM",
      "rankings",
      "GROUP",
      "BY",
      "ranking_date"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_to and the average of monthly_rental bin date_address_to by weekday in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "239",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_to and the average of monthly_rental bin date_address_to by weekday in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me a bar chart , that group by location and count them , and sort by the the number of location from low to high please .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC'}",
    "record_name": "2507@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart , that group by location and count them , and sort by the the number of location from low to high please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "that",
      "group",
      "by",
      "location",
      "and",
      "count",
      "them",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "the",
      "number",
      "of",
      "location",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Location",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Create a pie chart showing minimal enr across cname .",
    "VQL": "Visualize PIE SELECT cName , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , min(enr) FROM college GROUP BY state'}",
    "record_name": "2797",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing minimal enr across cname .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "minimal",
      "enr",
      "across",
      "cname",
      "."
    ],
    "query": "Visualize PIE SELECT cName , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "Return a pie on what are the names and areas of countries with the top 5 largest area ?",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return a pie on what are the names and areas of countries with the top 5 largest area ?",
    "question_toks": [
      "Return",
      "a",
      "pie",
      "on",
      "what",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ]
  },
  {
    "nl_queries": "Bar graph to show mean grade from different name , could you show y-axis in desc order ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC'}",
    "record_name": "2453@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show mean grade from different name , could you show y-axis in desc order ?",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "mean",
      "grade",
      "from",
      "different",
      "name",
      ",",
      "could",
      "you",
      "show",
      "y-axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many departments for each building ? Draw a bar chart , and sort by the X in descending .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC'}",
    "record_name": "625@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many departments for each building ? Draw a bar chart , and sort by the X in descending .",
    "question_toks": [
      "How",
      "many",
      "departments",
      "for",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "X",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of other_details and the average of monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "219",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of other_details and the average of monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bin the claim date into the Year interval and count them for visualizing a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Year interval and count them for visualizing a bar chart .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Count the names of each high schooler using a bar chart , display by the x axis in desc .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2451@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the names of each high schooler using a bar chart , display by the x axis in desc .",
    "question_toks": [
      "Count",
      "the",
      "names",
      "of",
      "each",
      "high",
      "schooler",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of dept_name and the amount of dept_name , and group by attribute dept_name .",
    "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "613",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart shows the distribution of dept_name and the amount of dept_name , and group by attribute dept_name .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "amount",
      "of",
      "dept_name",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "COUNT",
      "(",
      "dept_name",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "How many students are in each department Plot them as bar chart , and show by the total number from low to high please .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC'}",
    "record_name": "654@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many students are in each department Plot them as bar chart , and show by the total number from low to high please .",
    "question_toks": [
      "How",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a pie chart about the proportion of other_details and the sum of monthly_rental .",
    "VQL": "Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "252",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Draw a pie chart about the proportion of other_details and the sum of monthly_rental .",
    "question_toks": [
      "Draw",
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "proportion",
      "of",
      "other_details",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "."
    ],
    "query": "Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "other_details",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis hand y axis the total number , and could you list from low to high by the total number ?",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC'}",
    "record_name": "3287@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis hand y axis the total number , and could you list from low to high by the total number ?",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "hand",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "and",
      "could",
      "you",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the smallest enrollment of each state using a bar chart , order in ascending by the X-axis .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC'}",
    "record_name": "2800@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the smallest enrollment of each state using a bar chart , order in ascending by the X-axis .",
    "question_toks": [
      "Show",
      "the",
      "smallest",
      "enrollment",
      "of",
      "each",
      "state",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "state",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a histogram to show the date and the amount for all the payments processed with Visa , and show in asc by the Y-axis please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\"}",
    "record_name": "2030@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram to show the date and the amount for all the payments processed with Visa , and show in asc by the Y-axis please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "to",
      "show",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "and",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "Y-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , display in descending by the Date_Payment_Made please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\"}",
    "record_name": "2030@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , display in descending by the Date_Payment_Made please .",
    "question_toks": [
      "Show",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "distributing",
      "the",
      "payment",
      "date",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "Date_Payment_Made",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the total number of students in each department . Show bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name'}",
    "record_name": "654",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the total number of students in each department . Show bar chart .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "students",
      "in",
      "each",
      "department",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "What are the names and total grades for each high schooler Plot them as a bar chart , and could you show by the name in asc ?",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2452@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and total grades for each high schooler Plot them as a bar chart , and could you show by the name in asc ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "show",
      "by",
      "the",
      "name",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a pie chart about the proportion of other_details and the amount of other_details .",
    "VQL": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "250",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Draw a pie chart about the proportion of other_details and the amount of other_details .",
    "question_toks": [
      "Draw",
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "proportion",
      "of",
      "other_details",
      "and",
      "the",
      "amount",
      "of",
      "other_details",
      "."
    ],
    "query": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "other_details",
      ",",
      "COUNT",
      "(",
      "other_details",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the greatest capacity for rooms in each building ? Draw a bar chart , list bar in desc order please .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC'}",
    "record_name": "623@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the greatest capacity for rooms in each building ? Draw a bar chart , list bar in desc order please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "greatest",
      "capacity",
      "for",
      "rooms",
      "in",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "bar",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "For the attribute cName and enr , show their proportion by a pie chart .",
    "VQL": "Visualize PIE SELECT cName , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , enr FROM College ORDER BY enr'}",
    "record_name": "2791",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "For the attribute cName and enr , show their proportion by a pie chart .",
    "question_toks": [
      "For",
      "the",
      "attribute",
      "cName",
      "and",
      "enr",
      ",",
      "show",
      "their",
      "proportion",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT cName , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Bin the claim date into the Year interval and count them for visualizing a bar chart , could you list Y-axis in ascending order please ?",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Year interval and count them for visualizing a bar chart , could you list Y-axis in ascending order please ?",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "Y-axis",
      "in",
      "ascending",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "For the attribute other_details and the amount of other_details , show their proportion by a pie chart .",
    "VQL": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "250",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "For the attribute other_details and the amount of other_details , show their proportion by a pie chart .",
    "question_toks": [
      "For",
      "the",
      "attribute",
      "other_details",
      "and",
      "the",
      "amount",
      "of",
      "other_details",
      ",",
      "show",
      "their",
      "proportion",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "other_details",
      ",",
      "COUNT",
      "(",
      "other_details",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the lowest salary in departments with average salary greater than the overall average Plot them as bar chart , and sort minimal salary in ascending order please .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC'}",
    "record_name": "619@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the lowest salary in departments with average salary greater than the overall average Plot them as bar chart , and sort minimal salary in ascending order please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "minimal",
      "salary",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "min",
      "(",
      "salary",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year , and rank y-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY'}",
    "record_name": "2499@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year , and rank y-axis from high to low order .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      ",",
      "and",
      "count",
      "the",
      "first",
      "year",
      ",",
      "and",
      "rank",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "DESC",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Can you draw the trend of the number of actual delivery date over the actual delivery date ? , and order X-axis in descending order .",
    "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC', 'binning': 'BIN Actual_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR'}",
    "record_name": "864@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "year"
      ],
      "vis": 2
    },
    "question": "Can you draw the trend of the number of actual delivery date over the actual delivery date ? , and order X-axis in descending order .",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "the",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "actual",
      "delivery",
      "date",
      "over",
      "the",
      "actual",
      "delivery",
      "date",
      "?",
      ",",
      "and",
      "order",
      "X-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Actual_Delivery_Date",
      "DESC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" and bin by month , could you sort by the y-axis from low to high please ?",
    "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) ASC BIN date_incident_end BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) ASC', 'binning': 'BIN date_incident_end BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) ASC BIN date_incident_end BY MONTH'}",
    "record_name": "279@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              45,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        45,
        "month"
      ],
      "vis": 0
    },
    "question": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" and bin by month , could you sort by the y-axis from low to high please ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "the",
      "number",
      "of",
      "end",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "and",
      "bin",
      "by",
      "month",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "y-axis",
      "from",
      "low",
      "to",
      "high",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) ASC BIN date_incident_end BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_end",
      ",",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "ASC",
      "BIN",
      "date_incident_end",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Show all the actual delivery dates and bin by weekday in a bar chart , and sort in desc by the y-axis please .",
    "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC', 'binning': 'BIN Actual_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY'}",
    "record_name": "863@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show all the actual delivery dates and bin by weekday in a bar chart , and sort in desc by the y-axis please .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "actual",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "y-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "DESC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Plot the total number by grouped by industry as a bar graph",
    "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
    "db_id": "company_office",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry'}",
    "record_name": "685",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the total number by grouped by industry as a bar graph",
    "question_toks": [
      "Plot",
      "the",
      "total",
      "number",
      "by",
      "grouped",
      "by",
      "industry",
      "as",
      "a",
      "bar",
      "graph"
    ],
    "query": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of cName and enr in a bar chart .",
    "VQL": "Visualize BAR SELECT cName , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , enr FROM College ORDER BY enr'}",
    "record_name": "2792",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me about the distribution of cName and enr in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "cName",
      "and",
      "enr",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT cName , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each payment method code , and list by the y axis in ascending .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC'}",
    "record_name": "872@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each payment method code , and list by the y axis in ascending .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for how many counties correspond to each police force ? , and I want to rank by the the total number in ascending please .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC'}",
    "record_name": "709@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many counties correspond to each police force ? , and I want to rank by the the total number in ascending please .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Count the names of each high schooler using a bar chart , show from low to high by the how many name .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC'}",
    "record_name": "2451@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the names of each high schooler using a bar chart , show from low to high by the how many name .",
    "question_toks": [
      "Count",
      "the",
      "names",
      "of",
      "each",
      "high",
      "schooler",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "how",
      "many",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the smallest enrollment of each state , and show in asc by the X please .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC'}",
    "record_name": "2800@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the smallest enrollment of each state , and show in asc by the X please .",
    "question_toks": [
      "Show",
      "the",
      "smallest",
      "enrollment",
      "of",
      "each",
      "state",
      ",",
      "and",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "X",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "state",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the number of matches happened in each year Plot them as bar chart , and show the total number in descending order .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC'}",
    "record_name": "3288@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of matches happened in each year Plot them as bar chart , and show the total number in descending order .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "matches",
      "happened",
      "in",
      "each",
      "year",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "196",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by time .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , and could you sort by the x axis in ascending ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , and could you sort by the x axis in ascending ?",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "ascending",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , list in desc by the x-axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC'}",
    "record_name": "2607@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , list in desc by the x-axis .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and number of hours spent training for each player who trains for less than 1500 hours Visualize by bar chart , and could you list by the total number from low to high ?",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC'}",
    "record_name": "2790@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours Visualize by bar chart , and could you list by the total number from low to high ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "list",
      "by",
      "the",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "?"
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "HS",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many total credits are offered by each department ? , order from high to low by the Y-axis .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC'}",
    "record_name": "621@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many total credits are offered by each department ? , order from high to low by the Y-axis .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "?",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "sum",
      "(",
      "credits",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the name and training hours of players whose hours are below 1500 Show bar chart , and rank by the total number in asc .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC'}",
    "record_name": "2790@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and training hours of players whose hours are below 1500 Show bar chart , and rank by the total number in asc .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "training",
      "hours",
      "of",
      "players",
      "whose",
      "hours",
      "are",
      "below",
      "1500",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "HS",
      "ASC"
    ]
  },
  {
    "nl_queries": "What is the greatest capacity for rooms in each building ? Draw a bar chart .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building'}",
    "record_name": "623",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the greatest capacity for rooms in each building ? Draw a bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "greatest",
      "capacity",
      "for",
      "rooms",
      "in",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the sum of monthly_rental over the other_details , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "218",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me the comparison about the sum of monthly_rental over the other_details , and group by attribute other_details .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "the",
      "other_details",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled , order Y-axis from low to high order .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled , order Y-axis from low to high order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      ",",
      "order",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What are the names and their total grades for each high schooler ? Show me the result using a bar chart , and display by the bar in desc .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2452@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and their total grades for each high schooler ? Show me the result using a bar chart , and display by the bar in desc .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "their",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      "Show",
      "me",
      "the",
      "result",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "by",
      "the",
      "bar",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the total number of students in each department Show bar chart , and rank x-axis in desc order .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "654@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the total number of students in each department Show bar chart , and rank x-axis in desc order .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "students",
      "in",
      "each",
      "department",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "x-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Plot date claim settled by the number of date claim settled as a line chart",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled'}",
    "record_name": "2021",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Plot date claim settled by the number of date claim settled as a line chart",
    "question_toks": [
      "Plot",
      "date",
      "claim",
      "settled",
      "by",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      "as",
      "a",
      "line",
      "chart"
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled"
    ]
  },
  {
    "nl_queries": "Plot the number of payment method code by grouped by payment method code as a bar graph , show by the y axis in asc .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC'}",
    "record_name": "2010@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of payment method code by grouped by payment method code as a bar graph , show by the y axis in asc .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "payment",
      "method",
      "code",
      "by",
      "grouped",
      "by",
      "payment",
      "method",
      "code",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) . Visualize by pie chart .",
    "VQL": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2606",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) . Visualize by pie chart .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      ".",
      "Visualize",
      "by",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ]
  },
  {
    "nl_queries": "List the number of the order dates of all the bookings .",
    "VQL": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS', 'binning': 'BIN Order_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY'}",
    "record_name": "860",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "List the number of the order dates of all the bookings .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "order",
      "dates",
      "of",
      "all",
      "the",
      "bookings",
      "."
    ],
    "query": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Order_Date",
      ",",
      "COUNT",
      "(",
      "Order_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Order_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Bar chart of total number of credits from each dept name",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name'}",
    "record_name": "621",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of total number of credits from each dept name",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "total",
      "number",
      "of",
      "credits",
      "from",
      "each",
      "dept",
      "name"
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "A pie chart shows the proportion of cName and enr .",
    "VQL": "Visualize PIE SELECT cName , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , enr FROM College ORDER BY enr'}",
    "record_name": "2791",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart shows the proportion of cName and enr .",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "shows",
      "the",
      "proportion",
      "of",
      "cName",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize PIE SELECT cName , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , show bar from high to low order .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC'}",
    "record_name": "2607@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , show bar from high to low order .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "show",
      "bar",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "1999",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis , I want to sort by the y axis in descending .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis , I want to sort by the y axis in descending .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_to and the amount of date_address_to bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "232",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_to and the amount of date_address_to bin date_address_to by weekday .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_to and the amount of date_address_to bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "232",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_to and the amount of date_address_to bin date_address_to by weekday .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year', 'binning': ''}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year'}",
    "record_name": "2496",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "First_year"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad Show bar chart , and could you order in asc by the y-axis please ?",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC'}",
    "record_name": "872@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the distinct payment method codes with the number of orders mad Show bar chart , and could you order in asc by the y-axis please ?",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "y-axis",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Compare the smallest enrollment of schools in each state using a bar chart .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state'}",
    "record_name": "2798",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the smallest enrollment of schools in each state using a bar chart .",
    "question_toks": [
      "Compare",
      "the",
      "smallest",
      "enrollment",
      "of",
      "schools",
      "in",
      "each",
      "state",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "A scatter chart shows the correlation between student_id and monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "240",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "A scatter chart shows the correlation between student_id and monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "A",
      "scatter",
      "chart",
      "shows",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many players are there for each hand type ? , could you list by the total number in asc ?",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC'}",
    "record_name": "3287@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many players are there for each hand type ? , could you list by the total number in asc ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?",
      ",",
      "could",
      "you",
      "list",
      "by",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "List the name and number of followers for each user , and sort the results by the number of followers in descending order with a bar chart .",
    "VQL": "Visualize BAR SELECT name , followers FROM user_profiles ORDER BY followers DESC",
    "db_id": "twitter_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , followers FROM user_profiles ORDER BY followers DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , followers FROM user_profiles ORDER BY followers DESC'}",
    "record_name": "3067",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the name and number of followers for each user , and sort the results by the number of followers in descending order with a bar chart .",
    "question_toks": [
      "List",
      "the",
      "name",
      "and",
      "number",
      "of",
      "followers",
      "for",
      "each",
      "user",
      ",",
      "and",
      "sort",
      "the",
      "results",
      "by",
      "the",
      "number",
      "of",
      "followers",
      "in",
      "descending",
      "order",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT name , followers FROM user_profiles ORDER BY followers DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "followers",
      "FROM",
      "user_profiles",
      "ORDER",
      "BY",
      "followers",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the number of matches happened in each year Plot them as bar chart , and show names in asc order please .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC'}",
    "record_name": "3288@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of matches happened in each year Plot them as bar chart , and show names in asc order please .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "matches",
      "happened",
      "in",
      "each",
      "year",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "names",
      "in",
      "asc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the names and number of hours spent training for each player who trains for less than 1500 hours Visualize by bar chart , show names in desc order .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC'}",
    "record_name": "2790@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours Visualize by bar chart , show names in desc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "show",
      "names",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "pName",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the name and training hours of players whose hours are below 1500 . Show bar chart .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500'}",
    "record_name": "2790",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and training hours of players whose hours are below 1500 . Show bar chart .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "training",
      "hours",
      "of",
      "players",
      "whose",
      "hours",
      "are",
      "below",
      "1500",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500"
    ]
  },
  {
    "nl_queries": "Bar graph to show mean grade from different name , and could you rank in descending by the names ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2453@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show mean grade from different name , and could you rank in descending by the names ?",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "mean",
      "grade",
      "from",
      "different",
      "name",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "names",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the names and their total grades for each high schooler ? , and order x-axis in asc order .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2452@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the names and their total grades for each high schooler ? , and order x-axis in asc order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "their",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "and",
      "order",
      "x-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made , could you list y-axis from low to high order ?",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made , could you list y-axis from low to high order ?",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made",
      ",",
      "could",
      "you",
      "list",
      "y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each year using a bar chart , and sort y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each year using a bar chart , and sort y-axis in asc order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "How many total credits are offered by each department Show bar chart , and rank bars in asc order .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "621@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total credits are offered by each department Show bar chart , and rank bars in asc order .",
    "question_toks": [
      "How",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "bars",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the average capacity among rooms in each building with a bar chart .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building'}",
    "record_name": "624",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the average capacity among rooms in each building with a bar chart .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "capacity",
      "among",
      "rooms",
      "in",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "Bar graph to show mean grade from different name",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2453",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show mean grade from different name",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "mean",
      "grade",
      "from",
      "different",
      "name"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "What are the different product names ? What is the average product price for each of them Show bar chart , I want to sort from high to low by the Y-axis .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC'}",
    "record_name": "859@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different product names ? What is the average product price for each of them Show bar chart , I want to sort from high to low by the Y-axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "Show",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Product_Price",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of sum amount payment from each payment method code , and show by the y axis from high to low .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC'}",
    "record_name": "2011@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of sum amount payment from each payment method code , and show by the y axis from high to low .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "sum",
      "amount",
      "payment",
      "from",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of the total number from each year , I want to sort Y in descending order please .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC'}",
    "record_name": "3288@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each year , I want to sort Y in descending order please .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "year",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "Y",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the relationship between student_id and monthly_rental ?",
    "VQL": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "What is the relationship between student_id and monthly_rental ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "relationship",
      "between",
      "student_id",
      "and",
      "monthly_rental",
      "?"
    ],
    "query": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "196",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by time .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , list by the X in ascending .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC'}",
    "record_name": "2607@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , list by the X in ascending .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "list",
      "by",
      "the",
      "X",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a bar graph for the name of the school that has the smallest enrollment in each state .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state'}",
    "record_name": "2798",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar graph for the name of the school that has the smallest enrollment in each state .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "graph",
      "for",
      "the",
      "name",
      "of",
      "the",
      "school",
      "that",
      "has",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "How many counties correspond to each police force , display y axis in desc order .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC'}",
    "record_name": "709@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many counties correspond to each police force , display y axis in desc order .",
    "question_toks": [
      "How",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      ",",
      "display",
      "y",
      "axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of dept_name and the sum of salary , and group by attribute dept_name .",
    "VQL": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "616",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of dept_name and the sum of salary , and group by attribute dept_name .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "sum",
      "of",
      "salary",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "SUM",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the Year interval and then compute the total amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "1996",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the Year interval and then compute the total amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "then",
      "compute",
      "the",
      "total",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show all the actual delivery dates and bin by year in a line chart , and could you rank X in asc order ?",
    "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC', 'binning': 'BIN Actual_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR'}",
    "record_name": "864@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "year"
      ],
      "vis": 2
    },
    "question": "Show all the actual delivery dates and bin by year in a line chart , and could you rank X in asc order ?",
    "question_toks": [
      "Show",
      "all",
      "the",
      "actual",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "year",
      "in",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "X",
      "in",
      "asc",
      "order",
      "?"
    ],
    "query": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Actual_Delivery_Date",
      "ASC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find the names and average salaries of all departments whose average salary is greater than 42000 , and show in ascending by the Y please .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC'}",
    "record_name": "627@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the names and average salaries of all departments whose average salary is greater than 42000 , and show in ascending by the Y please .",
    "question_toks": [
      "Find",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "of",
      "all",
      "departments",
      "whose",
      "average",
      "salary",
      "is",
      "greater",
      "than",
      "42000",
      ",",
      "and",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "Y",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "salary",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the average capacity among rooms in each building with a bar chart , and display by the y axis from high to low .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC'}",
    "record_name": "624@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the average capacity among rooms in each building with a bar chart , and display by the y axis from high to low .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "capacity",
      "among",
      "rooms",
      "in",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "avg",
      "(",
      "capacity",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "A line chart shows the trend of the average of monthly_rental over date_address_to , and group by attribute other_details .",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "241",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "A line chart shows the trend of the average of monthly_rental over date_address_to , and group by attribute other_details .",
    "question_toks": [
      "A",
      "line",
      "chart",
      "shows",
      "the",
      "trend",
      "of",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the lowest salary in departments with average salary greater than the overall average Plot them as bar chart , list by the total number from high to low .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC'}",
    "record_name": "619@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the lowest salary in departments with average salary greater than the overall average Plot them as bar chart , list by the total number from high to low .",
    "question_toks": [
      "What",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "min",
      "(",
      "salary",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities with a pie chart .",
    "VQL": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2606",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities with a pie chart .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ]
  },
  {
    "nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2012",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the average amount of payment by each payment method code .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis , sort y axis from high to low order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis , sort y axis from high to low order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "sort",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_to and the average of monthly_rental bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "239",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_to and the average of monthly_rental bin date_address_to by weekday .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the relationship between average and maximum capacity among rooms in each building with a scatter chart .",
    "VQL": "Visualize SCATTER SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building'}",
    "record_name": "622",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Find the relationship between average and maximum capacity among rooms in each building with a scatter chart .",
    "question_toks": [
      "Find",
      "the",
      "relationship",
      "between",
      "average",
      "and",
      "maximum",
      "capacity",
      "among",
      "rooms",
      "in",
      "each",
      "building",
      "with",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "max",
      "(",
      "capacity",
      ")",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "Plot the number of payment method code by grouped by payment method code as a bar graph , order in descending by the Payment_Method_Code .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2010@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of payment method code by grouped by payment method code as a bar graph , order in descending by the Payment_Method_Code .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "payment",
      "method",
      "code",
      "by",
      "grouped",
      "by",
      "payment",
      "method",
      "code",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "Payment_Method_Code",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_from and the sum of monthly_rental bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "264",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_from and the sum of monthly_rental bin date_address_from by weekday .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the average of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by weekday by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "225",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the average of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by weekday by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , I want to list in ascending by the x-axis .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , I want to list in ascending by the x-axis .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad Show bar chart , display by the total number from high to low please .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC'}",
    "record_name": "872@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the distinct payment method codes with the number of orders mad Show bar chart , display by the total number from high to low please .",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      "Show",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a bar chart on how many counties correspond to each police force ? , could you show in asc by the x-axis ?",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC'}",
    "record_name": "709@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on how many counties correspond to each police force ? , could you show in asc by the x-axis ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?",
      ",",
      "could",
      "you",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "x-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "Police_force",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me the trend about the amount of date_address_to over date_address_to , and group by attribute other_details with a line chart .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "249",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend about the amount of date_address_to over date_address_to , and group by attribute other_details with a line chart .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show all the planned delivery dates and bin by year in a line chart , and rank from high to low by the X-axis .",
    "VQL": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC', 'binning': 'BIN Planned_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR'}",
    "record_name": "865@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "year"
      ],
      "vis": 2
    },
    "question": "Show all the planned delivery dates and bin by year in a line chart , and rank from high to low by the X-axis .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "planned",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "year",
      "in",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Planned_Delivery_Date",
      "DESC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled , and order the number of date claim settled in descending order .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled , and order the number of date claim settled in descending order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      ",",
      "and",
      "order",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Bar chart x axis name y axis total number of grade , display by the bar in desc .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2452@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis name y axis total number of grade , display by the bar in desc .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "name",
      "y",
      "axis",
      "total",
      "number",
      "of",
      "grade",
      ",",
      "display",
      "by",
      "the",
      "bar",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis , and sort by the y axis in descending please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis , and sort by the y axis in descending please .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code by a pie chart .",
    "VQL": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code'}",
    "record_name": "871",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show all payment method codes and the number of orders for each code by a pie chart .",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code"
    ]
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled , and sort y-axis in ascending order please .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled , and sort y-axis in ascending order please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      ",",
      "and",
      "sort",
      "y-axis",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "210",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "How many rooms in each building have a capacity of over 50 Visualize by bar chart , order by the the total number in desc .",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC'}",
    "record_name": "620@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many rooms in each building have a capacity of over 50 Visualize by bar chart , order by the the total number in desc .",
    "question_toks": [
      "How",
      "many",
      "rooms",
      "in",
      "each",
      "building",
      "have",
      "a",
      "capacity",
      "of",
      "over",
      "50",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "order",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3269",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many players are there for each hand type ? , rank in desc by the names .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC'}",
    "record_name": "3287@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many players are there for each hand type ? , rank in desc by the names .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?",
      ",",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "hand",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and could you show by the y axis from high to low ?",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and could you show by the y axis from high to low ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "could",
      "you",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart for how many total credits are offered by each department ? , and rank y-axis in descending order .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC'}",
    "record_name": "621@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for how many total credits are offered by each department ? , and rank y-axis in descending order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "?",
      ",",
      "and",
      "rank",
      "y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "sum",
      "(",
      "credits",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , and sort X-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , and sort X-axis from high to low order .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ]
  },
  {
    "nl_queries": ", order by the bars from low to high .",
    "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC",
    "db_id": "company_office",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC'}",
    "record_name": "685@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": ", order by the bars from low to high .",
    "question_toks": [
      ",",
      "order",
      "by",
      "the",
      "bars",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry",
      "ORDER",
      "BY",
      "Industry",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a pie chart about the proportion of cName and enr .",
    "VQL": "Visualize PIE SELECT cName , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , enr FROM College ORDER BY enr'}",
    "record_name": "2791",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return a pie chart about the proportion of cName and enr .",
    "question_toks": [
      "Return",
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "proportion",
      "of",
      "cName",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize PIE SELECT cName , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart , and rank Y from low to high order .",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart , and rank Y from low to high order .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "ASC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart , and order Y-axis from low to high order .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart , and order Y-axis from low to high order .",
    "question_toks": [
      "Bin",
      "the",
      "settlement",
      "date",
      "for",
      "each",
      "settlement",
      "case",
      "into",
      "the",
      "day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , could you order capacity in asc order please ?",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC'}",
    "record_name": "2607@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , could you order capacity in asc order please ?",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "could",
      "you",
      "order",
      "capacity",
      "in",
      "asc",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "ASC"
    ]
  },
  {
    "nl_queries": "Plot the total number by grouped by industry as a bar graph , and sort in ascending by the the total number .",
    "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC",
    "db_id": "company_office",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC'}",
    "record_name": "685@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the total number by grouped by industry as a bar graph , and sort in ascending by the the total number .",
    "question_toks": [
      "Plot",
      "the",
      "total",
      "number",
      "by",
      "grouped",
      "by",
      "industry",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "sort",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort by the sum population in asc .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort by the sum population in asc .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "sum",
      "population",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis building y axis the average of capacity , and order in ascending by the y axis please .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC'}",
    "record_name": "624@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis building y axis the average of capacity , and order in ascending by the y axis please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "building",
      "y",
      "axis",
      "the",
      "average",
      "of",
      "capacity",
      ",",
      "and",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "avg",
      "(",
      "capacity",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa by each year using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa by each year using a bar chart .",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Return a line chart about the change of the amount of date_address_to over date_address_to , and group by attribute date_address_to .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "266",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart about the change of the amount of date_address_to over date_address_to , and group by attribute date_address_to .",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show all the planned delivery dates and bin by year in a line chart .",
    "VQL": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS', 'binning': 'BIN Planned_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY YEAR'}",
    "record_name": "865",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "year"
      ],
      "vis": 2
    },
    "question": "Show all the planned delivery dates and bin by year in a line chart .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "planned",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "year",
      "in",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Plot a scatter chart , max(capacity) by mean capacity .",
    "VQL": "Visualize SCATTER SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building'}",
    "record_name": "622",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Plot a scatter chart , max(capacity) by mean capacity .",
    "question_toks": [
      "Plot",
      "a",
      "scatter",
      "chart",
      ",",
      "max(capacity)",
      "by",
      "mean",
      "capacity",
      "."
    ],
    "query": "Visualize SCATTER SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "max",
      "(",
      "capacity",
      ")",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart , show Y from low to high order please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart , show Y from low to high order please .",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "210",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the average capacity among rooms in each building with a bar chart , and rank by the bars in ascending .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC'}",
    "record_name": "624@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the average capacity among rooms in each building with a bar chart , and rank by the bars in ascending .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "capacity",
      "among",
      "rooms",
      "in",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "bars",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me the trend using a line chart that group and count payment date , and then sort the bars in ascending order of date .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2008",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend using a line chart that group and count payment date , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "using",
      "a",
      "line",
      "chart",
      "that",
      "group",
      "and",
      "count",
      "payment",
      "date",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart for what are the names and the average grades for each high schooler ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2453",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the names and the average grades for each high schooler ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "Bar chart of minimal salary from each dept name , order y axis in ascending order .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC'}",
    "record_name": "619@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of minimal salary from each dept name , order y axis in ascending order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "minimal",
      "salary",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "order",
      "y",
      "axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "min",
      "(",
      "salary",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "How many departments for each building ? Draw a bar chart , and show by the bar in ascending .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC'}",
    "record_name": "625@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many departments for each building ? Draw a bar chart , and show by the bar in ascending .",
    "question_toks": [
      "How",
      "many",
      "departments",
      "for",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "bar",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "Create a pie chart showing the number of location across location .",
    "VQL": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location'}",
    "record_name": "2506",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing the number of location across location .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "location",
      "across",
      "location",
      "."
    ],
    "query": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the different product names ? What is the average product price for each of them ? , and sort by the total number from low to high .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC'}",
    "record_name": "859@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different product names ? What is the average product price for each of them ? , and sort by the total number from low to high .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Product_Price",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Can you show me a bar chart to answer how many people with different names for each high schooler ? , order by the x axis from low to high .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2451@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you show me a bar chart to answer how many people with different names for each high schooler ? , order by the x axis from low to high .",
    "question_toks": [
      "Can",
      "you",
      "show",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "answer",
      "how",
      "many",
      "people",
      "with",
      "different",
      "names",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "order",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis hand y axis the total number",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand'}",
    "record_name": "3287",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis hand y axis the total number",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "hand",
      "y",
      "axis",
      "the",
      "total",
      "number"
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ]
  },
  {
    "nl_queries": "Can you draw the trend of the number of actual delivery date over the actual delivery date ?",
    "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS', 'binning': 'BIN Actual_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY YEAR'}",
    "record_name": "864",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "year"
      ],
      "vis": 2
    },
    "question": "Can you draw the trend of the number of actual delivery date over the actual delivery date ?",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "the",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "actual",
      "delivery",
      "date",
      "over",
      "the",
      "actual",
      "delivery",
      "date",
      "?"
    ],
    "query": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Compare the frequency of each payment method code using a bar chart , rank by the how many payment method code from high to low .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC'}",
    "record_name": "2010@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the frequency of each payment method code using a bar chart , rank by the how many payment method code from high to low .",
    "question_toks": [
      "Compare",
      "the",
      "frequency",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "how",
      "many",
      "payment",
      "method",
      "code",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "A line chart for what are the number of the dates of the assessment notes ? , and sort by the x-axis from high to low please .",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR'}",
    "record_name": "188@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "A line chart for what are the number of the dates of the assessment notes ? , and sort by the x-axis from high to low please .",
    "question_toks": [
      "A",
      "line",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "date_of_notes",
      "DESC",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find the number of rooms with more than 50 capacity for each building Show bar chart , display y axis in asc order .",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC'}",
    "record_name": "620@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of rooms with more than 50 capacity for each building Show bar chart , display y axis in asc order .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "rooms",
      "with",
      "more",
      "than",
      "50",
      "capacity",
      "for",
      "each",
      "building",
      "Show",
      "bar",
      "chart",
      ",",
      "display",
      "y",
      "axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart .",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and list from low to high by the X-axis .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC'}",
    "record_name": "2605@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and list from low to high by the X-axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each payment method code , show by the X in ascending .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC'}",
    "record_name": "872@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each payment method code , show by the X in ascending .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "show",
      "by",
      "the",
      "X",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "payment_method_code",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "225",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_to and the sum of monthly_rental bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "230",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_to and the sum of monthly_rental bin date_address_to by time .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for mean product price of each product name , and show in descending by the names .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC'}",
    "record_name": "859@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for mean product price of each product name , and show in descending by the names .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "mean",
      "product",
      "price",
      "of",
      "each",
      "product",
      "name",
      ",",
      "and",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "Product_Name",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "225",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Tell me the trend about the claim dates using a trend line , and sort by the Date_Claim_Settled in desc .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC'}",
    "record_name": "2021@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Tell me the trend about the claim dates using a trend line , and sort by the Date_Claim_Settled in desc .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "claim",
      "dates",
      "using",
      "a",
      "trend",
      "line",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "Date_Claim_Settled",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many matches were played in each year ? , list by the the total number in descending .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC'}",
    "record_name": "3288@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many matches were played in each year ? , list by the the total number in descending .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?",
      ",",
      "list",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average , and show in descending by the minimal salary .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC'}",
    "record_name": "619@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average , and show in descending by the minimal salary .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      ",",
      "and",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "minimal",
      "salary",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "min",
      "(",
      "salary",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show minimal enr from each state , and I want to rank y-axis in desc order .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC'}",
    "record_name": "2800@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show minimal enr from each state , and I want to rank y-axis in desc order .",
    "question_toks": [
      "Show",
      "minimal",
      "enr",
      "from",
      "each",
      "state",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "y-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show minimal enr from different cname , could you display by the X in desc ?",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC'}",
    "record_name": "2798@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show minimal enr from different cname , could you display by the X in desc ?",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "minimal",
      "enr",
      "from",
      "different",
      "cname",
      ",",
      "could",
      "you",
      "display",
      "by",
      "the",
      "X",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "cName",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "195",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , and I want to show in desc by the y axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC'}",
    "record_name": "2607@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , and I want to show in desc by the y axis .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find cName and enr , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT cName , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , enr FROM College ORDER BY enr'}",
    "record_name": "2792",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find cName and enr , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "cName",
      "and",
      "enr",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT cName , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Bar chart of the number of planned delivery date from each planned delivery date , list by the total number in asc .",
    "VQL": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC BIN Planned_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC', 'binning': 'BIN Planned_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC BIN Planned_Delivery_Date BY WEEKDAY'}",
    "record_name": "862@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart of the number of planned delivery date from each planned delivery date , list by the total number in asc .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "planned",
      "delivery",
      "date",
      "from",
      "each",
      "planned",
      "delivery",
      "date",
      ",",
      "list",
      "by",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC BIN Planned_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "ASC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many players are there for each hand type ?",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand'}",
    "record_name": "3287",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many players are there for each hand type ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?"
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ]
  },
  {
    "nl_queries": "What is the number of end dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart , order by the total number from high to low please .",
    "VQL": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) DESC BIN date_incident_start BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) DESC', 'binning': 'BIN date_incident_start BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) DESC BIN date_incident_start BY WEEKDAY'}",
    "record_name": "283@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              44,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        44,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What is the number of end dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart , order by the total number from high to low please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "end",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      "Bin",
      "by",
      "weekday",
      "and",
      "return",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) DESC BIN date_incident_start BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_start",
      ",",
      "COUNT",
      "(",
      "date_incident_start",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_incident_start",
      ")",
      "DESC",
      "BIN",
      "date_incident_start",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Bar chart , the-axis is the state , and the Y axis is each state's the smallest enrollment , show in descending by the y axis .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC'}",
    "record_name": "2800@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart , the-axis is the state , and the Y axis is each state's the smallest enrollment , show in descending by the y axis .",
    "question_toks": [
      "Bar",
      "chart",
      ",",
      "the-axis",
      "is",
      "the",
      "state",
      ",",
      "and",
      "the",
      "Y",
      "axis",
      "is",
      "each",
      "state's",
      "the",
      "smallest",
      "enrollment",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , could you sort bars in desc order ?",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC'}",
    "record_name": "2607@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , could you sort bars in desc order ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "could",
      "you",
      "sort",
      "bars",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY'}",
    "record_name": "2499",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them .",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me a histogram to show the date and the amount for all the payments processed with Visa , and show Date_Payment_Made in ascending order please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\"}",
    "record_name": "2030@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram to show the date and the amount for all the payments processed with Visa , and show Date_Payment_Made in ascending order please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "to",
      "show",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "and",
      "show",
      "Date_Payment_Made",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ]
  },
  {
    "nl_queries": "How many students participated in tryouts for each college by descennding count . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC'}",
    "record_name": "2802",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many students participated in tryouts for each college by descennding count . Visualize by bar chart .",
    "question_toks": [
      "How",
      "many",
      "students",
      "participated",
      "in",
      "tryouts",
      "for",
      "each",
      "college",
      "by",
      "descennding",
      "count",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "tryout",
      "GROUP",
      "BY",
      "cName",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the average of monthly_rental over the date_address_to bin date_address_to by time by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "231",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the average of monthly_rental over the date_address_to bin date_address_to by time by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "time",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , I want to order in ascending by the Amount_Payment please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\"}",
    "record_name": "2030@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , I want to order in ascending by the Amount_Payment please .",
    "question_toks": [
      "Show",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "distributing",
      "the",
      "payment",
      "date",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "Amount_Payment",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries by a bar chart .",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the names and surface areas of the 5 largest countries by a bar chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ]
  },
  {
    "nl_queries": "How many total credits are offered by each department . Show bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name'}",
    "record_name": "621",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total credits are offered by each department . Show bar chart .",
    "question_toks": [
      "How",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 .",
    "VQL": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2604",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ]
  },
  {
    "nl_queries": "How many courses are provided in each year ? Visualize with a group line chart grouping by semester .",
    "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , count(*) FROM SECTION GROUP BY semester ,  year', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year'}",
    "record_name": "647",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ],
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "How many courses are provided in each year ? Visualize with a group line chart grouping by semester .",
    "question_toks": [
      "How",
      "many",
      "courses",
      "are",
      "provided",
      "in",
      "each",
      "year",
      "?",
      "Visualize",
      "with",
      "a",
      "group",
      "line",
      "chart",
      "grouping",
      "by",
      "semester",
      "."
    ],
    "query": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "year"
    ]
  },
  {
    "nl_queries": "How many courses are provided in each year ? Visualize with a group line chart grouping by semester , and rank x axis in asc order .",
    "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC'}",
    "record_name": "647@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ],
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "How many courses are provided in each year ? Visualize with a group line chart grouping by semester , and rank x axis in asc order .",
    "question_toks": [
      "How",
      "many",
      "courses",
      "are",
      "provided",
      "in",
      "each",
      "year",
      "?",
      "Visualize",
      "with",
      "a",
      "group",
      "line",
      "chart",
      "grouping",
      "by",
      "semester",
      ",",
      "and",
      "rank",
      "x",
      "axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "year",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code Show bar chart , display X from high to low order .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC'}",
    "record_name": "872@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all payment method codes and the number of orders for each code Show bar chart , display X from high to low order .",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      "Show",
      "bar",
      "chart",
      ",",
      "display",
      "X",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "payment_method_code",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , list by the x axis in desc .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC'}",
    "record_name": "2605@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , list by the x axis in desc .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "list",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and total grades for each high schooler Plot them as a bar chart , show by the y-axis from high to low please .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC'}",
    "record_name": "2452@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and total grades for each high schooler Plot them as a bar chart , show by the y-axis from high to low please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , and display in desc by the Y .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) DESC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) DESC'}",
    "record_name": "2496@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , and display in desc by the Y .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "in",
      "desc",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "First_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "First_year",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "A line chart shows the change of the sum of monthly_rental over date_address_to , and group by attribute other_details",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "259",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "A line chart shows the change of the sum of monthly_rental over date_address_to , and group by attribute other_details",
    "question_toks": [
      "A",
      "line",
      "chart",
      "shows",
      "the",
      "change",
      "of",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details"
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and rank total number in descending order .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC'}",
    "record_name": "2605@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and rank total number in descending order .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "rank",
      "total",
      "number",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and the average grades for each high schooler Plot them as a bar chart , I want to show from high to low by the X please .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2453@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and the average grades for each high schooler Plot them as a bar chart , I want to show from high to low by the X please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of how many building from each building",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building'}",
    "record_name": "625",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of how many building from each building",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "how",
      "many",
      "building",
      "from",
      "each",
      "building"
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of other_details and the average of monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "219",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart shows the distribution of other_details and the average of monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , I want to list bars in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , I want to list bars in ascending order .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "I",
      "want",
      "to",
      "list",
      "bars",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ]
  },
  {
    "nl_queries": ", and show in desc by the total number .",
    "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
    "db_id": "company_office",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC'}",
    "record_name": "685@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": ", and show in desc by the total number .",
    "question_toks": [
      ",",
      "and",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the number of rooms with more than 50 capacity for each building Show bar chart , and could you display by the names from low to high ?",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC'}",
    "record_name": "620@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of rooms with more than 50 capacity for each building Show bar chart , and could you display by the names from low to high ?",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "rooms",
      "with",
      "more",
      "than",
      "50",
      "capacity",
      "for",
      "each",
      "building",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "display",
      "by",
      "the",
      "names",
      "from",
      "low",
      "to",
      "high",
      "?"
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for how many counties correspond to each police force ? , show by the names in desc .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC'}",
    "record_name": "709@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many counties correspond to each police force ? , show by the names in desc .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?",
      ",",
      "show",
      "by",
      "the",
      "names",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "Police_force",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "195",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "What are the different product names ? What is the average product price for each of them Show bar chart , show by the bar in ascending .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC'}",
    "record_name": "859@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different product names ? What is the average product price for each of them Show bar chart , show by the bar in ascending .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "Show",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "bar",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "Product_Name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the name and training hours of players whose hours are below 1500 Show bar chart , show pName in asc order .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC'}",
    "record_name": "2790@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and training hours of players whose hours are below 1500 Show bar chart , show pName in asc order .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "training",
      "hours",
      "of",
      "players",
      "whose",
      "hours",
      "are",
      "below",
      "1500",
      "Show",
      "bar",
      "chart",
      ",",
      "show",
      "pName",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "pName",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the average capacity among rooms in each building with a bar chart , I want to sort from high to low by the building please .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC'}",
    "record_name": "624@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the average capacity among rooms in each building with a bar chart , I want to sort from high to low by the building please .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "capacity",
      "among",
      "rooms",
      "in",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "building",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_from and the average of monthly_rental bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "265",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_from and the average of monthly_rental bin date_address_from by weekday .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me a pie chart for what are the names and number of hours spent training for each player who trains for less than 1500 hours ?",
    "VQL": "Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500', 'binning': ''}, 'VQL': 'Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500'}",
    "record_name": "2789",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me a pie chart for what are the names and number of hours spent training for each player who trains for less than 1500 hours ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      "?"
    ],
    "query": "Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_to and the average of monthly_rental bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "239",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_to and the average of monthly_rental bin date_address_to by weekday .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , could you list in desc by the y axis ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , could you list in desc by the y axis ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "could",
      "you",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "y",
      "axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a scatter chart about the correlation between ID and salary .",
    "VQL": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT ID , salary FROM instructor ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary'}",
    "record_name": "618",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Return a scatter chart about the correlation between ID and salary .",
    "question_toks": [
      "Return",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "ID",
      "and",
      "salary",
      "."
    ],
    "query": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "ID",
      ",",
      "salary",
      "FROM",
      "instructor",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Draw a bar chart for how many total credits are offered by each department ? , sort by the total number of credits from low to high .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC'}",
    "record_name": "621@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for how many total credits are offered by each department ? , sort by the total number of credits from low to high .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "total",
      "number",
      "of",
      "credits",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "sum",
      "(",
      "credits",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , and show by the the number of first year in ascending .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) ASC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) ASC'}",
    "record_name": "2496@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , and show by the the number of first year in ascending .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "the",
      "number",
      "of",
      "first",
      "year",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "First_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "First_year",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities . Show the proportion .",
    "VQL": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2606",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities . Show the proportion .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ".",
      "Show",
      "the",
      "proportion",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ]
  },
  {
    "nl_queries": "Visualize the general trend of the number of planned delivery date over the planned delivery date , and I want to order in ascending by the x axis .",
    "VQL": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC', 'binning': 'BIN Planned_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR'}",
    "record_name": "865@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "year"
      ],
      "vis": 2
    },
    "question": "Visualize the general trend of the number of planned delivery date over the planned delivery date , and I want to order in ascending by the x axis .",
    "question_toks": [
      "Visualize",
      "the",
      "general",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "planned",
      "delivery",
      "date",
      "over",
      "the",
      "planned",
      "delivery",
      "date",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Planned_Delivery_Date",
      "ASC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code . Show bar chart .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code'}",
    "record_name": "872",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all payment method codes and the number of orders for each code . Show bar chart .",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code"
    ]
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , sort names in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , sort names in ascending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "sort",
      "names",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ]
  },
  {
    "nl_queries": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and order by the names from high to low .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and order by the names from high to low .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "and",
      "order",
      "by",
      "the",
      "names",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each dept name , I want to show by the the total number in ascending .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC'}",
    "record_name": "654@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each dept name , I want to show by the the total number in ascending .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "dept",
      "name",
      ",",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , order by the bars in ascending .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC'}",
    "record_name": "3269@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , order by the bars in ascending .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "order",
      "by",
      "the",
      "bars",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for mean product price of each product name",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name'}",
    "record_name": "859",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for mean product price of each product name",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "mean",
      "product",
      "price",
      "of",
      "each",
      "product",
      "name"
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name"
    ]
  },
  {
    "nl_queries": "Display a pie chart for how many hosts does each nationality have ? List the nationality and the count .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Display a pie chart for how many hosts does each nationality have ? List the nationality and the count .",
    "question_toks": [
      "Display",
      "a",
      "pie",
      "chart",
      "for",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "Bar graph to show minimal enr from different cname",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state'}",
    "record_name": "2798",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show minimal enr from different cname",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "minimal",
      "enr",
      "from",
      "different",
      "cname"
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "Show me about the change of the amount of date_address_to over date_address_to , and group by attribute other_details in a line chart .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "249",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me about the change of the amount of date_address_to over date_address_to , and group by attribute other_details in a line chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "change",
      "of",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "in",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the names and their average grades of each high schooler with a bar chart , and I want to rank by the bars in descending .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2453@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and their average grades of each high schooler with a bar chart , and I want to rank by the bars in descending .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "their",
      "average",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "bars",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad Show bar chart , and I want to show by the x axis in desc .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC'}",
    "record_name": "872@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the distinct payment method codes with the number of orders mad Show bar chart , and I want to show by the x axis in desc .",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "payment_method_code",
      "DESC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "day",
      "of",
      "the",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What are the names and their total grades for each high schooler ? Show me the result using a bar chart .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2452",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and their total grades for each high schooler ? Show me the result using a bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "their",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      "Show",
      "me",
      "the",
      "result",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "Show me the trend about the average of monthly_rental over date_address_to , and group by attribute other_details with a line chart .",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "241",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend about the average of monthly_rental over date_address_to , and group by attribute other_details with a line chart .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_from and the sum of monthly_rental bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "264",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_from and the sum of monthly_rental bin date_address_from by weekday .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show the number of date of notes from each date of notes , could you display by the Y in descending ?",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the number of date of notes from each date of notes , could you display by the Y in descending ?",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "date",
      "of",
      "notes",
      "from",
      "each",
      "date",
      "of",
      "notes",
      ",",
      "could",
      "you",
      "display",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "DESC",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the maximum capacity among rooms in each building with a bar chart , list by the names in ascending please .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC'}",
    "record_name": "623@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the maximum capacity among rooms in each building with a bar chart , list by the names in ascending please .",
    "question_toks": [
      "Find",
      "the",
      "maximum",
      "capacity",
      "among",
      "rooms",
      "in",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "names",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the names and the average grades for each high schooler Plot them as a bar chart , I want to show X-axis from low to high order .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2453@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and the average grades for each high schooler Plot them as a bar chart , I want to show X-axis from low to high order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "show",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show all the planned delivery dates and bin by weekday in a bar chart , and rank Y in desc order .",
    "VQL": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC BIN Planned_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC', 'binning': 'BIN Planned_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC BIN Planned_Delivery_Date BY WEEKDAY'}",
    "record_name": "862@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show all the planned delivery dates and bin by weekday in a bar chart , and rank Y in desc order .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "planned",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "Y",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC BIN Planned_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "DESC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me the proportion on what are the names and number of hours spent training for each player who trains for less than 1500 hours ?",
    "VQL": "Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500', 'binning': ''}, 'VQL': 'Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500'}",
    "record_name": "2789",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me the proportion on what are the names and number of hours spent training for each player who trains for less than 1500 hours ?",
    "question_toks": [
      "Show",
      "me",
      "the",
      "proportion",
      "on",
      "what",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      "?"
    ],
    "query": "Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of other_details and the sum of monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "218",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of other_details and the sum of monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a pie chart about the proportion of state and enr .",
    "VQL": "Visualize PIE SELECT state , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT state , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize PIE SELECT state , enr FROM College ORDER BY enr'}",
    "record_name": "2793",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Draw a pie chart about the proportion of state and enr .",
    "question_toks": [
      "Draw",
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "proportion",
      "of",
      "state",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize PIE SELECT state , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "state",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and rank in desc by the sum population please .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and rank in desc by the sum population please .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "sum",
      "population",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the names and their total grades for each high schooler ? , could you display in asc by the Y-axis ?",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC'}",
    "record_name": "2452@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the names and their total grades for each high schooler ? , could you display in asc by the Y-axis ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "their",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "could",
      "you",
      "display",
      "in",
      "asc",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Tell me the trend about the claim dates using a trend line , and could you show Date_Claim_Settled from low to high order please ?",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC'}",
    "record_name": "2021@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Tell me the trend about the claim dates using a trend line , and could you show Date_Claim_Settled from low to high order please ?",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "claim",
      "dates",
      "using",
      "a",
      "trend",
      "line",
      ",",
      "and",
      "could",
      "you",
      "show",
      "Date_Claim_Settled",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many matches were played in each year ? , and I want to sort in ascending by the Y-axis .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC'}",
    "record_name": "3288@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many matches were played in each year ? , and I want to sort in ascending by the Y-axis .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "in",
      "ascending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart of minimal salary from each dept name , order dept_name in ascending order please .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "619@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of minimal salary from each dept name , order dept_name in ascending order please .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "minimal",
      "salary",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "order",
      "dept_name",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Bar chart of how many building from each building , and display total number in desc order .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC'}",
    "record_name": "625@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of how many building from each building , and display total number in desc order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "how",
      "many",
      "building",
      "from",
      "each",
      "building",
      ",",
      "and",
      "display",
      "total",
      "number",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "building",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Compare the frequency of each payment method code using a bar chart , I want to display by the x axis in asc .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2010@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the frequency of each payment method code using a bar chart , I want to display by the x axis in asc .",
    "question_toks": [
      "Compare",
      "the",
      "frequency",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "display",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the smallest enrollment of each state , and I want to sort Y-axis in descending order please .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC'}",
    "record_name": "2800@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the smallest enrollment of each state , and I want to sort Y-axis in descending order please .",
    "question_toks": [
      "Show",
      "the",
      "smallest",
      "enrollment",
      "of",
      "each",
      "state",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "Y-axis",
      "in",
      "descending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show all the actual delivery dates and bin by year in a line chart , and I want to display from high to low by the X-axis .",
    "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC', 'binning': 'BIN Actual_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR'}",
    "record_name": "864@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "year"
      ],
      "vis": 2
    },
    "question": "Show all the actual delivery dates and bin by year in a line chart , and I want to display from high to low by the X-axis .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "actual",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "year",
      "in",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Actual_Delivery_Date",
      "DESC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_to and the sum of monthly_rental bin date_address_to by time in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "230",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_to and the sum of monthly_rental bin date_address_to by time in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "time",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad in a bar chart , list in asc by the y axis .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC'}",
    "record_name": "872@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the distinct payment method codes with the number of orders mad in a bar chart , list in asc by the y axis .",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "A scatter chart shows the correlation between address_id and monthly_rental .",
    "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "A scatter chart shows the correlation between address_id and monthly_rental .",
    "question_toks": [
      "A",
      "scatter",
      "chart",
      "shows",
      "the",
      "correlation",
      "between",
      "address_id",
      "and",
      "monthly_rental",
      "."
    ],
    "query": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "address_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality in a bar chart , order by the names from high to low .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart , order by the names from high to low .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "by",
      "the",
      "names",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart , could you list by the Y in asc ?",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC'}",
    "record_name": "2497@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart , could you list by the Y in asc ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Count",
      "the",
      "last",
      "year",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "by",
      "the",
      "Y",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the different product names ? What is the average product price for each of them ?",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name'}",
    "record_name": "859",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different product names ? What is the average product price for each of them ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?"
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "194",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "What about the average amounts of payments by each method code ? You can give me a bar chart , sort from high to low by the y-axis .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC'}",
    "record_name": "2012@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What about the average amounts of payments by each method code ? You can give me a bar chart , sort from high to low by the y-axis .",
    "question_toks": [
      "What",
      "about",
      "the",
      "average",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the number of matches happened in each year Plot them as bar chart , show in desc by the X .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC'}",
    "record_name": "3288@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of matches happened in each year Plot them as bar chart , show in desc by the X .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "matches",
      "happened",
      "in",
      "each",
      "year",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code . Visualize by pie chart .",
    "VQL": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code'}",
    "record_name": "871",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show all payment method codes and the number of orders for each code . Visualize by pie chart .",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      ".",
      "Visualize",
      "by",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by time in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "194",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by time in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing the total number across police force , sort in ascending by the y-axis .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC'}",
    "record_name": "709@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing the total number across police force , sort in ascending by the y-axis .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "across",
      "police",
      "force",
      ",",
      "sort",
      "in",
      "ascending",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the number of students who participate in the tryout for each college ordered by descending count . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC'}",
    "record_name": "2802",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of students who participate in the tryout for each college ordered by descending count . Visualize by bar chart .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "students",
      "who",
      "participate",
      "in",
      "the",
      "tryout",
      "for",
      "each",
      "college",
      "ordered",
      "by",
      "descending",
      "count",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "tryout",
      "GROUP",
      "BY",
      "cName",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart for how many total credits are offered by each department ? , order by the names from low to high .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "621@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for how many total credits are offered by each department ? , order by the names from low to high .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "?",
      ",",
      "order",
      "by",
      "the",
      "names",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show the smallest enrollment of each state .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state'}",
    "record_name": "2800",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the smallest enrollment of each state .",
    "question_toks": [
      "Show",
      "the",
      "smallest",
      "enrollment",
      "of",
      "each",
      "state",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "How many rooms in each building have a capacity of over 50 Visualize by bar chart , list by the X in ascending .",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC'}",
    "record_name": "620@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many rooms in each building have a capacity of over 50 Visualize by bar chart , list by the X in ascending .",
    "question_toks": [
      "How",
      "many",
      "rooms",
      "in",
      "each",
      "building",
      "have",
      "a",
      "capacity",
      "of",
      "over",
      "50",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "X",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "For the average of monthly_rental , date_address_to , visualize the trend .",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "273",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "For the average of monthly_rental , date_address_to , visualize the trend .",
    "question_toks": [
      "For",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "date_address_to",
      ",",
      "visualize",
      "the",
      "trend",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the number of last names of teachers in alphabetical order of last name with a bar chart .",
    "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Teachers GROUP BY last_name ORDER BY last_name",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT last_name , COUNT(last_name) FROM Teachers GROUP BY last_name ORDER BY last_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT last_name , COUNT(last_name) FROM Teachers GROUP BY last_name ORDER BY last_name'}",
    "record_name": "186",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          30,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of last names of teachers in alphabetical order of last name with a bar chart .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "last",
      "names",
      "of",
      "teachers",
      "in",
      "alphabetical",
      "order",
      "of",
      "last",
      "name",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Teachers GROUP BY last_name ORDER BY last_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "last_name",
      ",",
      "COUNT",
      "(",
      "last_name",
      ")",
      "FROM",
      "Teachers",
      "GROUP",
      "BY",
      "last_name",
      "ORDER",
      "BY",
      "last_name"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "194",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name'}",
    "record_name": "619",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "What are the names and number of hours spent training for each player who trains for less than 1500 hours . Visualize by pie chart .",
    "VQL": "Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500', 'binning': ''}, 'VQL': 'Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500'}",
    "record_name": "2789",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours . Visualize by pie chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      ".",
      "Visualize",
      "by",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500"
    ]
  },
  {
    "nl_queries": "Visualize the general trend of the number of planned delivery date over the planned delivery date .",
    "VQL": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS', 'binning': 'BIN Planned_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY YEAR'}",
    "record_name": "865",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "year"
      ],
      "vis": 2
    },
    "question": "Visualize the general trend of the number of planned delivery date over the planned delivery date .",
    "question_toks": [
      "Visualize",
      "the",
      "general",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "planned",
      "delivery",
      "date",
      "over",
      "the",
      "planned",
      "delivery",
      "date",
      "."
    ],
    "query": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Draw a bar chart for what are the name and assets of each company , sorted in ascending order of company name ?",
    "VQL": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "db_id": "company_office",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , Assets_billion FROM Companies ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC'}",
    "record_name": "688",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the name and assets of each company , sorted in ascending order of company name ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "assets",
      "of",
      "each",
      "company",
      ",",
      "sorted",
      "in",
      "ascending",
      "order",
      "of",
      "company",
      "name",
      "?"
    ],
    "query": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "Assets_billion",
      "FROM",
      "Companies",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find date_address_from and the sum of monthly_rental bin date_address_from by time , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "246",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Find date_address_from and the sum of monthly_rental bin date_address_from by time , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "time",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Bar chart , the-axis is the state , and the Y axis is each state's the smallest enrollment .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state'}",
    "record_name": "2800",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart , the-axis is the state , and the Y axis is each state's the smallest enrollment .",
    "question_toks": [
      "Bar",
      "chart",
      ",",
      "the-axis",
      "is",
      "the",
      "state",
      ",",
      "and",
      "the",
      "Y",
      "axis",
      "is",
      "each",
      "state's",
      "the",
      "smallest",
      "enrollment",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for mean product price of each product name , show from low to high by the total number .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC'}",
    "record_name": "859@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for mean product price of each product name , show from low to high by the total number .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "mean",
      "product",
      "price",
      "of",
      "each",
      "product",
      "name",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Product_Price",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_from and the amount of date_address_from bin date_address_from by time in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "233",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_from and the amount of date_address_from bin date_address_from by time in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "time",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "How many total amounts of payments by each method code ? You can give me a bar chart , show in desc by the Payment_Method_Code .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2011@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total amounts of payments by each method code ? You can give me a bar chart , show in desc by the Payment_Method_Code .",
    "question_toks": [
      "How",
      "many",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "Payment_Method_Code",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ]
  },
  {
    "nl_queries": "A line chart shows the trend of monthly_rental over date_address_from .",
    "VQL": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "267",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "A line chart shows the trend of monthly_rental over date_address_from .",
    "question_toks": [
      "A",
      "line",
      "chart",
      "shows",
      "the",
      "trend",
      "of",
      "monthly_rental",
      "over",
      "date_address_from",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_from",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis building y axis the average of capacity , and sort from high to low by the x-axis .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC'}",
    "record_name": "624@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis building y axis the average of capacity , and sort from high to low by the x-axis .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "building",
      "y",
      "axis",
      "the",
      "average",
      "of",
      "capacity",
      ",",
      "and",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "211",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What are the number of the dates of the assessment notes ?",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the number of the dates of the assessment notes ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?"
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What is the lowest salary in departments with average salary greater than the overall average . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name'}",
    "record_name": "619",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the lowest salary in departments with average salary greater than the overall average . Plot them as bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Create a pie chart showing total number of amount payment across payment method code .",
    "VQL": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2013",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing total number of amount payment across payment method code .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "total",
      "number",
      "of",
      "amount",
      "payment",
      "across",
      "payment",
      "method",
      "code",
      "."
    ],
    "query": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "Plot date claim settled by the number of date claim settled as a line chart , and list by the X from low to high .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC'}",
    "record_name": "2021@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Plot date claim settled by the number of date claim settled as a line chart , and list by the X from low to high .",
    "question_toks": [
      "Plot",
      "date",
      "claim",
      "settled",
      "by",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a bar chart on how many counties correspond to each police force ? , and could you list by the y axis in descending ?",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC'}",
    "record_name": "709@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on how many counties correspond to each police force ? , and could you list by the y axis in descending ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?",
      ",",
      "and",
      "could",
      "you",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors Plot them as bar chart , display in ascending by the Y-axis .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC'}",
    "record_name": "619@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors Plot them as bar chart , display in ascending by the Y-axis .",
    "question_toks": [
      "Find",
      "the",
      "minimum",
      "salary",
      "for",
      "the",
      "departments",
      "whose",
      "average",
      "salary",
      "is",
      "above",
      "the",
      "average",
      "payment",
      "of",
      "all",
      "instructors",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "min",
      "(",
      "salary",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the dates of the assessment notes , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the dates of the assessment notes , and count them by a bar chart",
    "question_toks": [
      "What",
      "are",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What is the average capacity for rooms in each building ? Draw a bar chart , rank by the X-axis in descending .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC'}",
    "record_name": "624@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average capacity for rooms in each building ? Draw a bar chart , rank by the X-axis in descending .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "capacity",
      "for",
      "rooms",
      "in",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "X-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of minimal salary from each dept name",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name'}",
    "record_name": "619",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of minimal salary from each dept name",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "minimal",
      "salary",
      "from",
      "each",
      "dept",
      "name"
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of dept_name and the sum of salary , and group by attribute dept_name in a bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "616",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me about the distribution of dept_name and the sum of salary , and group by attribute dept_name in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "sum",
      "of",
      "salary",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "SUM",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "What is the average capacity for rooms in each building ? Draw a bar chart , and display bars in asc order .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC'}",
    "record_name": "624@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average capacity for rooms in each building ? Draw a bar chart , and display bars in asc order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "capacity",
      "for",
      "rooms",
      "in",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "bars",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the smallest enrollment of each state using a bar chart , show in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC'}",
    "record_name": "2800@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the smallest enrollment of each state using a bar chart , show in ascending by the y axis .",
    "question_toks": [
      "Show",
      "the",
      "smallest",
      "enrollment",
      "of",
      "each",
      "state",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What about the average amounts of payments by each method code ? You can give me a bar chart , display from high to low by the X .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2012@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What about the average amounts of payments by each method code ? You can give me a bar chart , display from high to low by the X .",
    "question_toks": [
      "What",
      "about",
      "the",
      "average",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average , could you list X-axis from high to low order ?",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "619@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average , could you list X-axis from high to low order ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      ",",
      "could",
      "you",
      "list",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code , sort by the the average of amount payment in ascending .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC'}",
    "record_name": "2012@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the average amount of payment by each payment method code , sort by the the average of amount payment in ascending .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "sort",
      "by",
      "the",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "how many students are in each department ? , and sort in asc by the Y please .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC'}",
    "record_name": "654@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "how many students are in each department ? , and sort in asc by the Y please .",
    "question_toks": [
      "how",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "?",
      ",",
      "and",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "Y",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the number of the dates of the assessment notes ? , sort by the x-axis from high to low please .",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR'}",
    "record_name": "188@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "What are the number of the dates of the assessment notes ? , sort by the x-axis from high to low please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "x-axis",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "date_of_notes",
      "DESC",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each year using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each year using a bar chart .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Bar chart of sum amount payment from each payment method code",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2011",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of sum amount payment from each payment method code",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "sum",
      "amount",
      "payment",
      "from",
      "each",
      "payment",
      "method",
      "code"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the average of monthly_rental over the date_address_to , and group by attribute other_details and bin date_address_to by time by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "195",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the average of monthly_rental over the date_address_to , and group by attribute other_details and bin date_address_to by time by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Bar chart of mean salary from each dept name , could you list names from low to high order ?",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "627@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of mean salary from each dept name , could you list names from low to high order ?",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "mean",
      "salary",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "could",
      "you",
      "list",
      "names",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , and list in asc by the sum population .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , and list in asc by the sum population .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "and",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "sum",
      "population",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a trend line with sorting the payment day in ascending order to show the total amount of payment by each payment day .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2014",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a trend line with sorting the payment day in ascending order to show the total amount of payment by each payment day .",
    "question_toks": [
      "Return",
      "a",
      "trend",
      "line",
      "with",
      "sorting",
      "the",
      "payment",
      "day",
      "in",
      "ascending",
      "order",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "day",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ]
  },
  {
    "nl_queries": "What is the greatest capacity for rooms in each building ? Draw a bar chart , and list by the names in ascending please .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC'}",
    "record_name": "623@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the greatest capacity for rooms in each building ? Draw a bar chart , and list by the names in ascending please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "greatest",
      "capacity",
      "for",
      "rooms",
      "in",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "names",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a histogram to show the date and the amount for all the payments processed with Visa , order y axis in descending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\"}",
    "record_name": "2030@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram to show the date and the amount for all the payments processed with Visa , order y axis in descending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "to",
      "show",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "order",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "DESC"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad . Show bar chart .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code'}",
    "record_name": "872",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the distinct payment method codes with the number of orders mad . Show bar chart .",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code"
    ]
  },
  {
    "nl_queries": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend , list in asc by the date_of_latest_revision please .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend , list in asc by the date_of_latest_revision please .",
    "question_toks": [
      "On",
      "which",
      "days",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      "on",
      "catalogs",
      ",",
      "bin",
      "the",
      "date",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "to",
      "show",
      "the",
      "trend",
      ",",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "date_of_latest_revision",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "ASC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Bar chart of the number of planned delivery date from each planned delivery date",
    "VQL": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS', 'binning': 'BIN Planned_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY WEEKDAY'}",
    "record_name": "862",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart of the number of planned delivery date from each planned delivery date",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "planned",
      "delivery",
      "date",
      "from",
      "each",
      "planned",
      "delivery",
      "date"
    ],
    "query": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the maximum capacity among rooms in each building with a bar chart , and I want to show Y-axis from low to high order .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC'}",
    "record_name": "623@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              1,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the maximum capacity among rooms in each building with a bar chart , and I want to show Y-axis from low to high order .",
    "question_toks": [
      "Find",
      "the",
      "maximum",
      "capacity",
      "among",
      "rooms",
      "in",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "max",
      "(",
      "capacity",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the names and average salaries for departments with average salary higher than 42000 ? , and could you list names from low to high order ?",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "627@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the names and average salaries for departments with average salary higher than 42000 ? , and could you list names from low to high order ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "?",
      ",",
      "and",
      "could",
      "you",
      "list",
      "names",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , and show Y-axis in ascending order .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC'}",
    "record_name": "2607@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , and show Y-axis in ascending order .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "Y-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the smallest enrollment of each state using a bar chart , and could you display by the x axis in descending please ?",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC'}",
    "record_name": "2800@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the smallest enrollment of each state using a bar chart , and could you display by the x axis in descending please ?",
    "question_toks": [
      "Show",
      "the",
      "smallest",
      "enrollment",
      "of",
      "each",
      "state",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "display",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "descending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "state",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart , sort by the x axis from low to high .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart , sort by the x axis from low to high .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "ASC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Can you show me a bar chart to answer how many people with different names for each high schooler ? , and I want to rank how many name from high to low order please .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC'}",
    "record_name": "2451@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you show me a bar chart to answer how many people with different names for each high schooler ? , and I want to rank how many name from high to low order please .",
    "question_toks": [
      "Can",
      "you",
      "show",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "answer",
      "how",
      "many",
      "people",
      "with",
      "different",
      "names",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "how",
      "many",
      "name",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and sort the total number from low to high order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and sort the total number from low to high order .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "the",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What about the average amounts of payments by each method code ? You can give me a bar chart .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2012",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What about the average amounts of payments by each method code ? You can give me a bar chart .",
    "question_toks": [
      "What",
      "about",
      "the",
      "average",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "Find the number of players for each hand type Show bar chart , and could you list by the total number in asc ?",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC'}",
    "record_name": "3287@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of players for each hand type Show bar chart , and could you list by the total number in asc ?",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "hand",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "list",
      "by",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for how many students are in each department ? , and show in ascending by the Y .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC'}",
    "record_name": "654@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for how many students are in each department ? , and show in ascending by the Y .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "?",
      ",",
      "and",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by time in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "196",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by time in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality in a bar chart .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "Count the names of each high schooler using a bar chart , and order by the x axis from low to high .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2451@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the names of each high schooler using a bar chart , and order by the x axis from low to high .",
    "question_toks": [
      "Count",
      "the",
      "names",
      "of",
      "each",
      "high",
      "schooler",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code in a bar chart .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code'}",
    "record_name": "872",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all payment method codes and the number of orders for each code in a bar chart .",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code"
    ]
  },
  {
    "nl_queries": "Draw a line chart about the change of the sum of monthly_rental over date_address_to , and group by attribute other_details .",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "259",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Draw a line chart about the change of the sum of monthly_rental over date_address_to , and group by attribute other_details .",
    "question_toks": [
      "Draw",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me the proportion on what are the name and level of catalog structure with level number between 5 and 10",
    "VQL": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2604",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me the proportion on what are the name and level of catalog structure with level number between 5 and 10",
    "question_toks": [
      "Show",
      "me",
      "the",
      "proportion",
      "on",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10"
    ],
    "query": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ]
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , and list from high to low by the Y-axis .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , and list from high to low by the Y-axis .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "and",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them , display total number in ascending order .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY'}",
    "record_name": "2499@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them , display total number in ascending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      ",",
      "display",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "ASC",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a pie chart about the proportion of other_details and the sum of monthly_rental .",
    "VQL": "Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "252",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return a pie chart about the proportion of other_details and the sum of monthly_rental .",
    "question_toks": [
      "Return",
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "proportion",
      "of",
      "other_details",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "."
    ],
    "query": "Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "other_details",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Please use a bar chart to show the total amount of payment by each payment method code .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2011",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the total amount of payment by each payment method code .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "Plot date claim settled by the number of date claim settled as a line chart , and I want to order in desc by the X .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC'}",
    "record_name": "2021@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Plot date claim settled by the number of date claim settled as a line chart , and I want to order in desc by the X .",
    "question_toks": [
      "Plot",
      "date",
      "claim",
      "settled",
      "by",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of sum amount payment from each payment method code , and could you sort in asc by the Y ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC'}",
    "record_name": "2011@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of sum amount payment from each payment method code , and could you sort in asc by the Y ?",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "sum",
      "amount",
      "payment",
      "from",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "Y",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2607",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ]
  },
  {
    "nl_queries": "Give the proportion of how many players are there for each hand type ?",
    "VQL": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand', 'binning': ''}, 'VQL': 'Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand'}",
    "record_name": "3286",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give the proportion of how many players are there for each hand type ?",
    "question_toks": [
      "Give",
      "the",
      "proportion",
      "of",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?"
    ],
    "query": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_to and the amount of date_address_to bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "205",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_to and the amount of date_address_to bin date_address_to by time .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , I want to list in asc by the x axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC'}",
    "record_name": "2607@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , I want to list in asc by the x axis .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      "Show",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the names and average salaries for departments with average salary higher than 42000 ? , and list in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC'}",
    "record_name": "627@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the names and average salaries for departments with average salary higher than 42000 ? , and list in ascending by the y axis .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "?",
      ",",
      "and",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "salary",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What is the order date of each booking , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS', 'binning': 'BIN Order_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY'}",
    "record_name": "860",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What is the order date of each booking , and count them by a bar chart",
    "question_toks": [
      "What",
      "is",
      "the",
      "order",
      "date",
      "of",
      "each",
      "booking",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Order_Date",
      ",",
      "COUNT",
      "(",
      "Order_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Order_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What are the dates of the assessment notes , and count them by a bar chart , could you display by the Y in descending ?",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the dates of the assessment notes , and count them by a bar chart , could you display by the Y in descending ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "display",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "DESC",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Visualize a scatter chart about the correlation between address_id and monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "253",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Visualize a scatter chart about the correlation between address_id and monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "Visualize",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "address_id",
      "and",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "address_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the names and their average grades of each high schooler with a bar chart , could you rank in descending by the Y-axis ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC'}",
    "record_name": "2453@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and their average grades of each high schooler with a bar chart , could you rank in descending by the Y-axis ?",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "their",
      "average",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find dept_name and the amount of dept_name , and group by attribute dept_name , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "613",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find dept_name and the amount of dept_name , and group by attribute dept_name , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "dept_name",
      "and",
      "the",
      "amount",
      "of",
      "dept_name",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "COUNT",
      "(",
      "dept_name",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Tell me the trend about the claim dates using a trend line .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled'}",
    "record_name": "2021",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Tell me the trend about the claim dates using a trend line .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "claim",
      "dates",
      "using",
      "a",
      "trend",
      "line",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled"
    ]
  },
  {
    "nl_queries": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and order in ascending by the names .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and order in ascending by the names .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "and",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the names and sum grades of each high schooler Plot them as bar graph , I want to list bar in asc order .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2452@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and sum grades of each high schooler Plot them as bar graph , I want to list bar in asc order .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "sum",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "bar",
      "graph",
      ",",
      "I",
      "want",
      "to",
      "list",
      "bar",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar graph to show the number of name from different name , and could you order Y in asc order please ?",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC'}",
    "record_name": "2451@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of name from different name , and could you order Y in asc order please ?",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "name",
      "from",
      "different",
      "name",
      ",",
      "and",
      "could",
      "you",
      "order",
      "Y",
      "in",
      "asc",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and I want to list in asc by the x axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC'}",
    "record_name": "2607@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and I want to list in asc by the x axis .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the names and average salaries of all departments whose average salary is greater than 42000 , and rank by the dept_name in ascending .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "627@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the names and average salaries of all departments whose average salary is greater than 42000 , and rank by the dept_name in ascending .",
    "question_toks": [
      "Find",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "of",
      "all",
      "departments",
      "whose",
      "average",
      "salary",
      "is",
      "greater",
      "than",
      "42000",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "dept_name",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "How many students participated in tryouts for each college by descennding count . Show a pie chart .",
    "VQL": "Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC'}",
    "record_name": "2801",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many students participated in tryouts for each college by descennding count . Show a pie chart .",
    "question_toks": [
      "How",
      "many",
      "students",
      "participated",
      "in",
      "tryouts",
      "for",
      "each",
      "college",
      "by",
      "descennding",
      "count",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "tryout",
      "GROUP",
      "BY",
      "cName",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the day of the week interval and then compute the total amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "2000",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the day of the week interval and then compute the total amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "compute",
      "the",
      "total",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3269",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ]
  },
  {
    "nl_queries": "Show the names and the total grades of each high schooler by a bar chart , and could you show by the name in asc ?",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2452@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and the total grades of each high schooler by a bar chart , and could you show by the name in asc ?",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "the",
      "total",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "show",
      "by",
      "the",
      "name",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the total number of students in each department Show bar chart , and display by the Y from low to high .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC'}",
    "record_name": "654@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the total number of students in each department Show bar chart , and display by the Y from low to high .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "students",
      "in",
      "each",
      "department",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the names and average salaries for departments with average salary higher than 42000 ? , and could you order by the Y-axis from high to low ?",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC'}",
    "record_name": "627@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the names and average salaries for departments with average salary higher than 42000 ? , and could you order by the Y-axis from high to low ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "?",
      ",",
      "and",
      "could",
      "you",
      "order",
      "by",
      "the",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "salary",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad by a pie chart .",
    "VQL": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code'}",
    "record_name": "871",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "List the distinct payment method codes with the number of orders mad by a pie chart .",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of dept_name and the average of salary , and group by attribute dept_name in a bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "617",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me about the distribution of dept_name and the average of salary , and group by attribute dept_name in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "average",
      "of",
      "salary",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "204",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many players are there for each hand type ? , could you list by the total number in asc ?",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC'}",
    "record_name": "3287@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many players are there for each hand type ? , could you list by the total number in asc ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?",
      ",",
      "could",
      "you",
      "list",
      "by",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Compare the smallest enrollment of schools in each state using a bar chart , order by the Y-axis in descending please .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC'}",
    "record_name": "2798@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the smallest enrollment of schools in each state using a bar chart , order by the Y-axis in descending please .",
    "question_toks": [
      "Compare",
      "the",
      "smallest",
      "enrollment",
      "of",
      "schools",
      "in",
      "each",
      "state",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "by",
      "the",
      "Y-axis",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" ? , sort date_incident_end from low to high order .",
    "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY date_incident_end ASC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY date_incident_end ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY date_incident_end ASC'}",
    "record_name": "280@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          45,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" ? , sort date_incident_end from low to high order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "the",
      "number",
      "of",
      "end",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      ",",
      "sort",
      "date_incident_end",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY date_incident_end ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_end",
      ",",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "GROUP",
      "BY",
      "date_incident_end",
      "ORDER",
      "BY",
      "date_incident_end",
      "ASC"
    ]
  },
  {
    "nl_queries": "How many players are there for each hand type Visualize by bar chart , sort by the x-axis in ascending .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC'}",
    "record_name": "3287@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many players are there for each hand type Visualize by bar chart , sort by the x-axis in ascending .",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "x-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "hand",
      "ASC"
    ]
  },
  {
    "nl_queries": "what are the different product names ? What is the average product price for each of them ?",
    "VQL": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name'}",
    "record_name": "858",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "what are the different product names ? What is the average product price for each of them ?",
    "question_toks": [
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?"
    ],
    "query": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name"
    ]
  },
  {
    "nl_queries": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , show in descending by the y axis please .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , show in descending by the y axis please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "y",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of total number of credits from each dept name , rank bars in asc order .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "621@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of total number of credits from each dept name , rank bars in asc order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "total",
      "number",
      "of",
      "credits",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "rank",
      "bars",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "How many total credits are offered by each department Show bar chart , I want to display Y in ascending order .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC'}",
    "record_name": "621@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total credits are offered by each department Show bar chart , I want to display Y in ascending order .",
    "question_toks": [
      "How",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "Show",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "display",
      "Y",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "sum",
      "(",
      "credits",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what are the names and average salaries for departments with average salary higher than 42000 ? , list x axis in descending order .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "627@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the names and average salaries for departments with average salary higher than 42000 ? , list x axis in descending order .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "?",
      ",",
      "list",
      "x",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code , rank x-axis from low to high order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2012@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the average amount of payment by each payment method code , rank x-axis from low to high order .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "rank",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me the trend about the amount of date_address_to over date_address_to , and group by attribute date_address_to .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "266",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Give me the trend about the amount of date_address_to over date_address_to , and group by attribute date_address_to .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me about the change of the amount of date_address_to over date_address_to , and group by attribute date_address_to in a line chart .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "266",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me about the change of the amount of date_address_to over date_address_to , and group by attribute date_address_to in a line chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "change",
      "of",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "in",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many matches were played in each year ?",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR'}",
    "record_name": "3288",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many matches were played in each year ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?"
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many total credits are offered by each department ? , and order by the names from low to high .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "621@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many total credits are offered by each department ? , and order by the names from low to high .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "?",
      ",",
      "and",
      "order",
      "by",
      "the",
      "names",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "How many players are there for each hand type Visualize by bar chart , and I want to list by the Y-axis in ascending please .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC'}",
    "record_name": "3287@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many players are there for each hand type Visualize by bar chart , and I want to list by the Y-axis in ascending please .",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "by",
      "the",
      "Y-axis",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "204",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a line chart about the change of the amount of date_address_to over date_address_to , and group by attribute other_details .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "249",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart about the change of the amount of date_address_to over date_address_to , and group by attribute other_details .",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality by a pie chart .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show different nationalities along with the number of hosts of each nationality by a pie chart .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_to and the amount of date_address_to bin date_address_to by time in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "205",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_to and the amount of date_address_to bin date_address_to by time in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "time",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" and bin by month , could you show by the y-axis from high to low please ?",
    "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) DESC BIN date_incident_end BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) DESC', 'binning': 'BIN date_incident_end BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) DESC BIN date_incident_end BY MONTH'}",
    "record_name": "279@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              45,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        45,
        "month"
      ],
      "vis": 0
    },
    "question": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" and bin by month , could you show by the y-axis from high to low please ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "the",
      "number",
      "of",
      "end",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "and",
      "bin",
      "by",
      "month",
      ",",
      "could",
      "you",
      "show",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) DESC BIN date_incident_end BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_end",
      ",",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "DESC",
      "BIN",
      "date_incident_end",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Show the names and sum grades of each high schooler Plot them as bar graph , and could you sort Y-axis in ascending order ?",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC'}",
    "record_name": "2452@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and sum grades of each high schooler Plot them as bar graph , and could you sort Y-axis in ascending order ?",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "sum",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "bar",
      "graph",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "Y-axis",
      "in",
      "ascending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the dates of the assessment notes , and count them by a bar chart , display y axis from low to high order .",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the dates of the assessment notes , and count them by a bar chart , display y axis from low to high order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "ASC",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart , rank y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart , rank y-axis in descending order .",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me a pie chart to reflect the proportion of other_details and the sum of monthly_rental .",
    "VQL": "Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "252",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie chart to reflect the proportion of other_details and the sum of monthly_rental .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "chart",
      "to",
      "reflect",
      "the",
      "proportion",
      "of",
      "other_details",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "."
    ],
    "query": "Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "other_details",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the total credits of courses provided by different department Plot them as bar chart , and order by the dept_name in descending .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "621@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the total credits of courses provided by different department Plot them as bar chart , and order by the dept_name in descending .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "credits",
      "of",
      "courses",
      "provided",
      "by",
      "different",
      "department",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "dept_name",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Plot date of latest revision by the number of date of latest revision as a line chart , and list date_of_latest_revision from high to low order .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Plot date of latest revision by the number of date of latest revision as a line chart , and list date_of_latest_revision from high to low order .",
    "question_toks": [
      "Plot",
      "date",
      "of",
      "latest",
      "revision",
      "by",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "list",
      "date_of_latest_revision",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "DESC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Display a bar chart for how many rooms in each building have a capacity of over 50 ?",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building'}",
    "record_name": "620",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many rooms in each building have a capacity of over 50 ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "rooms",
      "in",
      "each",
      "building",
      "have",
      "a",
      "capacity",
      "of",
      "over",
      "50",
      "?"
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "Compute the total the average of product price across product name as a pie chart .",
    "VQL": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name'}",
    "record_name": "858",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Compute the total the average of product price across product name as a pie chart .",
    "question_toks": [
      "Compute",
      "the",
      "total",
      "the",
      "average",
      "of",
      "product",
      "price",
      "across",
      "product",
      "name",
      "as",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name"
    ]
  },
  {
    "nl_queries": "A bar chart about what are the different product names ? What is the average product price for each of them ? , show in descending by the names .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC'}",
    "record_name": "859@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the different product names ? What is the average product price for each of them ? , show in descending by the names .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "Product_Name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the trend about the amount of date_address_to over date_address_to , and group by attribute other_details .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "249",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Give me the trend about the amount of date_address_to over date_address_to , and group by attribute other_details .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show how many order date from different order date",
    "VQL": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS', 'binning': 'BIN Order_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY'}",
    "record_name": "860",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar graph to show how many order date from different order date",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "how",
      "many",
      "order",
      "date",
      "from",
      "different",
      "order",
      "date"
    ],
    "query": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Order_Date",
      ",",
      "COUNT",
      "(",
      "Order_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Order_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me about the correlation between student_id and monthly_rental , and group by attribute other_details in a scatter chart .",
    "VQL": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "240",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show me about the correlation between student_id and monthly_rental , and group by attribute other_details in a scatter chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "in",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "204",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What is the relationship between address_id and monthly_rental ?",
    "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "What is the relationship between address_id and monthly_rental ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "relationship",
      "between",
      "address_id",
      "and",
      "monthly_rental",
      "?"
    ],
    "query": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "address_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of how many building from each building , and could you rank by the X in asc ?",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC'}",
    "record_name": "625@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of how many building from each building , and could you rank by the X in asc ?",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "how",
      "many",
      "building",
      "from",
      "each",
      "building",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "X",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "189",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by time .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2607",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ]
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3269",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ]
  },
  {
    "nl_queries": "A pie chart shows the proportion of other_details and the amount of other_details .",
    "VQL": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "250",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart shows the proportion of other_details and the amount of other_details .",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "shows",
      "the",
      "proportion",
      "of",
      "other_details",
      "and",
      "the",
      "amount",
      "of",
      "other_details",
      "."
    ],
    "query": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "other_details",
      ",",
      "COUNT",
      "(",
      "other_details",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "For each distinct product name , show its average product price , show X-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC'}",
    "record_name": "859@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each distinct product name , show its average product price , show X-axis from high to low order .",
    "question_toks": [
      "For",
      "each",
      "distinct",
      "product",
      "name",
      ",",
      "show",
      "its",
      "average",
      "product",
      "price",
      ",",
      "show",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "Product_Name",
      "DESC"
    ]
  },
  {
    "nl_queries": ", and order by the y axis in ascending .",
    "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC",
    "db_id": "company_office",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC'}",
    "record_name": "685@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": ", and order by the y axis in ascending .",
    "question_toks": [
      ",",
      "and",
      "order",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" ? , sort by the Y in ascending please .",
    "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY COUNT(date_incident_end) ASC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY COUNT(date_incident_end) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY COUNT(date_incident_end) ASC'}",
    "record_name": "280@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          45,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              45,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" ? , sort by the Y in ascending please .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "the",
      "number",
      "of",
      "end",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY COUNT(date_incident_end) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_end",
      ",",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "GROUP",
      "BY",
      "date_incident_end",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "201",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by time in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "201",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by time in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Give me the proportion about the location of each party with a pie chart .",
    "VQL": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location'}",
    "record_name": "2506",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me the proportion about the location of each party with a pie chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "proportion",
      "about",
      "the",
      "location",
      "of",
      "each",
      "party",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location"
    ]
  },
  {
    "nl_queries": "What are the names and their total grades for each high schooler ? Show me the result using a bar chart , and show in descending by the total number of grade .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC'}",
    "record_name": "2452@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and their total grades for each high schooler ? Show me the result using a bar chart , and show in descending by the total number of grade .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "their",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      "Show",
      "me",
      "the",
      "result",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "total",
      "number",
      "of",
      "grade",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa by each year using a bar chart , and could you sort by the total number from high to low please ?",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa by each year using a bar chart , and could you sort by the total number from high to low please ?",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "List the order dates of all the bookings , and count them by a bar chart",
    "VQL": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS', 'binning': 'BIN Order_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY'}",
    "record_name": "860",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "List the order dates of all the bookings , and count them by a bar chart",
    "question_toks": [
      "List",
      "the",
      "order",
      "dates",
      "of",
      "all",
      "the",
      "bookings",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "bar",
      "chart"
    ],
    "query": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Order_Date",
      ",",
      "COUNT",
      "(",
      "Order_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Order_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Can you show me a bar chart to answer how many people with different names for each high schooler ? , show from low to high by the how many name .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC'}",
    "record_name": "2451@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you show me a bar chart to answer how many people with different names for each high schooler ? , show from low to high by the how many name .",
    "question_toks": [
      "Can",
      "you",
      "show",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "answer",
      "how",
      "many",
      "people",
      "with",
      "different",
      "names",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "how",
      "many",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "A pie chart shows the proportion of state and enr .",
    "VQL": "Visualize PIE SELECT state , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT state , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize PIE SELECT state , enr FROM College ORDER BY enr'}",
    "record_name": "2793",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart shows the proportion of state and enr .",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "shows",
      "the",
      "proportion",
      "of",
      "state",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize PIE SELECT state , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "state",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "What is the average capacity for rooms in each building ? Draw a bar chart , and sort in asc by the Y .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC'}",
    "record_name": "624@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average capacity for rooms in each building ? Draw a bar chart , and sort in asc by the Y .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "capacity",
      "for",
      "rooms",
      "in",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "avg",
      "(",
      "capacity",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the names and sum grades of each high schooler . Plot them as bar graph .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2452",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and sum grades of each high schooler . Plot them as bar graph .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "sum",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "graph",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "How many total credits are offered by each department Show bar chart , and order by the total number from high to low .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC'}",
    "record_name": "621@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total credits are offered by each department Show bar chart , and order by the total number from high to low .",
    "question_toks": [
      "How",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "sum",
      "(",
      "credits",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis name y axis total number of grade , show by the y-axis from high to low please .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC'}",
    "record_name": "2452@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis name y axis total number of grade , show by the y-axis from high to low please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "name",
      "y",
      "axis",
      "total",
      "number",
      "of",
      "grade",
      ",",
      "show",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show all the actual delivery dates and bin by year in a line chart , and rank in descending by the x-axis .",
    "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC', 'binning': 'BIN Actual_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR'}",
    "record_name": "864@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "year"
      ],
      "vis": 2
    },
    "question": "Show all the actual delivery dates and bin by year in a line chart , and rank in descending by the x-axis .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "actual",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "year",
      "in",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Actual_Delivery_Date",
      "DESC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Visualize a line chart about the change of the sum of monthly_rental over date_address_to , and group by attribute date_address_to .",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Visualize a line chart about the change of the sum of monthly_rental over date_address_to , and group by attribute date_address_to .",
    "question_toks": [
      "Visualize",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and number of hours spent training for each player who trains for less than 1500 hours Visualize by bar chart , rank y axis in descending order .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC'}",
    "record_name": "2790@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours Visualize by bar chart , rank y axis in descending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "rank",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "HS",
      "DESC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average , and list by the total number from high to low .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC'}",
    "record_name": "619@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average , and list by the total number from high to low .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      ",",
      "and",
      "list",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "min",
      "(",
      "salary",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the dates of the assessment notes , and count them by a line chart",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR'}",
    "record_name": "188",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "What are the dates of the assessment notes , and count them by a line chart",
    "question_toks": [
      "What",
      "are",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "line",
      "chart"
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find the maximum capacity among rooms in each building with a bar chart , I want to list by the y axis in desc please .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC'}",
    "record_name": "623@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              1,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the maximum capacity among rooms in each building with a bar chart , I want to list by the y axis in desc please .",
    "question_toks": [
      "Find",
      "the",
      "maximum",
      "capacity",
      "among",
      "rooms",
      "in",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "desc",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "max",
      "(",
      "capacity",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a scatter chart about the correlation between student_id and monthly_rental .",
    "VQL": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Draw a scatter chart about the correlation between student_id and monthly_rental .",
    "question_toks": [
      "Draw",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "monthly_rental",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "195",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code Show bar chart , order from high to low by the Y .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC'}",
    "record_name": "872@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all payment method codes and the number of orders for each code Show bar chart , order from high to low by the Y .",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      "Show",
      "bar",
      "chart",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many total amounts of payments by each method code ? You can give me a bar chart , list by the y axis in desc .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC'}",
    "record_name": "2011@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total amounts of payments by each method code ? You can give me a bar chart , list by the y axis in desc .",
    "question_toks": [
      "How",
      "many",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of the total number from each year , and I want to order by the bar in ascending .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC'}",
    "record_name": "3288@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each year , and I want to order by the bar in ascending .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "year",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "bar",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the different product names ? What is the average product price for each of them ? , and list Y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC'}",
    "record_name": "859@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different product names ? What is the average product price for each of them ? , and list Y-axis in descending order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?",
      ",",
      "and",
      "list",
      "Y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Product_Price",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the amount of date_address_to over the date_address_to , and group by attribute other_details and bin date_address_to by time by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "189",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the amount of date_address_to over the date_address_to , and group by attribute other_details and bin date_address_to by time by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "the",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "List the name and number of followers for each user , and sort the results by the number of followers in descending order .",
    "VQL": "Visualize BAR SELECT name , followers FROM user_profiles ORDER BY followers DESC",
    "db_id": "twitter_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , followers FROM user_profiles ORDER BY followers DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , followers FROM user_profiles ORDER BY followers DESC'}",
    "record_name": "3067",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the name and number of followers for each user , and sort the results by the number of followers in descending order .",
    "question_toks": [
      "List",
      "the",
      "name",
      "and",
      "number",
      "of",
      "followers",
      "for",
      "each",
      "user",
      ",",
      "and",
      "sort",
      "the",
      "results",
      "by",
      "the",
      "number",
      "of",
      "followers",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , followers FROM user_profiles ORDER BY followers DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "followers",
      "FROM",
      "user_profiles",
      "ORDER",
      "BY",
      "followers",
      "DESC"
    ]
  },
  {
    "nl_queries": "A pie chart showing the proportion of the smallest enrollment of schools in each state",
    "VQL": "Visualize PIE SELECT cName , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , min(enr) FROM college GROUP BY state'}",
    "record_name": "2797",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart showing the proportion of the smallest enrollment of schools in each state",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "showing",
      "the",
      "proportion",
      "of",
      "the",
      "smallest",
      "enrollment",
      "of",
      "schools",
      "in",
      "each",
      "state"
    ],
    "query": "Visualize PIE SELECT cName , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "How many matches were played in each year , display bar in ascending order .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC'}",
    "record_name": "3288@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many matches were played in each year , display bar in ascending order .",
    "question_toks": [
      "How",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      ",",
      "display",
      "bar",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ]
  },
  {
    "nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code , and could you display by the bar in descending ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2012@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the average amount of payment by each payment method code , and could you display by the bar in descending ?",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "could",
      "you",
      "display",
      "by",
      "the",
      "bar",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis building y axis the average of capacity , sort bars in asc order .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC'}",
    "record_name": "624@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis building y axis the average of capacity , sort bars in asc order .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "building",
      "y",
      "axis",
      "the",
      "average",
      "of",
      "capacity",
      ",",
      "sort",
      "bars",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the amount of date_address_from over the date_address_from , and group by attribute other_details and bin date_address_from by time by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "196",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the amount of date_address_from over the date_address_from , and group by attribute other_details and bin date_address_from by time by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "amount",
      "of",
      "date_address_from",
      "over",
      "the",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Bar chart of how many building from each building , rank by the Y in asc .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC'}",
    "record_name": "625@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of how many building from each building , rank by the Y in asc .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "how",
      "many",
      "building",
      "from",
      "each",
      "building",
      ",",
      "rank",
      "by",
      "the",
      "Y",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "building",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "I want to see trend the total number over year by semester , and show from high to low by the X-axis .",
    "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC'}",
    "record_name": "647@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ],
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend the total number over year by semester , and show from high to low by the X-axis .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "total",
      "number",
      "over",
      "year",
      "by",
      "semester",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "year",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and average salaries for departments with average salary higher than 42000 Plot them as bar chart , and display from high to low by the X .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "627@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and average salaries for departments with average salary higher than 42000 Plot them as bar chart , and display from high to low by the X .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what are the names and the average grades for each high schooler ? , list in asc by the x axis .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2453@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the names and the average grades for each high schooler ? , list in asc by the x axis .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each payment method code",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code'}",
    "record_name": "872",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each payment method code",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "payment",
      "method",
      "code"
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for how many students are in each department ? , and could you sort y axis in descending order ?",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC'}",
    "record_name": "654@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for how many students are in each department ? , and could you sort y axis in descending order ?",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "?",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" ? , order by the X-axis in desc .",
    "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY date_incident_end DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY date_incident_end DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY date_incident_end DESC'}",
    "record_name": "280@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          45,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" ? , order by the X-axis in desc .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "the",
      "number",
      "of",
      "end",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      ",",
      "order",
      "by",
      "the",
      "X-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY date_incident_end DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_end",
      ",",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "GROUP",
      "BY",
      "date_incident_end",
      "ORDER",
      "BY",
      "date_incident_end",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a line chart about the change of the average of monthly_rental over date_address_to , and group by attribute date_address_to .",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "273",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart about the change of the average of monthly_rental over date_address_to , and group by attribute date_address_to .",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of state and enr .",
    "VQL": "Visualize BAR SELECT state , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , enr FROM College ORDER BY enr'}",
    "record_name": "2794",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of state and enr .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "state",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize BAR SELECT state , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Show the names and their average grades of each high schooler with a bar chart , order in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC'}",
    "record_name": "2453@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and their average grades of each high schooler with a bar chart , order in ascending by the y axis .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "their",
      "average",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a line chart about the change of the average of monthly_rental over date_address_to , and group by attribute other_details .",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "241",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart about the change of the average of monthly_rental over date_address_to , and group by attribute other_details .",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average , and could you list Y from low to high order please ?",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC'}",
    "record_name": "619@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average , and could you list Y from low to high order please ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      ",",
      "and",
      "could",
      "you",
      "list",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "min",
      "(",
      "salary",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "A bar chart about what are the different product names ? What is the average product price for each of them ? , sort by the total number from low to high .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC'}",
    "record_name": "859@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the different product names ? What is the average product price for each of them ? , sort by the total number from low to high .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Product_Price",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many matches were played in each year ? , order in asc by the names please .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC'}",
    "record_name": "3288@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many matches were played in each year ? , order in asc by the names please .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "names",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing how many location across location , sort X from low to high order please .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC'}",
    "record_name": "2507@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many location across location , sort X from low to high order please .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "location",
      "across",
      "location",
      ",",
      "sort",
      "X",
      "from",
      "low",
      "to",
      "high",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "Location",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the names and sum grades of each high schooler Plot them as bar graph , and display in desc by the Y-axis .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC'}",
    "record_name": "2452@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and sum grades of each high schooler Plot them as bar graph , and display in desc by the Y-axis .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "sum",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "bar",
      "graph",
      ",",
      "and",
      "display",
      "in",
      "desc",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many counties correspond to each police force .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "db_id": "county_public_safety",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force'}",
    "record_name": "709",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many counties correspond to each police force .",
    "question_toks": [
      "How",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of dept_name and the average of salary , and group by attribute dept_name .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "617",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of dept_name and the average of salary , and group by attribute dept_name .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "average",
      "of",
      "salary",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each dept name , and I want to list y axis from high to low order .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC'}",
    "record_name": "654@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each dept name , and I want to list y axis from high to low order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "dept",
      "name",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show minimal enr from different cname , order by the Y-axis in descending please .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC'}",
    "record_name": "2798@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show minimal enr from different cname , order by the Y-axis in descending please .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "minimal",
      "enr",
      "from",
      "different",
      "cname",
      ",",
      "order",
      "by",
      "the",
      "Y-axis",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , rank in asc by the x-axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\"}",
    "record_name": "2030@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , rank in asc by the x-axis .",
    "question_toks": [
      "Show",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "distributing",
      "the",
      "payment",
      "date",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "in",
      "asc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis name y axis total number of grade",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2452",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis name y axis total number of grade",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "name",
      "y",
      "axis",
      "total",
      "number",
      "of",
      "grade"
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the average of monthly_rental over the date_address_from bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "247",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the average of monthly_rental over the date_address_from bin date_address_from by time .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of dept_name and the average of salary , and group by attribute dept_name .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "617",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of dept_name and the average of salary , and group by attribute dept_name .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "average",
      "of",
      "salary",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform , and order in desc by the X-axis .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform , and order in desc by the X-axis .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform",
      ",",
      "and",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the trend about the average amount of each payment about the payment day , line chart . Note that , you should order the payment day in ascending order .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2015",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the average amount of each payment about the payment day , line chart . Note that , you should order the payment day in ascending order .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "average",
      "amount",
      "of",
      "each",
      "payment",
      "about",
      "the",
      "payment",
      "day",
      ",",
      "line",
      "chart",
      ".",
      "Note",
      "that",
      ",",
      "you",
      "should",
      "order",
      "the",
      "payment",
      "day",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ]
  },
  {
    "nl_queries": "A line chart shows the change of the average of monthly_rental over date_address_to , and group by attribute other_details",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "241",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "A line chart shows the change of the average of monthly_rental over date_address_to , and group by attribute other_details",
    "question_toks": [
      "A",
      "line",
      "chart",
      "shows",
      "the",
      "change",
      "of",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details"
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then compute the average amount of each payment , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "2007",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then compute the average amount of each payment , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "compute",
      "the",
      "average",
      "amount",
      "of",
      "each",
      "payment",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the number of matches happened in each year Plot them as bar chart , I want to list in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC'}",
    "record_name": "3288@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of matches happened in each year Plot them as bar chart , I want to list in ascending by the y axis .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "matches",
      "happened",
      "in",
      "each",
      "year",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show all the planned delivery dates and bin by year in a line chart , I want to order in ascending by the x axis .",
    "VQL": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC', 'binning': 'BIN Planned_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR'}",
    "record_name": "865@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "year"
      ],
      "vis": 2
    },
    "question": "Show all the planned delivery dates and bin by year in a line chart , I want to order in ascending by the x axis .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "planned",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "year",
      "in",
      "a",
      "line",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Planned_Delivery_Date",
      "ASC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by weekday , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "212",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by weekday , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the total credits of courses provided by different department Plot them as bar chart , and list from high to low by the y-axis .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC'}",
    "record_name": "621@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the total credits of courses provided by different department Plot them as bar chart , and list from high to low by the y-axis .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "credits",
      "of",
      "courses",
      "provided",
      "by",
      "different",
      "department",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "sum",
      "(",
      "credits",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis building y axis the average of capacity , and show by the total number in descending please .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC'}",
    "record_name": "624@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis building y axis the average of capacity , and show by the total number in descending please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "building",
      "y",
      "axis",
      "the",
      "average",
      "of",
      "capacity",
      ",",
      "and",
      "show",
      "by",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "avg",
      "(",
      "capacity",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the name of the school that has the smallest enrollment in each state ? , could you rank in desc by the Y-axis ?",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC'}",
    "record_name": "2798@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the name of the school that has the smallest enrollment in each state ? , could you rank in desc by the Y-axis ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "school",
      "that",
      "has",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      "?",
      ",",
      "could",
      "you",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "I want to see trend the total number over year by semester , and sort in ascending by the X .",
    "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC'}",
    "record_name": "647@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ],
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend the total number over year by semester , and sort in ascending by the X .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "total",
      "number",
      "over",
      "year",
      "by",
      "semester",
      ",",
      "and",
      "sort",
      "in",
      "ascending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "year",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the smallest enrollment of each state using a bar chart .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state'}",
    "record_name": "2800",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the smallest enrollment of each state using a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "smallest",
      "enrollment",
      "of",
      "each",
      "state",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "what are the lengths and heights of roller coasters ?",
    "VQL": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
    "db_id": "roller_coaster",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Length , Height FROM roller_coaster', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Length , Height FROM roller_coaster'}",
    "record_name": "2684",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "what are the lengths and heights of roller coasters ?",
    "question_toks": [
      "what",
      "are",
      "the",
      "lengths",
      "and",
      "heights",
      "of",
      "roller",
      "coasters",
      "?"
    ],
    "query": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "Length",
      ",",
      "Height",
      "FROM",
      "roller_coaster"
    ]
  },
  {
    "nl_queries": "How many rooms in each building have a capacity of over 50 Visualize by bar chart , and sort by the total number in asc .",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC'}",
    "record_name": "620@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many rooms in each building have a capacity of over 50 Visualize by bar chart , and sort by the total number in asc .",
    "question_toks": [
      "How",
      "many",
      "rooms",
      "in",
      "each",
      "building",
      "have",
      "a",
      "capacity",
      "of",
      "over",
      "50",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "total",
      "number",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for how many actual delivery date of each actual delivery date",
    "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS', 'binning': 'BIN Actual_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY'}",
    "record_name": "863",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart for how many actual delivery date of each actual delivery date",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "actual",
      "delivery",
      "date",
      "of",
      "each",
      "actual",
      "delivery",
      "date"
    ],
    "query": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What is the average capacity for rooms in each building ? Draw a bar chart .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building'}",
    "record_name": "624",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average capacity for rooms in each building ? Draw a bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "capacity",
      "for",
      "rooms",
      "in",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the amount of date_address_from over the date_address_from bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "248",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the amount of date_address_from over the date_address_from bin date_address_from by weekday .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "amount",
      "of",
      "date_address_from",
      "over",
      "the",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "211",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a scatter on what are the lengths and heights of roller coasters ?",
    "VQL": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
    "db_id": "roller_coaster",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Length , Height FROM roller_coaster', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Length , Height FROM roller_coaster'}",
    "record_name": "2684",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Return a scatter on what are the lengths and heights of roller coasters ?",
    "question_toks": [
      "Return",
      "a",
      "scatter",
      "on",
      "what",
      "are",
      "the",
      "lengths",
      "and",
      "heights",
      "of",
      "roller",
      "coasters",
      "?"
    ],
    "query": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "Length",
      ",",
      "Height",
      "FROM",
      "roller_coaster"
    ]
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , and could you show in desc by the bar please ?",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\"}",
    "record_name": "2030@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , and could you show in desc by the bar please ?",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "List",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "bar",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis building y axis maximal capacity , and sort in desc by the total number .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC'}",
    "record_name": "623@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              1,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis building y axis maximal capacity , and sort in desc by the total number .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "building",
      "y",
      "axis",
      "maximal",
      "capacity",
      ",",
      "and",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "max",
      "(",
      "capacity",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and average salaries for departments with average salary higher than 42000 Plot them as bar chart , display y axis in descending order .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC'}",
    "record_name": "627@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and average salaries for departments with average salary higher than 42000 Plot them as bar chart , display y axis in descending order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "display",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "salary",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis building y axis the average of capacity",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building'}",
    "record_name": "624",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis building y axis the average of capacity",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "building",
      "y",
      "axis",
      "the",
      "average",
      "of",
      "capacity"
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "What are the different product names ? What is the average product price for each of them .",
    "VQL": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name'}",
    "record_name": "858",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the different product names ? What is the average product price for each of them .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "."
    ],
    "query": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort x axis from high to low order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort x axis from high to low order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "sort",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis , rank y-axis in descending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis , rank y-axis in descending order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "rank",
      "y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_to and the amount of date_address_to bin date_address_to by weekday in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "232",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_to and the amount of date_address_to bin date_address_to by weekday in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "How many matches were played in each year .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR'}",
    "record_name": "3288",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many matches were played in each year .",
    "question_toks": [
      "How",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and rank by the Y-axis in descending .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC'}",
    "record_name": "2605@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and rank by the Y-axis in descending .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Y-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me about the correlation between address_id and monthly_rental , and group by attribute other_details in a scatter chart .",
    "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "253",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show me about the correlation between address_id and monthly_rental , and group by attribute other_details in a scatter chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "correlation",
      "between",
      "address_id",
      "and",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "in",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "address_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the relationship between ID and salary ?",
    "VQL": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT ID , salary FROM instructor ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary'}",
    "record_name": "618",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "What is the relationship between ID and salary ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "relationship",
      "between",
      "ID",
      "and",
      "salary",
      "?"
    ],
    "query": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "ID",
      ",",
      "salary",
      "FROM",
      "instructor",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Find the total number of students in each department Show bar chart , and I want to show in descending by the total number .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC'}",
    "record_name": "654@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the total number of students in each department Show bar chart , and I want to show in descending by the total number .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "students",
      "in",
      "each",
      "department",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , and sort y-axis in asc order .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC'}",
    "record_name": "2605@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , and sort y-axis in asc order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "sort",
      "y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the amount of date_address_from over the date_address_from bin date_address_from by time by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "233",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the amount of date_address_from over the date_address_from bin date_address_from by time by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "amount",
      "of",
      "date_address_from",
      "over",
      "the",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "time",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show minimal enr from each state , could you display by the bar in desc ?",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC'}",
    "record_name": "2800@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show minimal enr from each state , could you display by the bar in desc ?",
    "question_toks": [
      "Show",
      "minimal",
      "enr",
      "from",
      "each",
      "state",
      ",",
      "could",
      "you",
      "display",
      "by",
      "the",
      "bar",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "state",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a pie chart on how many students participated in tryouts for each college by descennding count ?",
    "VQL": "Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC'}",
    "record_name": "2801",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return a pie chart on how many students participated in tryouts for each college by descennding count ?",
    "question_toks": [
      "Return",
      "a",
      "pie",
      "chart",
      "on",
      "how",
      "many",
      "students",
      "participated",
      "in",
      "tryouts",
      "for",
      "each",
      "college",
      "by",
      "descennding",
      "count",
      "?"
    ],
    "query": "Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "tryout",
      "GROUP",
      "BY",
      "cName",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and areas of countries with the top 5 largest area . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and areas of countries with the top 5 largest area . Visualize by bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_to and the average of monthly_rental bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "239",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_to and the average of monthly_rental bin date_address_to by weekday .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Count the total number of different locations of parties using a pie chart .",
    "VQL": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location'}",
    "record_name": "2506",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Count the total number of different locations of parties using a pie chart .",
    "question_toks": [
      "Count",
      "the",
      "total",
      "number",
      "of",
      "different",
      "locations",
      "of",
      "parties",
      "using",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location"
    ]
  },
  {
    "nl_queries": "Find the name and training hours of players whose hours are below 1500 Show bar chart , show names in desc order .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC'}",
    "record_name": "2790@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and training hours of players whose hours are below 1500 Show bar chart , show names in desc order .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "training",
      "hours",
      "of",
      "players",
      "whose",
      "hours",
      "are",
      "below",
      "1500",
      "Show",
      "bar",
      "chart",
      ",",
      "show",
      "names",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "pName",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by time , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "194",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Find date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by time , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you rank in desc by the total number ?",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC'}",
    "record_name": "3269@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you rank in desc by the total number ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "could",
      "you",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the names and the total grades of each high schooler by a bar chart .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2452",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and the total grades of each high schooler by a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "the",
      "total",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "A pie chart for the proportion of the smallest enrollment in each state .",
    "VQL": "Visualize PIE SELECT state , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize PIE SELECT state , min(enr) FROM college GROUP BY state'}",
    "record_name": "2799",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart for the proportion of the smallest enrollment in each state .",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "for",
      "the",
      "proportion",
      "of",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      "."
    ],
    "query": "Visualize PIE SELECT state , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , and could you order names in asc order please ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , and could you order names in asc order please ?",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "order",
      "names",
      "in",
      "asc",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what are the names and the average grades for each high schooler ? , and list X in desc order please .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2453@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the names and the average grades for each high schooler ? , and list X in desc order please .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "and",
      "list",
      "X",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart , and I want to list in desc by the Y-axis .",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart , and I want to list in desc by the Y-axis .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "DESC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_to and the average of monthly_rental bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "231",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_to and the average of monthly_rental bin date_address_to by time .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Bar chart x axis building y axis maximal capacity , and order by the bars in asc .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC'}",
    "record_name": "623@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis building y axis maximal capacity , and order by the bars in asc .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "building",
      "y",
      "axis",
      "maximal",
      "capacity",
      ",",
      "and",
      "order",
      "by",
      "the",
      "bars",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "I want to know the proportion of different industry types .",
    "VQL": "Visualize PIE SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
    "db_id": "company_office",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry'}",
    "record_name": "684",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of different industry types .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "different",
      "industry",
      "types",
      "."
    ],
    "query": "Visualize PIE SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry"
    ]
  },
  {
    "nl_queries": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors Plot them as bar chart , and show names in ascending order .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "619@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors Plot them as bar chart , and show names in ascending order .",
    "question_toks": [
      "Find",
      "the",
      "minimum",
      "salary",
      "for",
      "the",
      "departments",
      "whose",
      "average",
      "salary",
      "is",
      "above",
      "the",
      "average",
      "payment",
      "of",
      "all",
      "instructors",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "names",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis date of latest revision y axis the number of date of latest revision , could you rank in desc by the Y-axis ?",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date of latest revision y axis the number of date of latest revision , could you rank in desc by the Y-axis ?",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "of",
      "latest",
      "revision",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision",
      ",",
      "could",
      "you",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "DESC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a line chart about the change of monthly_rental over date_address_from .",
    "VQL": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "267",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart about the change of monthly_rental over date_address_from .",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "monthly_rental",
      "over",
      "date_address_from",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_from",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , and could you rank by the names from low to high ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , and could you rank by the names from low to high ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "names",
      "from",
      "low",
      "to",
      "high",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ]
  },
  {
    "nl_queries": "A bar chart about what are the different product names ? What is the average product price for each of them ? , sort in desc by the y-axis .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC'}",
    "record_name": "859@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the different product names ? What is the average product price for each of them ? , sort in desc by the y-axis .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?",
      ",",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Product_Price",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bin the claim date into Year interval and count them for visualizing a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into Year interval and count them for visualizing a bar chart .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Return a bar chart on how many counties correspond to each police force ?",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "db_id": "county_public_safety",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force'}",
    "record_name": "709",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on how many counties correspond to each police force ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?"
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "211",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what are the names and average salaries for departments with average salary higher than 42000 ? , and display y axis in descending order .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC'}",
    "record_name": "627@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the names and average salaries for departments with average salary higher than 42000 ? , and display y axis in descending order .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "?",
      ",",
      "and",
      "display",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "salary",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_from and the amount of date_address_from bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "248",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_from and the amount of date_address_from bin date_address_from by weekday .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Can you show me a bar chart to answer how many people with different names for each high schooler ? , and show from high to low by the x axis .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2451@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Can you show me a bar chart to answer how many people with different names for each high schooler ? , and show from high to low by the x axis .",
    "question_toks": [
      "Can",
      "you",
      "show",
      "me",
      "a",
      "bar",
      "chart",
      "to",
      "answer",
      "how",
      "many",
      "people",
      "with",
      "different",
      "names",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show all the planned delivery dates and bin by year in a line chart , could you rank by the x-axis in ascending please ?",
    "VQL": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC', 'binning': 'BIN Planned_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR'}",
    "record_name": "865@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "year"
      ],
      "vis": 2
    },
    "question": "Show all the planned delivery dates and bin by year in a line chart , could you rank by the x-axis in ascending please ?",
    "question_toks": [
      "Show",
      "all",
      "the",
      "planned",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "year",
      "in",
      "a",
      "line",
      "chart",
      ",",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "x-axis",
      "in",
      "ascending",
      "please",
      "?"
    ],
    "query": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Planned_Delivery_Date",
      "ASC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of dept_name and the amount of dept_name , and group by attribute dept_name .",
    "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "613",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of dept_name and the amount of dept_name , and group by attribute dept_name .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "amount",
      "of",
      "dept_name",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "COUNT",
      "(",
      "dept_name",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart , show by the Y-axis in desc .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart , show by the Y-axis in desc .",
    "question_toks": [
      "Bin",
      "the",
      "settlement",
      "date",
      "for",
      "each",
      "settlement",
      "case",
      "into",
      "the",
      "day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and could you list in ascending by the y axis ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and could you list in ascending by the y axis ?",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and display in ascending by the y-axis .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC'}",
    "record_name": "2605@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and display in ascending by the y-axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "ASC"
    ]
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart , and I want to sort by the y axis in descending .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart , and I want to sort by the y axis in descending .",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the names and their total grades for each high schooler ?",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2452",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the names and their total grades for each high schooler ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "their",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year , rank by the Y in descending please .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) DESC BIN First_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) DESC', 'binning': 'BIN First_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) DESC BIN First_year BY WEEKDAY'}",
    "record_name": "2498@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        4,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year , rank by the Y in descending please .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "first",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "the",
      "first",
      "year",
      ",",
      "rank",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) DESC BIN First_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "First_year",
      ")",
      "DESC",
      "BIN",
      "First_year",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the average of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by time by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "202",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the average of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by time by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Bar chart x axis hand y axis the total number , and display by the Y-axis in desc .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC'}",
    "record_name": "3287@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis hand y axis the total number , and display by the Y-axis in desc .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "hand",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the lengths and heights of roller coasters . Show scatter chart .",
    "VQL": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
    "db_id": "roller_coaster",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Length , Height FROM roller_coaster', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Length , Height FROM roller_coaster'}",
    "record_name": "2684",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "What are the lengths and heights of roller coasters . Show scatter chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "lengths",
      "and",
      "heights",
      "of",
      "roller",
      "coasters",
      ".",
      "Show",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "Length",
      ",",
      "Height",
      "FROM",
      "roller_coaster"
    ]
  },
  {
    "nl_queries": "Give me a pie to show the total number from different hand .",
    "VQL": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand', 'binning': ''}, 'VQL': 'Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand'}",
    "record_name": "3286",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show the total number from different hand .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "hand",
      "."
    ],
    "query": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each dept name , and rank x-axis in desc order .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "654@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each dept name , and rank x-axis in desc order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "dept",
      "name",
      ",",
      "and",
      "rank",
      "x-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the names and average salaries of all departments whose average salary is greater than 42000 .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name'}",
    "record_name": "627",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the names and average salaries of all departments whose average salary is greater than 42000 .",
    "question_toks": [
      "Find",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "of",
      "all",
      "departments",
      "whose",
      "average",
      "salary",
      "is",
      "greater",
      "than",
      "42000",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Show the trend about the frequency of the claim dates , and list by the X from low to high .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC'}",
    "record_name": "2021@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the frequency of the claim dates , and list by the X from low to high .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "frequency",
      "of",
      "the",
      "claim",
      "dates",
      ",",
      "and",
      "list",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled ORDER BY Date_Claim_Settled ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled",
      "ORDER",
      "BY",
      "Date_Claim_Settled",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the sum of monthly_rental over the date_address_to bin date_address_to by weekday by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "238",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the sum of monthly_rental over the date_address_to bin date_address_to by weekday by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Bin the claim date into Year interval and count them for visualizing a bar chart , show Y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into Year interval and count them for visualizing a bar chart , show Y-axis in asc order .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "Y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "What is the number of end dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart .",
    "VQL": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_start BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"', 'binning': 'BIN date_incident_start BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_start BY WEEKDAY'}",
    "record_name": "283",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        44,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What is the number of end dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "end",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      "Bin",
      "by",
      "weekday",
      "and",
      "return",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_start BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_start",
      ",",
      "COUNT",
      "(",
      "date_incident_start",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "BIN",
      "date_incident_start",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah , I want to rank in descending by the Y .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC'}",
    "record_name": "2497@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah , I want to rank in descending by the Y .",
    "question_toks": [
      "Count",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "grpah",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart , order from high to low by the y axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart , order from high to low by the y axis .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank in ascending by the Y .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank in ascending by the Y .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and show from high to low by the X .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and show from high to low by the X .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show the average of amount payment from different payment method code , display from high to low by the X .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2012@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the average of amount payment from different payment method code , display from high to low by the X .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "different",
      "payment",
      "method",
      "code",
      ",",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many total credits are offered by each department ?",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name'}",
    "record_name": "621",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many total credits are offered by each department ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and show from high to low by the x-axis .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC'}",
    "record_name": "2605@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , and show from high to low by the x-axis .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the number of the dates of the assessment notes ?",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR'}",
    "record_name": "188",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "What are the number of the dates of the assessment notes ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?"
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show me the trend about the amount of date_address_to over date_address_to , and group by attribute date_address_to with a line chart .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "266",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend about the amount of date_address_to over date_address_to , and group by attribute date_address_to with a line chart .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show the average of amount payment from different payment method code",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2012",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the average of amount payment from different payment method code",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "different",
      "payment",
      "method",
      "code"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count with a bar chart .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count with a bar chart .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "Bar chart of sum amount payment from each payment method code , and sort X in descending order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2011@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of sum amount payment from each payment method code , and sort X in descending order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "sum",
      "amount",
      "payment",
      "from",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "sort",
      "X",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what are the names and average salaries for departments with average salary higher than 42000 ?",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name'}",
    "record_name": "627",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the names and average salaries for departments with average salary higher than 42000 ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Give me a bar chart , that group by location and count them , list Y in descending order .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC'}",
    "record_name": "2507@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart , that group by location and count them , list Y in descending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "that",
      "group",
      "by",
      "location",
      "and",
      "count",
      "them",
      ",",
      "list",
      "Y",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Location",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart , and could you order y axis in desc order ?",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart , and could you order y axis in desc order ?",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "of",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "order",
      "y",
      "axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Return a pie chart on how many counties correspond to each police force ?",
    "VQL": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "db_id": "county_public_safety",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force'}",
    "record_name": "708",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return a pie chart on how many counties correspond to each police force ?",
    "question_toks": [
      "Return",
      "a",
      "pie",
      "chart",
      "on",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?"
    ],
    "query": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force"
    ]
  },
  {
    "nl_queries": "What is the relationship between student_id and monthly_rental , and group by attribute other_details ?",
    "VQL": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "240",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "What is the relationship between student_id and monthly_rental , and group by attribute other_details ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "relationship",
      "between",
      "student_id",
      "and",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "?"
    ],
    "query": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , display by the Y in ascending .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count with a bar chart , display by the Y in ascending .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Pie chart . how many counties correspond to each police force ?",
    "VQL": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "db_id": "county_public_safety",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force'}",
    "record_name": "708",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Pie chart . how many counties correspond to each police force ?",
    "question_toks": [
      "Pie",
      "chart",
      ".",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?"
    ],
    "query": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force"
    ]
  },
  {
    "nl_queries": "What are the names and average salaries for departments with average salary higher than 42000 . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name'}",
    "record_name": "627",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and average salaries for departments with average salary higher than 42000 . Plot them as bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of other_details and the amount of other_details , and group by attribute other_details in a bar chart .",
    "VQL": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "203",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me about the distribution of other_details and the amount of other_details , and group by attribute other_details in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "amount",
      "of",
      "other_details",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "COUNT",
      "(",
      "other_details",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the name of the school that has the smallest enrollment in each state ? , and could you show Y-axis in ascending order ?",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC'}",
    "record_name": "2798@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the name of the school that has the smallest enrollment in each state ? , and could you show Y-axis in ascending order ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "school",
      "that",
      "has",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      "?",
      ",",
      "and",
      "could",
      "you",
      "show",
      "Y-axis",
      "in",
      "ascending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of dept_name and the average of salary , and group by attribute dept_name .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "617",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart shows the distribution of dept_name and the average of salary , and group by attribute dept_name .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "average",
      "of",
      "salary",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Give me the comparison about enr over the state .",
    "VQL": "Visualize BAR SELECT state , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , enr FROM College ORDER BY enr'}",
    "record_name": "2794",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me the comparison about enr over the state .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "enr",
      "over",
      "the",
      "state",
      "."
    ],
    "query": "Visualize BAR SELECT state , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Bar chart of mean salary from each dept name , and could you order by the Y-axis from high to low ?",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC'}",
    "record_name": "627@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of mean salary from each dept name , and could you order by the Y-axis from high to low ?",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "mean",
      "salary",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "and",
      "could",
      "you",
      "order",
      "by",
      "the",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "salary",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Calculate the average of amount for all the payments processed with Visa by each year using a bar chart .",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "of",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Visualize a line chart about the change of the sum of monthly_rental over date_address_to , and group by attribute other_details .",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "259",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Visualize a line chart about the change of the sum of monthly_rental over date_address_to , and group by attribute other_details .",
    "question_toks": [
      "Visualize",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart , the-axis is the state , and the Y axis is each state's the smallest enrollment , rank by the Y in ascending .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC'}",
    "record_name": "2800@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart , the-axis is the state , and the Y axis is each state's the smallest enrollment , rank by the Y in ascending .",
    "question_toks": [
      "Bar",
      "chart",
      ",",
      "the-axis",
      "is",
      "the",
      "state",
      ",",
      "and",
      "the",
      "Y",
      "axis",
      "is",
      "each",
      "state's",
      "the",
      "smallest",
      "enrollment",
      ",",
      "rank",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Visualize a pie chart with how many students participated in tryouts for each college by descennding count ?",
    "VQL": "Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC'}",
    "record_name": "2801",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize a pie chart with how many students participated in tryouts for each college by descennding count ?",
    "question_toks": [
      "Visualize",
      "a",
      "pie",
      "chart",
      "with",
      "how",
      "many",
      "students",
      "participated",
      "in",
      "tryouts",
      "for",
      "each",
      "college",
      "by",
      "descennding",
      "count",
      "?"
    ],
    "query": "Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "tryout",
      "GROUP",
      "BY",
      "cName",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_from and the amount of date_address_from bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "233",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_from and the amount of date_address_from bin date_address_from by time .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year'}",
    "record_name": "2497",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah .",
    "question_toks": [
      "Count",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "grpah",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year"
    ]
  },
  {
    "nl_queries": "Can you draw the trend of the number of actual delivery date over the actual delivery date ? , and show X in asc order .",
    "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC', 'binning': 'BIN Actual_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR'}",
    "record_name": "864@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "year"
      ],
      "vis": 2
    },
    "question": "Can you draw the trend of the number of actual delivery date over the actual delivery date ? , and show X in asc order .",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "the",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "actual",
      "delivery",
      "date",
      "over",
      "the",
      "actual",
      "delivery",
      "date",
      "?",
      ",",
      "and",
      "show",
      "X",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Actual_Delivery_Date",
      "ASC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for how many actual delivery date of each actual delivery date , and rank total number in descending order .",
    "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC', 'binning': 'BIN Actual_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY'}",
    "record_name": "863@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart for how many actual delivery date of each actual delivery date , and rank total number in descending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "actual",
      "delivery",
      "date",
      "of",
      "each",
      "actual",
      "delivery",
      "date",
      ",",
      "and",
      "rank",
      "total",
      "number",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "DESC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing the total number across police force , order by the Y in descending .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC'}",
    "record_name": "709@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing the total number across police force , order by the Y in descending .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "across",
      "police",
      "force",
      ",",
      "order",
      "by",
      "the",
      "Y",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 , show by the total number from high to low .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC'}",
    "record_name": "2605@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 , show by the total number from high to low .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      ",",
      "show",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the names and average salaries for departments with average salary higher than 42000 ? , and could you order by the X-axis from high to low ?",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "627@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the names and average salaries for departments with average salary higher than 42000 ? , and could you order by the X-axis from high to low ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "?",
      ",",
      "and",
      "could",
      "you",
      "order",
      "by",
      "the",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the average of monthly_rental over the date_address_to bin date_address_to by weekday by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "239",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the average of monthly_rental over the date_address_to bin date_address_to by weekday by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Bar chart of total number of credits from each dept name , and show from high to low by the total number of credits .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC'}",
    "record_name": "621@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of total number of credits from each dept name , and show from high to low by the total number of credits .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "total",
      "number",
      "of",
      "credits",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "of",
      "credits",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "sum",
      "(",
      "credits",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and number of hours spent training for each player who trains for less than 1500 hours . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500'}",
    "record_name": "2790",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours . Visualize by bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the different product names ? What is the average product price for each of them ? , I want to display X in desc order .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC'}",
    "record_name": "859@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different product names ? What is the average product price for each of them ? , I want to display X in desc order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?",
      ",",
      "I",
      "want",
      "to",
      "display",
      "X",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "Product_Name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Compare the frequency of each payment method code using a bar chart , rank Y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC'}",
    "record_name": "2010@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the frequency of each payment method code using a bar chart , rank Y-axis in asc order .",
    "question_toks": [
      "Compare",
      "the",
      "frequency",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "Y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the Year interval and then shows the total amount of each payment , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "2002",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the Year interval and then shows the total amount of each payment , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "total",
      "amount",
      "of",
      "each",
      "payment",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show me about the change of the average of monthly_rental over date_address_to , and group by attribute date_address_to in a line chart .",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "273",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me about the change of the average of monthly_rental over date_address_to , and group by attribute date_address_to in a line chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "change",
      "of",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "in",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return the names and surface areas of the 5 largest countries . Visualize by bar chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ]
  },
  {
    "nl_queries": "Bar chart x axis building y axis maximal capacity , I want to show in asc by the total number please .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC'}",
    "record_name": "623@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              1,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis building y axis maximal capacity , I want to show in asc by the total number please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "building",
      "y",
      "axis",
      "maximal",
      "capacity",
      ",",
      "I",
      "want",
      "to",
      "show",
      "in",
      "asc",
      "by",
      "the",
      "total",
      "number",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "max",
      "(",
      "capacity",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "For the sum of monthly_rental , date_address_to , visualize the trend .",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "For the sum of monthly_rental , date_address_to , visualize the trend .",
    "question_toks": [
      "For",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "date_address_to",
      ",",
      "visualize",
      "the",
      "trend",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show total number of population from different governmentform",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show total number of population from different governmentform",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "total",
      "number",
      "of",
      "population",
      "from",
      "different",
      "governmentform"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ]
  },
  {
    "nl_queries": "How many players are there for each hand type Visualize by bar chart , sort Y-axis in descending order .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC'}",
    "record_name": "3287@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many players are there for each hand type Visualize by bar chart , sort Y-axis in descending order .",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "sort",
      "Y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the total number of tours for each ranking date .",
    "VQL": "Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date'}",
    "record_name": "3285",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          39,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Find the total number of tours for each ranking date .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "tours",
      "for",
      "each",
      "ranking",
      "date",
      "."
    ],
    "query": "Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "FROM",
      "rankings",
      "GROUP",
      "BY",
      "ranking_date"
    ]
  },
  {
    "nl_queries": "Give me a line chart to show the trend of the amount of each payment of different payment methods , ordered by the payment date in ascending order .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , Amount_Payment FROM Payments GROUP BY Payment_Method_Code ,  Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , Amount_Payment FROM Payments GROUP BY Payment_Method_Code ,  Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , Amount_Payment FROM Payments GROUP BY Payment_Method_Code ,  Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2005",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ],
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Give me a line chart to show the trend of the amount of each payment of different payment methods , ordered by the payment date in ascending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "line",
      "chart",
      "to",
      "show",
      "the",
      "trend",
      "of",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      "of",
      "different",
      "payment",
      "methods",
      ",",
      "ordered",
      "by",
      "the",
      "payment",
      "date",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , Amount_Payment FROM Payments GROUP BY Payment_Method_Code ,  Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      ",",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , could you order X-axis from low to high order ?",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC'}",
    "record_name": "2605@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , could you order X-axis from low to high order ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "could",
      "you",
      "order",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code Show bar chart , display in ascending by the names .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC'}",
    "record_name": "872@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all payment method codes and the number of orders for each code Show bar chart , display in ascending by the names .",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      "Show",
      "bar",
      "chart",
      ",",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "payment_method_code",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , list from high to low by the total number .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC'}",
    "record_name": "3269@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , list from high to low by the total number .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the relationship between student_id and address_id , and group by attribute other_details ?",
    "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "251",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "What is the relationship between student_id and address_id , and group by attribute other_details ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "relationship",
      "between",
      "student_id",
      "and",
      "address_id",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "?"
    ],
    "query": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "address_id",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , display by the Y in ascending .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , display by the Y in ascending .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "display",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a histogram to show the date and the amount for all the payments processed with Visa , order in desc by the X please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC\"}",
    "record_name": "2030@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram to show the date and the amount for all the payments processed with Visa , order in desc by the X please .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "to",
      "show",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "DESC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart , sort by the how many date payment made in asc .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and count them for a bar chart , sort by the how many date payment made in asc .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "how",
      "many",
      "date",
      "payment",
      "made",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_to and the sum of monthly_rental bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "230",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_to and the sum of monthly_rental bin date_address_to by time .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Please use a bar chart to show the total amount of payment by each payment method code , and I want to display by the Y-axis from high to low .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC'}",
    "record_name": "2011@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the total amount of payment by each payment method code , and I want to display by the Y-axis from high to low .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "by",
      "the",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show all the planned delivery dates and bin by year in a line chart , sort in descending by the X .",
    "VQL": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC', 'binning': 'BIN Planned_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR'}",
    "record_name": "865@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "year"
      ],
      "vis": 2
    },
    "question": "Show all the planned delivery dates and bin by year in a line chart , sort in descending by the X .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "planned",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "year",
      "in",
      "a",
      "line",
      "chart",
      ",",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Planned_Delivery_Date",
      "DESC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the names and average salaries for departments with average salary higher than 42000 ?",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name'}",
    "record_name": "627",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the names and average salaries for departments with average salary higher than 42000 ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for how many actual delivery date of each actual delivery date , I want to sort by the Y from low to high .",
    "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC BIN Actual_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC', 'binning': 'BIN Actual_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC BIN Actual_Delivery_Date BY WEEKDAY'}",
    "record_name": "863@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart for how many actual delivery date of each actual delivery date , I want to sort by the Y from low to high .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "actual",
      "delivery",
      "date",
      "of",
      "each",
      "actual",
      "delivery",
      "date",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC BIN Actual_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "ASC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "How many rooms in each building have a capacity of over 50 Visualize by bar chart , and list in desc by the x axis .",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC'}",
    "record_name": "620@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many rooms in each building have a capacity of over 50 Visualize by bar chart , and list in desc by the x axis .",
    "question_toks": [
      "How",
      "many",
      "rooms",
      "in",
      "each",
      "building",
      "have",
      "a",
      "capacity",
      "of",
      "over",
      "50",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made , I want to sort in descending by the how many date claim made please .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made , I want to sort in descending by the how many date claim made please .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "how",
      "many",
      "date",
      "claim",
      "made",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by time in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "189",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by time in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Find the number of courses provided in each year with a group line chart that groups by semester , and I want to sort in asc by the X .",
    "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC'}",
    "record_name": "647@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ],
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Find the number of courses provided in each year with a group line chart that groups by semester , and I want to sort in asc by the X .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "courses",
      "provided",
      "in",
      "each",
      "year",
      "with",
      "a",
      "group",
      "line",
      "chart",
      "that",
      "groups",
      "by",
      "semester",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "year",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many total credits are offered by each department ? , sort by the total number of credits from low to high .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC'}",
    "record_name": "621@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many total credits are offered by each department ? , sort by the total number of credits from low to high .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "total",
      "number",
      "of",
      "credits",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "sum",
      "(",
      "credits",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , order in asc by the x-axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC'}",
    "record_name": "2607@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , order in asc by the x-axis .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Visualize the general trend of the number of planned delivery date over the planned delivery date , and rank by the X-axis in descending .",
    "VQL": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC', 'binning': 'BIN Planned_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR'}",
    "record_name": "865@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "year"
      ],
      "vis": 2
    },
    "question": "Visualize the general trend of the number of planned delivery date over the planned delivery date , and rank by the X-axis in descending .",
    "question_toks": [
      "Visualize",
      "the",
      "general",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "planned",
      "delivery",
      "date",
      "over",
      "the",
      "planned",
      "delivery",
      "date",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "X-axis",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Planned_Delivery_Date",
      "DESC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find the maximum capacity among rooms in each building with a bar chart .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building'}",
    "record_name": "623",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the maximum capacity among rooms in each building with a bar chart .",
    "question_toks": [
      "Find",
      "the",
      "maximum",
      "capacity",
      "among",
      "rooms",
      "in",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "Visualize a scatter chart about the correlation between student_id and monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "240",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Visualize a scatter chart about the correlation between student_id and monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "Visualize",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for how many counties correspond to each police force ? , and rank X in asc order .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC'}",
    "record_name": "709@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many counties correspond to each police force ? , and rank X in asc order .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?",
      ",",
      "and",
      "rank",
      "X",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "Police_force",
      "ASC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , and show by the y axis from high to low .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC'}",
    "record_name": "2607@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , and show by the y axis from high to low .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "and",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many total credits are offered by each department Show bar chart , sort by the bar in desc .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "621@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total credits are offered by each department Show bar chart , sort by the bar in desc .",
    "question_toks": [
      "How",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "Show",
      "bar",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "bar",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad . Plot them as pie chart .",
    "VQL": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code'}",
    "record_name": "871",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "List the distinct payment method codes with the number of orders mad . Plot them as pie chart .",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      ".",
      "Plot",
      "them",
      "as",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the amount of date_address_from over the date_address_from bin date_address_from by weekday by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "248",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the amount of date_address_from over the date_address_from bin date_address_from by weekday by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "amount",
      "of",
      "date_address_from",
      "over",
      "the",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Plot the number of payment method code by grouped by payment method code as a bar graph",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2010",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of payment method code by grouped by payment method code as a bar graph",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "payment",
      "method",
      "code",
      "by",
      "grouped",
      "by",
      "payment",
      "method",
      "code",
      "as",
      "a",
      "bar",
      "graph"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" ? , and rank from high to low by the y-axis .",
    "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY COUNT(date_incident_end) DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY COUNT(date_incident_end) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY COUNT(date_incident_end) DESC'}",
    "record_name": "280@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          45,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              45,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" ? , and rank from high to low by the y-axis .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "the",
      "number",
      "of",
      "end",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      ",",
      "and",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY COUNT(date_incident_end) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_end",
      ",",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "GROUP",
      "BY",
      "date_incident_end",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize the general trend of the number of planned delivery date over the planned delivery date , and list Planned_Delivery_Date from high to low order .",
    "VQL": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC', 'binning': 'BIN Planned_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR'}",
    "record_name": "865@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "year"
      ],
      "vis": 2
    },
    "question": "Visualize the general trend of the number of planned delivery date over the planned delivery date , and list Planned_Delivery_Date from high to low order .",
    "question_toks": [
      "Visualize",
      "the",
      "general",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "planned",
      "delivery",
      "date",
      "over",
      "the",
      "planned",
      "delivery",
      "date",
      ",",
      "and",
      "list",
      "Planned_Delivery_Date",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date DESC BIN Planned_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Planned_Delivery_Date",
      "DESC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of dept_name and the amount of dept_name , and group by attribute dept_name .",
    "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "613",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of dept_name and the amount of dept_name , and group by attribute dept_name .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "amount",
      "of",
      "dept_name",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "COUNT",
      "(",
      "dept_name",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Bar graph to show the number of name from different name , display by the x axis in desc .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2451@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of name from different name , display by the x axis in desc .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "name",
      "from",
      "different",
      "name",
      ",",
      "display",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart , and sort total number in ascending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart , and sort total number in ascending order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "A pie chart about what are the names and areas of countries with the top 5 largest area ?",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "A pie chart about what are the names and areas of countries with the top 5 largest area ?",
    "question_toks": [
      "A",
      "pie",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ]
  },
  {
    "nl_queries": "Bar chart of how many building from each building , sort bar from high to low order .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC'}",
    "record_name": "625@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of how many building from each building , sort bar from high to low order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "how",
      "many",
      "building",
      "from",
      "each",
      "building",
      ",",
      "sort",
      "bar",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and I want to order in ascending by the Y .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and I want to order in ascending by the Y .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What is the lowest salary in departments with average salary greater than the overall average Plot them as bar chart , and sort dept_name in ascending order .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "619@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the lowest salary in departments with average salary greater than the overall average Plot them as bar chart , and sort dept_name in ascending order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "dept_name",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Plot the total number by grouped by industry as a bar graph , and sort in ascending by the Industry .",
    "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC",
    "db_id": "company_office",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC'}",
    "record_name": "685@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the total number by grouped by industry as a bar graph , and sort in ascending by the Industry .",
    "question_toks": [
      "Plot",
      "the",
      "total",
      "number",
      "by",
      "grouped",
      "by",
      "industry",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "sort",
      "in",
      "ascending",
      "by",
      "the",
      "Industry",
      "."
    ],
    "query": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry",
      "ORDER",
      "BY",
      "Industry",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of cName and enr .",
    "VQL": "Visualize BAR SELECT cName , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , enr FROM College ORDER BY enr'}",
    "record_name": "2792",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of cName and enr .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "cName",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize BAR SELECT cName , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Show me a pie chart for how many hosts does each nationality have ? List the nationality and the count .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me a pie chart for how many hosts does each nationality have ? List the nationality and the count .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "pie",
      "chart",
      "for",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for mean product price of each product name , I want to list in asc by the x-axis .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC'}",
    "record_name": "859@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for mean product price of each product name , I want to list in asc by the x-axis .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "mean",
      "product",
      "price",
      "of",
      "each",
      "product",
      "name",
      ",",
      "I",
      "want",
      "to",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "Product_Name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me about the correlation between student_id and address_id , and group by attribute other_details in a scatter chart .",
    "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "251",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show me about the correlation between student_id and address_id , and group by attribute other_details in a scatter chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "address_id",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "in",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "address_id",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average , and could you rank by the x axis in asc ?",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "619@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average , and could you rank by the x axis in asc ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa of each day of week using a bar chart .",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ]
  },
  {
    "nl_queries": "Create a pie chart showing the total number across nationality .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Create a pie chart showing the total number across nationality .",
    "question_toks": [
      "Create",
      "a",
      "pie",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "across",
      "nationality",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , could you list in ascending by the y axis ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , could you list in ascending by the y axis ?",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find dept_name and the sum of salary , and group by attribute dept_name , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "616",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find dept_name and the sum of salary , and group by attribute dept_name , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "dept_name",
      "and",
      "the",
      "sum",
      "of",
      "salary",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "SUM",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average , and sort from high to low by the dept_name .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "619@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average , and sort from high to low by the dept_name .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      ",",
      "and",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "dept_name",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the number of players for each hand type . Plot them as pie chart .",
    "VQL": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand', 'binning': ''}, 'VQL': 'Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand'}",
    "record_name": "3286",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Find the number of players for each hand type . Plot them as pie chart .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "hand",
      "type",
      ".",
      "Plot",
      "them",
      "as",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ]
  },
  {
    "nl_queries": "Bar chart x axis nationality y axis the total number , could you list in ascending by the y axis ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis nationality y axis the total number , could you list in ascending by the y axis ?",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "nationality",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "could",
      "you",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Count the names of each high schooler using a bar chart , order in desc by the how many name .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC'}",
    "record_name": "2451@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the names of each high schooler using a bar chart , order in desc by the how many name .",
    "question_toks": [
      "Count",
      "the",
      "names",
      "of",
      "each",
      "high",
      "schooler",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "how",
      "many",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the sum of monthly_rental over the date_address_to bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "238",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the sum of monthly_rental over the date_address_to bin date_address_to by weekday .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "How many courses are provided in each year ? Visualize with a group line chart grouping by semester , could you list x axis in desc order ?",
    "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC'}",
    "record_name": "647@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ],
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "How many courses are provided in each year ? Visualize with a group line chart grouping by semester , could you list x axis in desc order ?",
    "question_toks": [
      "How",
      "many",
      "courses",
      "are",
      "provided",
      "in",
      "each",
      "year",
      "?",
      "Visualize",
      "with",
      "a",
      "group",
      "line",
      "chart",
      "grouping",
      "by",
      "semester",
      ",",
      "could",
      "you",
      "list",
      "x",
      "axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "year",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the names and their average grades of each high schooler , and order in descending by the bar .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2453@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and their average grades of each high schooler , and order in descending by the bar .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "their",
      "average",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      ",",
      "and",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis nationality y axis the total number , rank in desc by the x axis .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis nationality y axis the total number , rank in desc by the x axis .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "nationality",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "rank",
      "in",
      "desc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the amount of date_address_to over the date_address_to bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "232",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the amount of date_address_to over the date_address_to bin date_address_to by weekday .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "the",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What is the proportion of the smallest enrollment of schools in each state ?",
    "VQL": "Visualize PIE SELECT cName , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , min(enr) FROM college GROUP BY state'}",
    "record_name": "2797",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What is the proportion of the smallest enrollment of schools in each state ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "proportion",
      "of",
      "the",
      "smallest",
      "enrollment",
      "of",
      "schools",
      "in",
      "each",
      "state",
      "?"
    ],
    "query": "Visualize PIE SELECT cName , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "I want to know the proportion of the number of counties for each police force .",
    "VQL": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "db_id": "county_public_safety",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force'}",
    "record_name": "708",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of the number of counties for each police force .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "the",
      "number",
      "of",
      "counties",
      "for",
      "each",
      "police",
      "force",
      "."
    ],
    "query": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force"
    ]
  },
  {
    "nl_queries": "Show the names and their average grades of each high schooler , order X-axis in asc order .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2453@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and their average grades of each high schooler , order X-axis in asc order .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "their",
      "average",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      ",",
      "order",
      "X-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "how many students are in each department ? , and could you rank by the the total number in desc ?",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC'}",
    "record_name": "654@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "how many students are in each department ? , and could you rank by the the total number in desc ?",
    "question_toks": [
      "how",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "?",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize the relationship between student_id and monthly_rental .",
    "VQL": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Visualize the relationship between student_id and monthly_rental .",
    "question_toks": [
      "Visualize",
      "the",
      "relationship",
      "between",
      "student_id",
      "and",
      "monthly_rental",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a pie chart about the proportion of state and enr .",
    "VQL": "Visualize PIE SELECT state , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT state , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize PIE SELECT state , enr FROM College ORDER BY enr'}",
    "record_name": "2793",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return a pie chart about the proportion of state and enr .",
    "question_toks": [
      "Return",
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "proportion",
      "of",
      "state",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize PIE SELECT state , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "state",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "A bar chart about what are the different product names ? What is the average product price for each of them ?",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name'}",
    "record_name": "859",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the different product names ? What is the average product price for each of them ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?"
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name"
    ]
  },
  {
    "nl_queries": "Find the names and average salaries of all departments whose average salary is greater than 42000 , show by the x axis from high to low .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "627@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the names and average salaries of all departments whose average salary is greater than 42000 , show by the x axis from high to low .",
    "question_toks": [
      "Find",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "of",
      "all",
      "departments",
      "whose",
      "average",
      "salary",
      "is",
      "greater",
      "than",
      "42000",
      ",",
      "show",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart for listing the number of the order dates of all the bookings .",
    "VQL": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS', 'binning': 'BIN Order_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY'}",
    "record_name": "860",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart for listing the number of the order dates of all the bookings .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "order",
      "dates",
      "of",
      "all",
      "the",
      "bookings",
      "."
    ],
    "query": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Order_Date",
      ",",
      "COUNT",
      "(",
      "Order_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Order_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "I want to see trend of the number of date of notes by date of notes",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR'}",
    "record_name": "188",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend of the number of date of notes by date of notes",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "date",
      "of",
      "notes",
      "by",
      "date",
      "of",
      "notes"
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find the number of rooms with more than 50 capacity for each building . Show bar chart .",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building'}",
    "record_name": "620",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of rooms with more than 50 capacity for each building . Show bar chart .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "rooms",
      "with",
      "more",
      "than",
      "50",
      "capacity",
      "for",
      "each",
      "building",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of other_details and the average of monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "219",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of other_details and the average of monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "I want to see trend of the number of date of notes by date of notes , and show x-axis from low to high order .",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR'}",
    "record_name": "188@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend of the number of date of notes by date of notes , and show x-axis from low to high order .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "date",
      "of",
      "notes",
      "by",
      "date",
      "of",
      "notes",
      ",",
      "and",
      "show",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "date_of_notes",
      "ASC",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "A bar chart about how many hosts does each nationality have ? List the nationality and the count .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "What are the dates of the assessment notes , and count them by a line chart , I want to show in ascending by the X-axis .",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR'}",
    "record_name": "188@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "What are the dates of the assessment notes , and count them by a line chart , I want to show in ascending by the X-axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "line",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "date_of_notes",
      "ASC",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Return a bar graph for the name of the school that has the smallest enrollment in each state , and order from high to low by the x axis .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC'}",
    "record_name": "2798@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar graph for the name of the school that has the smallest enrollment in each state , and order from high to low by the x axis .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "graph",
      "for",
      "the",
      "name",
      "of",
      "the",
      "school",
      "that",
      "has",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      ",",
      "and",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "cName",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the sum of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "224",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the sum of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by weekday .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "List the number of the order dates of all the bookings .",
    "VQL": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS', 'binning': 'BIN Order_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR'}",
    "record_name": "861",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "year"
      ],
      "vis": 2
    },
    "question": "List the number of the order dates of all the bookings .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "the",
      "order",
      "dates",
      "of",
      "all",
      "the",
      "bookings",
      "."
    ],
    "query": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Order_Date",
      ",",
      "COUNT",
      "(",
      "Order_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Order_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Plot the number of payment method code by grouped by payment method code as a bar graph , and show by the Payment_Method_Code from low to high .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2010@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of payment method code by grouped by payment method code as a bar graph , and show by the Payment_Method_Code from low to high .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "payment",
      "method",
      "code",
      "by",
      "grouped",
      "by",
      "payment",
      "method",
      "code",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "show",
      "by",
      "the",
      "Payment_Method_Code",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then compute the average amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "2001",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then compute the average amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "compute",
      "the",
      "average",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2028",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the average amount payment as the Y-axis .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "List the number of departments for each building with a bar chart , and could you rank bar from high to low order ?",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC'}",
    "record_name": "625@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of departments for each building with a bar chart , and could you rank bar from high to low order ?",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "departments",
      "for",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "bar",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many counties correspond to each police force , sort in ascending by the y-axis .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC'}",
    "record_name": "709@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many counties correspond to each police force , sort in ascending by the y-axis .",
    "question_toks": [
      "How",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      ",",
      "sort",
      "in",
      "ascending",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the name and assets of each company , sorted in ascending order of company name .",
    "VQL": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "db_id": "company_office",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , Assets_billion FROM Companies ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC'}",
    "record_name": "688",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the name and assets of each company , sorted in ascending order of company name .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "assets",
      "of",
      "each",
      "company",
      ",",
      "sorted",
      "in",
      "ascending",
      "order",
      "of",
      "company",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "Assets_billion",
      "FROM",
      "Companies",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad in a bar chart , and show by the X in ascending .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC'}",
    "record_name": "872@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the distinct payment method codes with the number of orders mad in a bar chart , and show by the X in ascending .",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "by",
      "the",
      "X",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "payment_method_code",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find date_address_to and the average of monthly_rental bin date_address_to by time , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "231",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Find date_address_to and the average of monthly_rental bin date_address_to by time , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "time",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Bar chart of total number of credits from each dept name , and sort in asc by the total number of credits .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC'}",
    "record_name": "621@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of total number of credits from each dept name , and sort in asc by the total number of credits .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "total",
      "number",
      "of",
      "credits",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "and",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "total",
      "number",
      "of",
      "credits",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "sum",
      "(",
      "credits",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of state and enr .",
    "VQL": "Visualize BAR SELECT state , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , enr FROM College ORDER BY enr'}",
    "record_name": "2794",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of state and enr .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "state",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize BAR SELECT state , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "A scatter chart shows the correlation between student_id and address_id .",
    "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "274",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "A scatter chart shows the correlation between student_id and address_id .",
    "question_toks": [
      "A",
      "scatter",
      "chart",
      "shows",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "address_id",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "address_id",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of the total number from each year , and display names from high to low order please .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC'}",
    "record_name": "3288@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each year , and display names from high to low order please .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "year",
      ",",
      "and",
      "display",
      "names",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ]
  },
  {
    "nl_queries": "Pie . which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "VQL": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2606",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Pie . which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "question_toks": [
      "Pie",
      ".",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ]
  },
  {
    "nl_queries": "Bar chart x axis nationality y axis the total number , show by the X-axis from low to high .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis nationality y axis the total number , show by the X-axis from low to high .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "nationality",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "show",
      "by",
      "the",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , rank from high to low by the sum population .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , rank from high to low by the sum population .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "sum",
      "population",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the sum of monthly_rental over the date_address_from bin date_address_from by time by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "246",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the sum of monthly_rental over the date_address_from bin date_address_from by time by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "time",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Plot the number of payment method code by grouped by payment method code as a bar graph , and list by the total number from high to low .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC'}",
    "record_name": "2010@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the number of payment method code by grouped by payment method code as a bar graph , and list by the total number from high to low .",
    "question_toks": [
      "Plot",
      "the",
      "number",
      "of",
      "payment",
      "method",
      "code",
      "by",
      "grouped",
      "by",
      "payment",
      "method",
      "code",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "list",
      "by",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(Payment_Method_Code) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and list X-axis in desc order please .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and list X-axis in desc order please .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "list",
      "X-axis",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart for how many total credits are offered by each department ?",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name'}",
    "record_name": "621",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for how many total credits are offered by each department ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Give me the trend about the average of monthly_rental over date_address_to , and group by attribute date_address_to .",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "273",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Give me the trend about the average of monthly_rental over date_address_to , and group by attribute date_address_to .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and display y-axis in desc order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and display y-axis in desc order .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "y-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and the average grades for each high schooler . Plot them as a bar chart .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2453",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and the average grades for each high schooler . Plot them as a bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      ".",
      "Plot",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "Display a bar chart for how many counties correspond to each police force ? , list Y-axis in desc order .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC'}",
    "record_name": "709@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many counties correspond to each police force ? , list Y-axis in desc order .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?",
      ",",
      "list",
      "Y-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "List the number of departments for each building with a bar chart , show by the how many building from high to low .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC'}",
    "record_name": "625@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of departments for each building with a bar chart , show by the how many building from high to low .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "departments",
      "for",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "how",
      "many",
      "building",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "building",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a scatter chart about the correlation between student_id and address_id .",
    "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "274",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Draw a scatter chart about the correlation between student_id and address_id .",
    "question_toks": [
      "Draw",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "address_id",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "address_id",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show all the actual delivery dates and bin by year in a line chart , and list by the X from low to high .",
    "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC', 'binning': 'BIN Actual_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR'}",
    "record_name": "864@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "year"
      ],
      "vis": 2
    },
    "question": "Show all the actual delivery dates and bin by year in a line chart , and list by the X from low to high .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "actual",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "year",
      "in",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Actual_Delivery_Date",
      "ASC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find date_address_from and the average of monthly_rental bin date_address_from by time , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "247",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Find date_address_from and the average of monthly_rental bin date_address_from by time , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "time",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Visualize a pie chart about the proportion of cName and enr .",
    "VQL": "Visualize PIE SELECT cName , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , enr FROM College ORDER BY enr'}",
    "record_name": "2791",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize a pie chart about the proportion of cName and enr .",
    "question_toks": [
      "Visualize",
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "proportion",
      "of",
      "cName",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize PIE SELECT cName , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Give me a bar chart , that group by location and count them , show by the Location in descending .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC'}",
    "record_name": "2507@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart , that group by location and count them , show by the Location in descending .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "that",
      "group",
      "by",
      "location",
      "and",
      "count",
      "them",
      ",",
      "show",
      "by",
      "the",
      "Location",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "Location",
      "DESC"
    ]
  },
  {
    "nl_queries": "For monthly_rental , date_address_from , visualize the trend .",
    "VQL": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "267",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "For monthly_rental , date_address_from , visualize the trend .",
    "question_toks": [
      "For",
      "monthly_rental",
      ",",
      "date_address_from",
      ",",
      "visualize",
      "the",
      "trend",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_from",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and could you list catalog_entry_name from high to low order please ?",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC'}",
    "record_name": "2607@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and could you list catalog_entry_name from high to low order please ?",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "list",
      "catalog_entry_name",
      "from",
      "high",
      "to",
      "low",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "194",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by time .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Bar chart , the-axis is the state , and the Y axis is each state's the smallest enrollment , could you show by the X-axis in desc ?",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC'}",
    "record_name": "2800@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart , the-axis is the state , and the Y axis is each state's the smallest enrollment , could you show by the X-axis in desc ?",
    "question_toks": [
      "Bar",
      "chart",
      ",",
      "the-axis",
      "is",
      "the",
      "state",
      ",",
      "and",
      "the",
      "Y",
      "axis",
      "is",
      "each",
      "state's",
      "the",
      "smallest",
      "enrollment",
      ",",
      "could",
      "you",
      "show",
      "by",
      "the",
      "X-axis",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "state",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a pie to show minimal enr from different state .",
    "VQL": "Visualize PIE SELECT state , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize PIE SELECT state , min(enr) FROM college GROUP BY state'}",
    "record_name": "2799",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show minimal enr from different state .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "minimal",
      "enr",
      "from",
      "different",
      "state",
      "."
    ],
    "query": "Visualize PIE SELECT state , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing how many location across location",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location'}",
    "record_name": "2507",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many location across location",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "location",
      "across",
      "location"
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_to and the average of monthly_rental bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "231",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_to and the average of monthly_rental bin date_address_to by time .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "What is the greatest capacity for rooms in each building ? Draw a bar chart , list Y in asc order .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC'}",
    "record_name": "623@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              1,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the greatest capacity for rooms in each building ? Draw a bar chart , list Y in asc order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "greatest",
      "capacity",
      "for",
      "rooms",
      "in",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "max",
      "(",
      "capacity",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "225",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me the trend about the average of monthly_rental over date_address_to , and group by attribute date_address_to with a line chart .",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "273",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend about the average of monthly_rental over date_address_to , and group by attribute date_address_to with a line chart .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the number of rooms with more than 50 capacity for each building Show bar chart , and order from high to low by the X-axis .",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC'}",
    "record_name": "620@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of rooms with more than 50 capacity for each building Show bar chart , and order from high to low by the X-axis .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "rooms",
      "with",
      "more",
      "than",
      "50",
      "capacity",
      "for",
      "each",
      "building",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of dept_name and the sum of salary , and group by attribute dept_name .",
    "VQL": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "616",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of dept_name and the sum of salary , and group by attribute dept_name .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "sum",
      "of",
      "salary",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "SUM",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing how many location across location , and display by the total number from low to high .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC'}",
    "record_name": "2507@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many location across location , and display by the total number from low to high .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "location",
      "across",
      "location",
      ",",
      "and",
      "display",
      "by",
      "the",
      "total",
      "number",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Location",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for mean product price of each product name , I want to sort from high to low by the Y-axis .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC'}",
    "record_name": "859@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for mean product price of each product name , I want to sort from high to low by the Y-axis .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "mean",
      "product",
      "price",
      "of",
      "each",
      "product",
      "name",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Product_Price",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "A line chart for listing the number of the order dates of all the bookings .",
    "VQL": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS', 'binning': 'BIN Order_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR'}",
    "record_name": "861",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "year"
      ],
      "vis": 2
    },
    "question": "A line chart for listing the number of the order dates of all the bookings .",
    "question_toks": [
      "A",
      "line",
      "chart",
      "for",
      "listing",
      "the",
      "number",
      "of",
      "the",
      "order",
      "dates",
      "of",
      "all",
      "the",
      "bookings",
      "."
    ],
    "query": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Order_Date",
      ",",
      "COUNT",
      "(",
      "Order_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Order_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Draw a scatter chart about the correlation between ID and salary .",
    "VQL": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT ID , salary FROM instructor ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary'}",
    "record_name": "618",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Draw a scatter chart about the correlation between ID and salary .",
    "question_toks": [
      "Draw",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "ID",
      "and",
      "salary",
      "."
    ],
    "query": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "ID",
      ",",
      "salary",
      "FROM",
      "instructor",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "A bar chart about what are the names and number of hours spent training for each player who trains for less than 1500 hours ? , and order HS from low to high order .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC'}",
    "record_name": "2790@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the names and number of hours spent training for each player who trains for less than 1500 hours ? , and order HS from low to high order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      "?",
      ",",
      "and",
      "order",
      "HS",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "HS",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart , that group by location and count them .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location'}",
    "record_name": "2507",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart , that group by location and count them .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "that",
      "group",
      "by",
      "location",
      "and",
      "count",
      "them",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location"
    ]
  },
  {
    "nl_queries": "What are the number of the dates of the assessment notes ? , list y-axis in asc order .",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the number of the dates of the assessment notes ? , list y-axis in asc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?",
      ",",
      "list",
      "y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "ASC",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a scatter chart about the correlation between student_id and address_id .",
    "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "274",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Return a scatter chart about the correlation between student_id and address_id .",
    "question_toks": [
      "Return",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "address_id",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "address_id",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of minimal salary from each dept name , and list in descending by the X-axis please .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "619@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of minimal salary from each dept name , and list in descending by the X-axis please .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "minimal",
      "salary",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "and",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "X-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the name of the school that has the smallest enrollment in each state ? , I want to list x-axis in ascending order .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC'}",
    "record_name": "2798@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the name of the school that has the smallest enrollment in each state ? , I want to list x-axis in ascending order .",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "school",
      "that",
      "has",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      "?",
      ",",
      "I",
      "want",
      "to",
      "list",
      "x-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "cName",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year'}",
    "record_name": "2497",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Count",
      "the",
      "last",
      "year",
      "for",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year"
    ]
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? List the date and the amount using a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\"}",
    "record_name": "2030",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which Payments were processed with Visa ? List the date and the amount using a bar chart .",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "List",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "202",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Bar graph to show minimal enr from different cname , I want to display by the X-axis in asc .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC'}",
    "record_name": "2798@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show minimal enr from different cname , I want to display by the X-axis in asc .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "minimal",
      "enr",
      "from",
      "different",
      "cname",
      ",",
      "I",
      "want",
      "to",
      "display",
      "by",
      "the",
      "X-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "cName",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors Plot them as bar chart , and show in descending by the total number .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC'}",
    "record_name": "619@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors Plot them as bar chart , and show in descending by the total number .",
    "question_toks": [
      "Find",
      "the",
      "minimum",
      "salary",
      "for",
      "the",
      "departments",
      "whose",
      "average",
      "salary",
      "is",
      "above",
      "the",
      "average",
      "payment",
      "of",
      "all",
      "instructors",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "min",
      "(",
      "salary",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many counties correspond to each police force .",
    "VQL": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "db_id": "county_public_safety",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force'}",
    "record_name": "708",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many counties correspond to each police force .",
    "question_toks": [
      "How",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "."
    ],
    "query": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force"
    ]
  },
  {
    "nl_queries": "How many total amounts of payments by each method code ? You can give me a bar chart .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2011",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total amounts of payments by each method code ? You can give me a bar chart .",
    "question_toks": [
      "How",
      "many",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "How many departments for each building ? Draw a bar chart , show Y from high to low order .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC'}",
    "record_name": "625@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many departments for each building ? Draw a bar chart , show Y from high to low order .",
    "question_toks": [
      "How",
      "many",
      "departments",
      "for",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "building",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing how many location across location , and sort by the the number of location from high to low please .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC'}",
    "record_name": "2507@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many location across location , and sort by the the number of location from high to low please .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "location",
      "across",
      "location",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "the",
      "number",
      "of",
      "location",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Location",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "how many total tours were there for each ranking date ?",
    "VQL": "Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date'}",
    "record_name": "3285",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          39,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "how many total tours were there for each ranking date ?",
    "question_toks": [
      "how",
      "many",
      "total",
      "tours",
      "were",
      "there",
      "for",
      "each",
      "ranking",
      "date",
      "?"
    ],
    "query": "Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "FROM",
      "rankings",
      "GROUP",
      "BY",
      "ranking_date"
    ]
  },
  {
    "nl_queries": "Bar chart of the number of planned delivery date from each planned delivery date , display from high to low by the y-axis .",
    "VQL": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC BIN Planned_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC', 'binning': 'BIN Planned_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC BIN Planned_Delivery_Date BY WEEKDAY'}",
    "record_name": "862@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart of the number of planned delivery date from each planned delivery date , display from high to low by the y-axis .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "number",
      "of",
      "planned",
      "delivery",
      "date",
      "from",
      "each",
      "planned",
      "delivery",
      "date",
      ",",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC BIN Planned_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "DESC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Plot date of latest revision by the number of date of latest revision as a line chart , rank by the x axis in asc please .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Plot date of latest revision by the number of date of latest revision as a line chart , rank by the x axis in asc please .",
    "question_toks": [
      "Plot",
      "date",
      "of",
      "latest",
      "revision",
      "by",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "asc",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "ASC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each year using a bar chart , show in descending by the how many date payment made please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2024@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each year using a bar chart , show in descending by the how many date payment made please .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "how",
      "many",
      "date",
      "payment",
      "made",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the amount of date_address_from over the date_address_from , and group by attribute other_details and bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "212",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the amount of date_address_from over the date_address_from , and group by attribute other_details and bin date_address_from by weekday .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "amount",
      "of",
      "date_address_from",
      "over",
      "the",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the number of students in each department with a bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM student GROUP BY dept_name ORDER BY tot_cred",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , COUNT(dept_name) FROM student GROUP BY dept_name ORDER BY tot_cred', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , COUNT(dept_name) FROM student GROUP BY dept_name ORDER BY tot_cred'}",
    "record_name": "658",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of students in each department with a bar chart .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "students",
      "in",
      "each",
      "department",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM student GROUP BY dept_name ORDER BY tot_cred",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "COUNT",
      "(",
      "dept_name",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "tot_cred"
    ]
  },
  {
    "nl_queries": "What about the average amounts of payments by each method code ? You can give me a bar chart , could you list by the Payment_Method_Code from low to high ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2012@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What about the average amounts of payments by each method code ? You can give me a bar chart , could you list by the Payment_Method_Code from low to high ?",
    "question_toks": [
      "What",
      "about",
      "the",
      "average",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "by",
      "the",
      "Payment_Method_Code",
      "from",
      "low",
      "to",
      "high",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show minimal enr from each state , show from low to high by the Y-axis .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC'}",
    "record_name": "2800@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show minimal enr from each state , show from low to high by the Y-axis .",
    "question_toks": [
      "Show",
      "minimal",
      "enr",
      "from",
      "each",
      "state",
      ",",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart of total number of credits from each dept name , and display dept_name in descending order .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "621@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of total number of credits from each dept name , and display dept_name in descending order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "total",
      "number",
      "of",
      "credits",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "and",
      "display",
      "dept_name",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "225",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show the names and sum grades of each high schooler Plot them as bar graph , could you order from high to low by the x-axis ?",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2452@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and sum grades of each high schooler Plot them as bar graph , could you order from high to low by the x-axis ?",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "sum",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "bar",
      "graph",
      ",",
      "could",
      "you",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "x-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of minimal salary from each dept name , and list by the total number in descending .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC'}",
    "record_name": "619@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of minimal salary from each dept name , and list by the total number in descending .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "minimal",
      "salary",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "and",
      "list",
      "by",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "min",
      "(",
      "salary",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the names and their total grades for each high schooler ? , and display from high to low by the X .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2452@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the names and their total grades for each high schooler ? , and display from high to low by the X .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "their",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "and",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many matches were played in each year ?",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR'}",
    "record_name": "3288",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many matches were played in each year ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?"
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "For each distinct product name , show its average product price , and show by the the average of product price from low to high .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC'}",
    "record_name": "859@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each distinct product name , show its average product price , and show by the the average of product price from low to high .",
    "question_toks": [
      "For",
      "each",
      "distinct",
      "product",
      "name",
      ",",
      "show",
      "its",
      "average",
      "product",
      "price",
      ",",
      "and",
      "show",
      "by",
      "the",
      "the",
      "average",
      "of",
      "product",
      "price",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Product_Price",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , sort X-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC'}",
    "record_name": "3269@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , sort X-axis in ascending order .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "sort",
      "X-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me the trend about monthly_rental over date_address_from with a line chart .",
    "VQL": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "267",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend about monthly_rental over date_address_from with a line chart .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "about",
      "monthly_rental",
      "over",
      "date_address_from",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_from",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the average of monthly_rental over the date_address_from bin date_address_from by weekday by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "265",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the average of monthly_rental over the date_address_from bin date_address_from by weekday by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2607",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ]
  },
  {
    "nl_queries": "For the attribute other_details and the sum of monthly_rental , show their proportion by a pie chart .",
    "VQL": "Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "252",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "For the attribute other_details and the sum of monthly_rental , show their proportion by a pie chart .",
    "question_toks": [
      "For",
      "the",
      "attribute",
      "other_details",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "show",
      "their",
      "proportion",
      "by",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "other_details",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_from and the amount of date_address_from bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "233",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_from and the amount of date_address_from bin date_address_from by time .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "189",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by time .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "What about the proportion of the total amounts of payments by each method code ? You can give me a pie chart .",
    "VQL": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2013",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What about the proportion of the total amounts of payments by each method code ? You can give me a pie chart .",
    "question_toks": [
      "What",
      "about",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "Return a bar graph for the name of the school that has the smallest enrollment in each state , could you order by the x axis in asc please ?",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC'}",
    "record_name": "2798@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar graph for the name of the school that has the smallest enrollment in each state , could you order by the x axis in asc please ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "graph",
      "for",
      "the",
      "name",
      "of",
      "the",
      "school",
      "that",
      "has",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      ",",
      "could",
      "you",
      "order",
      "by",
      "the",
      "x",
      "axis",
      "in",
      "asc",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "cName",
      "ASC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for how many students participated in tryouts for each college by descennding count ?",
    "VQL": "Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC'}",
    "record_name": "2802",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many students participated in tryouts for each college by descennding count ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "students",
      "participated",
      "in",
      "tryouts",
      "for",
      "each",
      "college",
      "by",
      "descennding",
      "count",
      "?"
    ],
    "query": "Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "tryout",
      "GROUP",
      "BY",
      "cName",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many total amounts of payments by each method code ? You can give me a bar chart , and order x-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2011@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total amounts of payments by each method code ? You can give me a bar chart , and order x-axis in ascending order .",
    "question_toks": [
      "How",
      "many",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "x-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ]
  },
  {
    "nl_queries": "A bar chart for what are the number of the dates of the assessment notes ? , and order in asc by the y-axis .",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart for what are the number of the dates of the assessment notes ? , and order in asc by the y-axis .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?",
      ",",
      "and",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "ASC",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "How many total tours were there for each ranking date .",
    "VQL": "Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date'}",
    "record_name": "3285",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          39,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "How many total tours were there for each ranking date .",
    "question_toks": [
      "How",
      "many",
      "total",
      "tours",
      "were",
      "there",
      "for",
      "each",
      "ranking",
      "date",
      "."
    ],
    "query": "Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "FROM",
      "rankings",
      "GROUP",
      "BY",
      "ranking_date"
    ]
  },
  {
    "nl_queries": "Find the number of players for each hand type Show bar chart , and display Y in descending order .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC'}",
    "record_name": "3287@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of players for each hand type Show bar chart , and display Y in descending order .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "hand",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "Y",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_from and the amount of date_address_from bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "248",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_from and the amount of date_address_from bin date_address_from by weekday .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Plot the total number by grouped by industry as a bar graph , and list by the the total number from high to low .",
    "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
    "db_id": "company_office",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC'}",
    "record_name": "685@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the total number by grouped by industry as a bar graph , and list by the the total number from high to low .",
    "question_toks": [
      "Plot",
      "the",
      "total",
      "number",
      "by",
      "grouped",
      "by",
      "industry",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "list",
      "by",
      "the",
      "the",
      "total",
      "number",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "A scatter chart shows the correlation between ID and salary .",
    "VQL": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT ID , salary FROM instructor ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary'}",
    "record_name": "618",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "A scatter chart shows the correlation between ID and salary .",
    "question_toks": [
      "A",
      "scatter",
      "chart",
      "shows",
      "the",
      "correlation",
      "between",
      "ID",
      "and",
      "salary",
      "."
    ],
    "query": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "ID",
      ",",
      "salary",
      "FROM",
      "instructor",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Give me the payment Id , and the amount for all the payments processed with Visa using a scatter chart .",
    "VQL": "Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': \"SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': ''}, 'VQL': \"Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\"}",
    "record_name": "2032",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Give me the payment Id , and the amount for all the payments processed with Visa using a scatter chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "payment",
      "Id",
      ",",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "using",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "Payment_ID",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what are the names and average salaries for departments with average salary higher than 42000 ? , could you list names from low to high order ?",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "627@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the names and average salaries for departments with average salary higher than 42000 ? , could you list names from low to high order ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "?",
      ",",
      "could",
      "you",
      "list",
      "names",
      "from",
      "low",
      "to",
      "high",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code in a bar chart , list by the Y from high to low .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC'}",
    "record_name": "872@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all payment method codes and the number of orders for each code in a bar chart , list by the Y from high to low .",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by year and return a bar chart , and I want to order in descending by the Y-axis .",
    "VQL": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) DESC BIN date_incident_start BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) DESC', 'binning': 'BIN date_incident_start BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) DESC BIN date_incident_start BY YEAR'}",
    "record_name": "281@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              44,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        44,
        "year"
      ],
      "vis": 0
    },
    "question": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by year and return a bar chart , and I want to order in descending by the Y-axis .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "start",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      "Bin",
      "by",
      "year",
      "and",
      "return",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) DESC BIN date_incident_start BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_start",
      ",",
      "COUNT",
      "(",
      "date_incident_start",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_incident_start",
      ")",
      "DESC",
      "BIN",
      "date_incident_start",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad in a bar chart , and list by the Y from high to low .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC'}",
    "record_name": "872@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the distinct payment method codes with the number of orders mad in a bar chart , and list by the Y from high to low .",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them , and could you display y-axis in descending order please ?",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY'}",
    "record_name": "2499@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Bin the last year into weekday interval and count them , and could you display y-axis in descending order please ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      ",",
      "and",
      "could",
      "you",
      "display",
      "y-axis",
      "in",
      "descending",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "DESC",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "2004",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "A line chart for what are the number of the dates of the assessment notes ? , and I want to show in ascending by the X-axis .",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR'}",
    "record_name": "188@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "A line chart for what are the number of the dates of the assessment notes ? , and I want to show in ascending by the X-axis .",
    "question_toks": [
      "A",
      "line",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "date_of_notes",
      "ASC",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality . Show a pie chart .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show different nationalities along with the number of hosts of each nationality . Show a pie chart .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "I want to see trend the total number over year by semester",
    "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , count(*) FROM SECTION GROUP BY semester ,  year', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year'}",
    "record_name": "647",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ],
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "I want to see trend the total number over year by semester",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "the",
      "total",
      "number",
      "over",
      "year",
      "by",
      "semester"
    ],
    "query": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "year"
    ]
  },
  {
    "nl_queries": "Show the number of date of notes from each date of notes",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the number of date of notes from each date of notes",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "date",
      "of",
      "notes",
      "from",
      "each",
      "date",
      "of",
      "notes"
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me the trend about the sum of monthly_rental over date_address_to , and group by attribute other_details with a line chart .",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "259",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend about the sum of monthly_rental over date_address_to , and group by attribute other_details with a line chart .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "210",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of other_details and the sum of monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "218",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of other_details and the sum of monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "202",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "What are the names and total grades for each high schooler Plot them as a bar chart , sort name in desc order .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2452@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and total grades for each high schooler Plot them as a bar chart , sort name in desc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "name",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , I want to list in descending by the y-axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC'}",
    "record_name": "2607@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , I want to list in descending by the y-axis .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "I",
      "want",
      "to",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many matches were played in each year , and sort Y-axis in ascending order .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC'}",
    "record_name": "3288@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many matches were played in each year , and sort Y-axis in ascending order .",
    "question_toks": [
      "How",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      ",",
      "and",
      "sort",
      "Y-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_from and the average of monthly_rental bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "247",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_from and the average of monthly_rental bin date_address_from by time .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_from and the sum of monthly_rental bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "246",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_from and the sum of monthly_rental bin date_address_from by time .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find the number of courses provided in each year with a group line chart that groups by semester , and order from high to low by the X-axis .",
    "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC'}",
    "record_name": "647@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ],
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Find the number of courses provided in each year with a group line chart that groups by semester , and order from high to low by the X-axis .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "courses",
      "provided",
      "in",
      "each",
      "year",
      "with",
      "a",
      "group",
      "line",
      "chart",
      "that",
      "groups",
      "by",
      "semester",
      ",",
      "and",
      "order",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "year",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then sum the amount of each payment as Y , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "2006",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then sum the amount of each payment as Y , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "sum",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      "as",
      "Y",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "How many counties correspond to each police force , and order bars in asc order .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC'}",
    "record_name": "709@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many counties correspond to each police force , and order bars in asc order .",
    "question_toks": [
      "How",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      ",",
      "and",
      "order",
      "bars",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "Police_force",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me the proportion of each payment method code using a pie chart .",
    "VQL": "Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2009",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Show me the proportion of each payment method code using a pie chart .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "proportion",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "224",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by weekday .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What is the greatest capacity for rooms in each building ? Draw a bar chart , rank by the maximal capacity in descending please .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC'}",
    "record_name": "623@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              1,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the greatest capacity for rooms in each building ? Draw a bar chart , rank by the maximal capacity in descending please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "greatest",
      "capacity",
      "for",
      "rooms",
      "in",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "maximal",
      "capacity",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY max(capacity) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "max",
      "(",
      "capacity",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , I want to show in desc by the y axis .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC'}",
    "record_name": "2607@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , I want to show in desc by the y axis .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "I",
      "want",
      "to",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a pie chart with how many players are there for each hand type ?",
    "VQL": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand', 'binning': ''}, 'VQL': 'Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand'}",
    "record_name": "3286",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize a pie chart with how many players are there for each hand type ?",
    "question_toks": [
      "Visualize",
      "a",
      "pie",
      "chart",
      "with",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?"
    ],
    "query": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ]
  },
  {
    "nl_queries": "A bar chart about what are the names and number of hours spent training for each player who trains for less than 1500 hours ? , and display in descending by the y axis .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC'}",
    "record_name": "2790@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the names and number of hours spent training for each player who trains for less than 1500 hours ? , and display in descending by the y axis .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      "?",
      ",",
      "and",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "HS",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show the number of name from different name",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name'}",
    "record_name": "2451",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of name from different name",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "name",
      "from",
      "different",
      "name"
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , and sort X-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count , and sort X-axis from high to low order .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "and",
      "sort",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many players are there for each hand type ? , and sort Y-axis in descending order .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC'}",
    "record_name": "3287@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many players are there for each hand type ? , and sort Y-axis in descending order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?",
      ",",
      "and",
      "sort",
      "Y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a trend line to show the average amount of payment by each payment day .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2015",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a trend line to show the average amount of payment by each payment day .",
    "question_toks": [
      "Return",
      "a",
      "trend",
      "line",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "day",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a pie chart for what are the name and level of catalog structure with level number between 5 and 10",
    "VQL": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2604",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Draw a pie chart for what are the name and level of catalog structure with level number between 5 and 10",
    "question_toks": [
      "Draw",
      "a",
      "pie",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10"
    ],
    "query": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ]
  },
  {
    "nl_queries": "Show the names and the total grades of each high schooler by a bar chart , sort in desc by the name .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2452@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and the total grades of each high schooler by a bar chart , sort in desc by the name .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "the",
      "total",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "name",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bin the claim date into Year interval and count them for visualizing a bar chart , and could you order by the the number of date claim settled from high to low ?",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into Year interval and count them for visualizing a bar chart , and could you order by the the number of date claim settled from high to low ?",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "order",
      "by",
      "the",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count . Plot them as pie chart .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count . Plot them as pie chart .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ".",
      "Plot",
      "them",
      "as",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "What are the names and areas of countries with the top 5 largest area .",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the names and areas of countries with the top 5 largest area .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "."
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ]
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , and display Y-axis in asc order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC'}",
    "record_name": "3275@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , and display Y-axis in asc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "Y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors Plot them as bar chart , and could you list X-axis from high to low order ?",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "619@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors Plot them as bar chart , and could you list X-axis from high to low order ?",
    "question_toks": [
      "Find",
      "the",
      "minimum",
      "salary",
      "for",
      "the",
      "departments",
      "whose",
      "average",
      "salary",
      "is",
      "above",
      "the",
      "average",
      "payment",
      "of",
      "all",
      "instructors",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "list",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for how many rooms in each building have a capacity of over 50 ? , could you sort by the the total number in desc ?",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC'}",
    "record_name": "620@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many rooms in each building have a capacity of over 50 ? , could you sort by the the total number in desc ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "rooms",
      "in",
      "each",
      "building",
      "have",
      "a",
      "capacity",
      "of",
      "over",
      "50",
      "?",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for how many rooms in each building have a capacity of over 50 ? , and I want to show in desc by the x-axis .",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC'}",
    "record_name": "620@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many rooms in each building have a capacity of over 50 ? , and I want to show in desc by the x-axis .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "rooms",
      "in",
      "each",
      "building",
      "have",
      "a",
      "capacity",
      "of",
      "over",
      "50",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart , I want to order by the x axis from high to low please .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a line chart , I want to order by the x axis from high to low please .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "line",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "order",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "DESC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Show the smallest enrollment of each state , and could you rank in ascending by the total number ?",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC'}",
    "record_name": "2800@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the smallest enrollment of each state , and could you rank in ascending by the total number ?",
    "question_toks": [
      "Show",
      "the",
      "smallest",
      "enrollment",
      "of",
      "each",
      "state",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the Year interval and then shows the average amount of each payment , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "2003",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the Year interval and then shows the average amount of each payment , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "average",
      "amount",
      "of",
      "each",
      "payment",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2605",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort names in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , sort names in ascending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "sort",
      "names",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ]
  },
  {
    "nl_queries": "Plot the total number by grouped by industry as a bar graph , and rank from high to low by the bars .",
    "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC",
    "db_id": "company_office",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC'}",
    "record_name": "685@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Plot the total number by grouped by industry as a bar graph , and rank from high to low by the bars .",
    "question_toks": [
      "Plot",
      "the",
      "total",
      "number",
      "by",
      "grouped",
      "by",
      "industry",
      "as",
      "a",
      "bar",
      "graph",
      ",",
      "and",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry",
      "ORDER",
      "BY",
      "Industry",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a line chart about the change of the sum of monthly_rental over date_address_to , and group by attribute other_details .",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "259",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart about the change of the sum of monthly_rental over date_address_to , and group by attribute other_details .",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the average of monthly_rental over the date_address_to bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "231",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the average of monthly_rental over the date_address_to bin date_address_to by time .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "A bar chart about what are the different product names ? What is the average product price for each of them ? , sort X from low to high order .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC'}",
    "record_name": "859@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the different product names ? What is the average product price for each of them ? , sort X from low to high order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?",
      ",",
      "sort",
      "X",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "Product_Name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart of the total number from each year , and order Y in ascending order .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC'}",
    "record_name": "3288@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each year , and order Y in ascending order .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "year",
      ",",
      "and",
      "order",
      "Y",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Can you draw the trend of the number of actual delivery date over the actual delivery date ? , display in ascending by the X .",
    "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC', 'binning': 'BIN Actual_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR'}",
    "record_name": "864@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "year"
      ],
      "vis": 2
    },
    "question": "Can you draw the trend of the number of actual delivery date over the actual delivery date ? , display in ascending by the X .",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "the",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "actual",
      "delivery",
      "date",
      "over",
      "the",
      "actual",
      "delivery",
      "date",
      "?",
      ",",
      "display",
      "in",
      "ascending",
      "by",
      "the",
      "X",
      "."
    ],
    "query": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Actual_Delivery_Date",
      "ASC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Bar graph to show mean grade from different name , could you order from low to high by the Y please ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC'}",
    "record_name": "2453@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show mean grade from different name , could you order from low to high by the Y please ?",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "mean",
      "grade",
      "from",
      "different",
      "name",
      ",",
      "could",
      "you",
      "order",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Y",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the Year interval and then shows the average of the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "1997",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the Year interval and then shows the average of the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "average",
      "of",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , list from low to high by the X-axis .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC'}",
    "record_name": "2605@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10 , list from low to high by the X-axis .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis building y axis maximal capacity , show by the X-axis from high to low .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC'}",
    "record_name": "623@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis building y axis maximal capacity , show by the X-axis from high to low .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "building",
      "y",
      "axis",
      "maximal",
      "capacity",
      ",",
      "show",
      "by",
      "the",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many matches were played in each year ? , and rank x axis from high to low order .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC'}",
    "record_name": "3288@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many matches were played in each year ? , and rank x axis from high to low order .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?",
      ",",
      "and",
      "rank",
      "x",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ]
  },
  {
    "nl_queries": "A line chart shows the trend of the amount of date_address_to over date_address_to , and group by attribute date_address_to .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "266",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "A line chart shows the trend of the amount of date_address_to over date_address_to , and group by attribute date_address_to .",
    "question_toks": [
      "A",
      "line",
      "chart",
      "shows",
      "the",
      "trend",
      "of",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show mean grade from different name , could you list by the name from low to high ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2453@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show mean grade from different name , could you list by the name from low to high ?",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "mean",
      "grade",
      "from",
      "different",
      "name",
      ",",
      "could",
      "you",
      "list",
      "by",
      "the",
      "name",
      "from",
      "low",
      "to",
      "high",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Compare the smallest enrollment of schools in each state using a bar chart , and I want to display by the X-axis in asc .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC'}",
    "record_name": "2798@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the smallest enrollment of schools in each state using a bar chart , and I want to display by the X-axis in asc .",
    "question_toks": [
      "Compare",
      "the",
      "smallest",
      "enrollment",
      "of",
      "schools",
      "in",
      "each",
      "state",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "by",
      "the",
      "X-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "cName",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a bar chart on what are the name and assets of each company , sorted in ascending order of company name ?",
    "VQL": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "db_id": "company_office",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , Assets_billion FROM Companies ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC'}",
    "record_name": "688",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on what are the name and assets of each company , sorted in ascending order of company name ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "what",
      "are",
      "the",
      "name",
      "and",
      "assets",
      "of",
      "each",
      "company",
      ",",
      "sorted",
      "in",
      "ascending",
      "order",
      "of",
      "company",
      "name",
      "?"
    ],
    "query": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "Assets_billion",
      "FROM",
      "Companies",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the amount of other_details over the other_details , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "203",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me the comparison about the amount of other_details over the other_details , and group by attribute other_details .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "amount",
      "of",
      "other_details",
      "over",
      "the",
      "other_details",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "COUNT",
      "(",
      "other_details",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Scatter plot to show sum(tours) on x axis and ranking_date on y axis .",
    "VQL": "Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date'}",
    "record_name": "3285",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          39,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Scatter plot to show sum(tours) on x axis and ranking_date on y axis .",
    "question_toks": [
      "Scatter",
      "plot",
      "to",
      "show",
      "sum(tours)",
      "on",
      "x",
      "axis",
      "and",
      "ranking_date",
      "on",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "FROM",
      "rankings",
      "GROUP",
      "BY",
      "ranking_date"
    ]
  },
  {
    "nl_queries": "For each distinct product name , show its average product price , and sort in desc by the y-axis .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC'}",
    "record_name": "859@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each distinct product name , show its average product price , and sort in desc by the y-axis .",
    "question_toks": [
      "For",
      "each",
      "distinct",
      "product",
      "name",
      ",",
      "show",
      "its",
      "average",
      "product",
      "price",
      ",",
      "and",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "avg",
      "(",
      "Product_Price",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the amount of date_address_to over the date_address_to bin date_address_to by time by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "205",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the amount of date_address_to over the date_address_to bin date_address_to by time by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "the",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "time",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what are the names and the average grades for each high schooler ? , and list by the y axis from low to high .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC'}",
    "record_name": "2453@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the names and the average grades for each high schooler ? , and list by the y axis from low to high .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "and",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and display by the Continent from high to low .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC'}",
    "record_name": "3269@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and display by the Continent from high to low .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Continent",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many matches were played in each year , could you list total number in descending order please ?",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC'}",
    "record_name": "3288@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many matches were played in each year , could you list total number in descending order please ?",
    "question_toks": [
      "How",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      ",",
      "could",
      "you",
      "list",
      "total",
      "number",
      "in",
      "descending",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What about the average amounts of payments by each method code ? You can give me a bar chart , and could you rank in ascending by the the average of amount payment please ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC'}",
    "record_name": "2012@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What about the average amounts of payments by each method code ? You can give me a bar chart , and could you rank in ascending by the the average of amount payment please ?",
    "question_toks": [
      "What",
      "about",
      "the",
      "average",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code in a bar chart , show by the y axis from low to high please .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC'}",
    "record_name": "872@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all payment method codes and the number of orders for each code in a bar chart , show by the y axis from low to high please .",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "How many students are in each department Plot them as bar chart , rank x-axis in desc order .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "654@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many students are in each department Plot them as bar chart , rank x-axis in desc order .",
    "question_toks": [
      "How",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "rank",
      "x-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , order in asc by the y axis please .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC'}",
    "record_name": "2607@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , order in asc by the y axis please .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "y",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_from and the average of monthly_rental bin date_address_from by weekday in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "265",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_from and the average of monthly_rental bin date_address_from by weekday in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me a pie chart to reflect the proportion of state and enr .",
    "VQL": "Visualize PIE SELECT state , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT state , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize PIE SELECT state , enr FROM College ORDER BY enr'}",
    "record_name": "2793",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie chart to reflect the proportion of state and enr .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "chart",
      "to",
      "reflect",
      "the",
      "proportion",
      "of",
      "state",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize PIE SELECT state , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "state",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Bar chart of the total number from each year",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR'}",
    "record_name": "3288",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of the total number from each year",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "the",
      "total",
      "number",
      "from",
      "each",
      "year"
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "A line chart shows the trend of the sum of monthly_rental over date_address_to , and group by attribute other_details .",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "259",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "A line chart shows the trend of the sum of monthly_rental over date_address_to , and group by attribute other_details .",
    "question_toks": [
      "A",
      "line",
      "chart",
      "shows",
      "the",
      "trend",
      "of",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and show y axis in descending order .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC'}",
    "record_name": "2607@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , and show y axis in descending order .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "DESC"
    ]
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , order by the y axis in desc .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\"}",
    "record_name": "2030@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , order by the y axis in desc .",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "List",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "DESC"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing the total number across police force",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "db_id": "county_public_safety",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force'}",
    "record_name": "709",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing the total number across police force",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "across",
      "police",
      "force"
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force"
    ]
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year , and I want to display y axis from low to high order .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC', 'binning': 'BIN First_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY'}",
    "record_name": "2498@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        4,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year , and I want to display y axis from low to high order .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "first",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "the",
      "first",
      "year",
      ",",
      "and",
      "I",
      "want",
      "to",
      "display",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "First_year",
      ")",
      "ASC",
      "BIN",
      "First_year",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "How many rooms in each building have a capacity of over 50 . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building'}",
    "record_name": "620",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many rooms in each building have a capacity of over 50 . Visualize by bar chart .",
    "question_toks": [
      "How",
      "many",
      "rooms",
      "in",
      "each",
      "building",
      "have",
      "a",
      "capacity",
      "of",
      "over",
      "50",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "For the average of monthly_rental , date_address_to , visualize the trend .",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "241",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "For the average of monthly_rental , date_address_to , visualize the trend .",
    "question_toks": [
      "For",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "date_address_to",
      ",",
      "visualize",
      "the",
      "trend",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart , and display y-axis in asc order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart , and display y-axis in asc order .",
    "question_toks": [
      "Calculate",
      "the",
      "average",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "of",
      "each",
      "day",
      "of",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "y-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "How many students are in each department Plot them as bar chart , and order by the x axis from low to high .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "654@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many students are in each department Plot them as bar chart , and order by the x axis from low to high .",
    "question_toks": [
      "How",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Visualize a scatter chart about the correlation between address_id and monthly_rental .",
    "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Visualize a scatter chart about the correlation between address_id and monthly_rental .",
    "question_toks": [
      "Visualize",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "address_id",
      "and",
      "monthly_rental",
      "."
    ],
    "query": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "address_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements', 'binning': 'BIN Date_Claim_Settled BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY'}",
    "record_name": "2018",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the settlement date for each settlement case into the day of week interval and count them for visualizing a bar chart .",
    "question_toks": [
      "Bin",
      "the",
      "settlement",
      "date",
      "for",
      "each",
      "settlement",
      "case",
      "into",
      "the",
      "day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements BIN Date_Claim_Settled BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart , display by the y axis in ascending .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart , display by the y axis in ascending .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "y",
      "axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "196",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by time .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "A bar chart for what are the number of the dates of the assessment notes ?",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart for what are the number of the dates of the assessment notes ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?"
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many matches were played in each year ? , and display x-axis in asc order .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC'}",
    "record_name": "3288@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many matches were played in each year ? , and display x-axis in asc order .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?",
      ",",
      "and",
      "display",
      "x-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find other_details and the sum of monthly_rental , and group by attribute other_details , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "218",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find other_details and the sum of monthly_rental , and group by attribute other_details , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "other_details",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many matches were played in each year , and rank by the x-axis in desc .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC'}",
    "record_name": "3288@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many matches were played in each year , and rank by the x-axis in desc .",
    "question_toks": [
      "How",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "x-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ]
  },
  {
    "nl_queries": "Scatter plot to show length on x axis and height on y axis .",
    "VQL": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
    "db_id": "roller_coaster",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Length , Height FROM roller_coaster', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Length , Height FROM roller_coaster'}",
    "record_name": "2684",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Scatter plot to show length on x axis and height on y axis .",
    "question_toks": [
      "Scatter",
      "plot",
      "to",
      "show",
      "length",
      "on",
      "x",
      "axis",
      "and",
      "height",
      "on",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "Length",
      ",",
      "Height",
      "FROM",
      "roller_coaster"
    ]
  },
  {
    "nl_queries": "What is the proportion of the smallest enrollment in each state ?",
    "VQL": "Visualize PIE SELECT state , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize PIE SELECT state , min(enr) FROM college GROUP BY state'}",
    "record_name": "2799",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What is the proportion of the smallest enrollment in each state ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "proportion",
      "of",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      "?"
    ],
    "query": "Visualize PIE SELECT state , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "Find the maximum capacity among rooms in each building with a bar chart , rank by the X-axis from high to low .",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC'}",
    "record_name": "623@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the maximum capacity among rooms in each building with a bar chart , rank by the X-axis from high to low .",
    "question_toks": [
      "Find",
      "the",
      "maximum",
      "capacity",
      "among",
      "rooms",
      "in",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis nationality y axis the total number , sort in descending by the total number please .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis nationality y axis the total number , sort in descending by the total number please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "nationality",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "sort",
      "in",
      "descending",
      "by",
      "the",
      "total",
      "number",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the different product names ? What is the average product price for each of them ? , order by the X-axis from low to high .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC'}",
    "record_name": "859@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different product names ? What is the average product price for each of them ? , order by the X-axis from low to high .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?",
      ",",
      "order",
      "by",
      "the",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "Product_Name",
      "ASC"
    ]
  },
  {
    "nl_queries": "how many students are in each department ? , order X-axis in desc order .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "654@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "how many students are in each department ? , order X-axis in desc order .",
    "question_toks": [
      "how",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "?",
      ",",
      "order",
      "X-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the smallest enrollment of each state , and list in descending by the x-axis .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC'}",
    "record_name": "2800@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the smallest enrollment of each state , and list in descending by the x-axis .",
    "question_toks": [
      "Show",
      "the",
      "smallest",
      "enrollment",
      "of",
      "each",
      "state",
      ",",
      "and",
      "list",
      "in",
      "descending",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "state",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by time in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "195",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by time in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , list by the x axis from low to high please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC\"}",
    "record_name": "2030@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , list by the x axis from low to high please .",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "List",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis hand y axis the total number , show by the names from high to low .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC'}",
    "record_name": "3287@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis hand y axis the total number , show by the names from high to low .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "hand",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "show",
      "by",
      "the",
      "names",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "hand",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\"}",
    "record_name": "2030",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "distributing",
      "the",
      "payment",
      "date",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of dept_name and the sum of salary , and group by attribute dept_name .",
    "VQL": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "616",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of dept_name and the sum of salary , and group by attribute dept_name .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "sum",
      "of",
      "salary",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "SUM",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each payment method code , and could you display by the names in descending ?",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC'}",
    "record_name": "872@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each payment method code , and could you display by the names in descending ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "could",
      "you",
      "display",
      "by",
      "the",
      "names",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "payment_method_code",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize the relationship between address_id and monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "253",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Visualize the relationship between address_id and monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "Visualize",
      "the",
      "relationship",
      "between",
      "address_id",
      "and",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "address_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_to and the sum of monthly_rental bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "230",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_to and the sum of monthly_rental bin date_address_to by time .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Show the names and their average grades of each high schooler .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2453",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and their average grades of each high schooler .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "their",
      "average",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "Bar chart x axis nationality y axis the total number",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis nationality y axis the total number",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "nationality",
      "y",
      "axis",
      "the",
      "total",
      "number"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) . Show bar chart .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2607",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) . Show bar chart .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ]
  },
  {
    "nl_queries": "Bar chart of mean salary from each dept name",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name'}",
    "record_name": "627",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of mean salary from each dept name",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "mean",
      "salary",
      "from",
      "each",
      "dept",
      "name"
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Show the number of date of notes from each date of notes , could you rank in ascending by the total number ?",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the number of date of notes from each date of notes , could you rank in ascending by the total number ?",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "date",
      "of",
      "notes",
      "from",
      "each",
      "date",
      "of",
      "notes",
      ",",
      "could",
      "you",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "ASC",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me a histogram to show the date and the amount for all the payments processed with Visa .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\"}",
    "record_name": "2030",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram to show the date and the amount for all the payments processed with Visa .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "to",
      "show",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_from and the sum of monthly_rental bin date_address_from by weekday in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "264",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_from and the sum of monthly_rental bin date_address_from by weekday in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "A bar chart about what are the names and number of hours spent training for each player who trains for less than 1500 hours ? , and list by the X-axis from high to low .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC'}",
    "record_name": "2790@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the names and number of hours spent training for each player who trains for less than 1500 hours ? , and list by the X-axis from high to low .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      "?",
      ",",
      "and",
      "list",
      "by",
      "the",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "pName",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many players are there for each hand type . Show the proportion .",
    "VQL": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand', 'binning': ''}, 'VQL': 'Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand'}",
    "record_name": "3286",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many players are there for each hand type . Show the proportion .",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      ".",
      "Show",
      "the",
      "proportion",
      "."
    ],
    "query": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ]
  },
  {
    "nl_queries": "Find date_address_from and the amount of date_address_from bin date_address_from by time , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "233",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Find date_address_from and the amount of date_address_from bin date_address_from by time , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "time",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find the number of players for each hand type Show bar chart , sort by the x-axis in ascending .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC'}",
    "record_name": "3287@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of players for each hand type Show bar chart , sort by the x-axis in ascending .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "hand",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "sort",
      "by",
      "the",
      "x-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "hand",
      "ASC"
    ]
  },
  {
    "nl_queries": "How many students are in each department . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name'}",
    "record_name": "654",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many students are in each department . Plot them as bar chart .",
    "question_toks": [
      "How",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code in a bar chart , show by the payment_method_code in descending please .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC'}",
    "record_name": "872@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all payment method codes and the number of orders for each code in a bar chart , show by the payment_method_code in descending please .",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "by",
      "the",
      "payment_method_code",
      "in",
      "descending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "payment_method_code",
      "DESC"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , list total number in ascending order .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC'}",
    "record_name": "2607@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart , list total number in ascending order .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a line chart about the change of the amount of date_address_to over date_address_to , and group by attribute other_details .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "249",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Draw a line chart about the change of the amount of date_address_to over date_address_to , and group by attribute other_details .",
    "question_toks": [
      "Draw",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the different product names ? What is the average product price for each of them . Show bar chart .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name'}",
    "record_name": "859",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different product names ? What is the average product price for each of them . Show bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name"
    ]
  },
  {
    "nl_queries": "Find the number of rooms with more than 50 capacity for each building Show bar chart , and could you sort by the the total number in desc ?",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC'}",
    "record_name": "620@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of rooms with more than 50 capacity for each building Show bar chart , and could you sort by the the total number in desc ?",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "rooms",
      "with",
      "more",
      "than",
      "50",
      "capacity",
      "for",
      "each",
      "building",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "the",
      "total",
      "number",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , and sort X-axis from high to low order .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC'}",
    "record_name": "2503@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , and sort X-axis from high to low order .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" and bin by month .",
    "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_end BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"', 'binning': 'BIN date_incident_end BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_end BY MONTH'}",
    "record_name": "279",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        45,
        "month"
      ],
      "vis": 0
    },
    "question": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" and bin by month .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "the",
      "number",
      "of",
      "end",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "and",
      "bin",
      "by",
      "month",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_end BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_end",
      ",",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "BIN",
      "date_incident_end",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Please use a pie chart to show the proportion of the total amount of payment by each payment method code .",
    "VQL": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2013",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Please use a pie chart to show the proportion of the total amount of payment by each payment method code .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "pie",
      "chart",
      "to",
      "show",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      "."
    ],
    "query": "Visualize PIE SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "Visualize a scatter chart about the correlation between student_id and address_id , and group by attribute other_details .",
    "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "251",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Visualize a scatter chart about the correlation between student_id and address_id , and group by attribute other_details .",
    "question_toks": [
      "Visualize",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "address_id",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "address_id",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many total amounts of payments by each method code ? You can give me a bar chart , and I want to sort total number in asc order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC'}",
    "record_name": "2011@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many total amounts of payments by each method code ? You can give me a bar chart , and I want to sort total number in asc order .",
    "question_toks": [
      "How",
      "many",
      "total",
      "amounts",
      "of",
      "payments",
      "by",
      "each",
      "method",
      "code",
      "?",
      "You",
      "can",
      "give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "sort",
      "total",
      "number",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "List the name and assets of each company in ascending order of company name . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "db_id": "company_office",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , Assets_billion FROM Companies ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC'}",
    "record_name": "688",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the name and assets of each company in ascending order of company name . Plot them as bar chart .",
    "question_toks": [
      "List",
      "the",
      "name",
      "and",
      "assets",
      "of",
      "each",
      "company",
      "in",
      "ascending",
      "order",
      "of",
      "company",
      "name",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "Assets_billion",
      "FROM",
      "Companies",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me the trend about the sum of monthly_rental over date_address_to , and group by attribute date_address_to with a line chart .",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me the trend about the sum of monthly_rental over date_address_to , and group by attribute date_address_to with a line chart .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "trend",
      "about",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "with",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a bar graph for the name of the school that has the smallest enrollment in each state , and I want to rank by the Y-axis in desc .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC'}",
    "record_name": "2798@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar graph for the name of the school that has the smallest enrollment in each state , and I want to rank by the Y-axis in desc .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "graph",
      "for",
      "the",
      "name",
      "of",
      "the",
      "school",
      "that",
      "has",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "Y-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 . Visualize by bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for how many students are in each department ? , and sort from low to high by the bar .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "654@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for how many students are in each department ? , and sort from low to high by the bar .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "?",
      ",",
      "and",
      "sort",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name'}",
    "record_name": "619",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors . Plot them as bar chart .",
    "question_toks": [
      "Find",
      "the",
      "minimum",
      "salary",
      "for",
      "the",
      "departments",
      "whose",
      "average",
      "salary",
      "is",
      "above",
      "the",
      "average",
      "payment",
      "of",
      "all",
      "instructors",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and order in desc by the X-axis .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC'}",
    "record_name": "3275@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and order in desc by the X-axis .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "order",
      "in",
      "desc",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show all payment method codes and the number of orders for each code Show bar chart , and show from low to high by the Y-axis .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC'}",
    "record_name": "872@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show all payment method codes and the number of orders for each code Show bar chart , and show from low to high by the Y-axis .",
    "question_toks": [
      "Show",
      "all",
      "payment",
      "method",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "orders",
      "for",
      "each",
      "code",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the names and the average grades for each high schooler Plot them as a bar chart , could you display by the Y in asc ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC'}",
    "record_name": "2453@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and the average grades for each high schooler Plot them as a bar chart , could you display by the Y in asc ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "display",
      "by",
      "the",
      "Y",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by weekday , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "224",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by weekday , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What is the relationship between average and greatest capacity for rooms in each building ? Show me a scatter chart .",
    "VQL": "Visualize SCATTER SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building'}",
    "record_name": "622",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "What is the relationship between average and greatest capacity for rooms in each building ? Show me a scatter chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "relationship",
      "between",
      "average",
      "and",
      "greatest",
      "capacity",
      "for",
      "rooms",
      "in",
      "each",
      "building",
      "?",
      "Show",
      "me",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT max(capacity) , avg(capacity) FROM classroom GROUP BY building",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "max",
      "(",
      "capacity",
      ")",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of other_details and the sum of monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "218",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of other_details and the sum of monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the name of the school that has the smallest enrollment in each state ? , and show from high to low by the X-axis .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC'}",
    "record_name": "2798@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the name of the school that has the smallest enrollment in each state ? , and show from high to low by the X-axis .",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "school",
      "that",
      "has",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      "?",
      ",",
      "and",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "cName",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give the proportion of what are the different product names ? What is the average product price for each of them ?",
    "VQL": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name'}",
    "record_name": "858",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give the proportion of what are the different product names ? What is the average product price for each of them ?",
    "question_toks": [
      "Give",
      "the",
      "proportion",
      "of",
      "what",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "?"
    ],
    "query": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name"
    ]
  },
  {
    "nl_queries": "Return a histogram on what are the names and areas of countries with the top 5 largest area ?",
    "VQL": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3277",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on what are the names and areas of countries with the top 5 largest area ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "what",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "query": "Visualize BAR SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "201",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many hosts does each nationality have ? List the nationality and the count .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "Show the trend about the total amount of each payment about the payment day , line chart . Note that , you should order the payment day in ascending order .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2014",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the total amount of each payment about the payment day , line chart . Note that , you should order the payment day in ascending order .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "total",
      "amount",
      "of",
      "each",
      "payment",
      "about",
      "the",
      "payment",
      "day",
      ",",
      "line",
      "chart",
      ".",
      "Note",
      "that",
      ",",
      "you",
      "should",
      "order",
      "the",
      "payment",
      "day",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average , show by the bar in ascending .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "619@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average , show by the bar in ascending .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      ",",
      "show",
      "by",
      "the",
      "bar",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for how many counties correspond to each police force ?",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "db_id": "county_public_safety",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force'}",
    "record_name": "709",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many counties correspond to each police force ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?"
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force"
    ]
  },
  {
    "nl_queries": "Bar chart x axis date of latest revision y axis the number of date of latest revision",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date of latest revision y axis the number of date of latest revision",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "of",
      "latest",
      "revision",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision"
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the name and training hours of players whose hours are below 1500 . Plot them as pie chart .",
    "VQL": "Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500', 'binning': ''}, 'VQL': 'Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500'}",
    "record_name": "2789",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Find the name and training hours of players whose hours are below 1500 . Plot them as pie chart .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "training",
      "hours",
      "of",
      "players",
      "whose",
      "hours",
      "are",
      "below",
      "1500",
      ".",
      "Plot",
      "them",
      "as",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT pName , HS FROM Player WHERE HS < 1500",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500"
    ]
  },
  {
    "nl_queries": "Find the total number of students in each department Show bar chart , and I want to show by the X-axis from low to high .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "654@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the total number of students in each department Show bar chart , and I want to show by the X-axis from low to high .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "students",
      "in",
      "each",
      "department",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "by",
      "the",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show all the actual delivery dates and bin by year in a line chart .",
    "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS', 'binning': 'BIN Actual_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY YEAR'}",
    "record_name": "864",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "year"
      ],
      "vis": 2
    },
    "question": "Show all the actual delivery dates and bin by year in a line chart .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "actual",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "year",
      "in",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name'}",
    "record_name": "619",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_from and the average of monthly_rental bin date_address_from by time in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "247",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_from and the average of monthly_rental bin date_address_from by time in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "time",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of other_details and the amount of other_details , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "203",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart shows the distribution of other_details and the amount of other_details , and group by attribute other_details .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "amount",
      "of",
      "other_details",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "COUNT",
      "(",
      "other_details",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 , rank by the bars in asc .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC'}",
    "record_name": "2605@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 , rank by the bars in asc .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      ",",
      "rank",
      "by",
      "the",
      "bars",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me the trend about monthly_rental over date_address_from .",
    "VQL": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "267",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Give me the trend about monthly_rental over date_address_from .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "trend",
      "about",
      "monthly_rental",
      "over",
      "date_address_from",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_from",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "List the name and assets of each company in ascending order of company name in a bar chart .",
    "VQL": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "db_id": "company_office",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , Assets_billion FROM Companies ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC'}",
    "record_name": "688",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the name and assets of each company in ascending order of company name in a bar chart .",
    "question_toks": [
      "List",
      "the",
      "name",
      "and",
      "assets",
      "of",
      "each",
      "company",
      "in",
      "ascending",
      "order",
      "of",
      "company",
      "name",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "Assets_billion",
      "FROM",
      "Companies",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of other_details and the average of monthly_rental , and group by attribute other_details in a bar chart .",
    "VQL": "Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "219",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me about the distribution of other_details and the average of monthly_rental , and group by attribute other_details in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "202",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show the names and their average grades of each high schooler , and could you order from low to high by the total number please ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC'}",
    "record_name": "2453@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and their average grades of each high schooler , and could you order from low to high by the total number please ?",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "their",
      "average",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      ",",
      "and",
      "could",
      "you",
      "order",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "A bar chart about what are the names and number of hours spent training for each player who trains for less than 1500 hours ? , show pName in asc order .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC'}",
    "record_name": "2790@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the names and number of hours spent training for each player who trains for less than 1500 hours ? , show pName in asc order .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      "?",
      ",",
      "show",
      "pName",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "pName",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , could you list x axis in desc order ?",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC'}",
    "record_name": "2607@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart , could you list x axis in desc order ?",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "products",
      "with",
      "price",
      "greater",
      "than",
      "700",
      "(in",
      "USD)",
      "Show",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "list",
      "x",
      "axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "A line chart for what are the number of the dates of the assessment notes ?",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR'}",
    "record_name": "188",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "A line chart for what are the number of the dates of the assessment notes ?",
    "question_toks": [
      "A",
      "line",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?"
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing how many location across location , could you rank from high to low by the names ?",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC'}",
    "record_name": "2507@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing how many location across location , could you rank from high to low by the names ?",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "how",
      "many",
      "location",
      "across",
      "location",
      ",",
      "could",
      "you",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "names",
      "?"
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "Location",
      "DESC"
    ]
  },
  {
    "nl_queries": "Count the names of each high schooler using a bar chart .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name'}",
    "record_name": "2451",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the names of each high schooler using a bar chart .",
    "question_toks": [
      "Count",
      "the",
      "names",
      "of",
      "each",
      "high",
      "schooler",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "Show the names and their average grades of each high schooler with a bar chart .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2453",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and their average grades of each high schooler with a bar chart .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "their",
      "average",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "Visualize the relationship between address_id and monthly_rental .",
    "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Visualize the relationship between address_id and monthly_rental .",
    "question_toks": [
      "Visualize",
      "the",
      "relationship",
      "between",
      "address_id",
      "and",
      "monthly_rental",
      "."
    ],
    "query": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "address_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find the name and level of catalog structure with level between 5 and 10 , could you sort by the catalog_level_name from high to low ?",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC'}",
    "record_name": "2605@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and level of catalog structure with level between 5 and 10 , could you sort by the catalog_level_name from high to low ?",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "between",
      "5",
      "and",
      "10",
      ",",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "catalog_level_name",
      "from",
      "high",
      "to",
      "low",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "A scatter chart shows the correlation between address_id and monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "253",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "A scatter chart shows the correlation between address_id and monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "A",
      "scatter",
      "chart",
      "shows",
      "the",
      "correlation",
      "between",
      "address_id",
      "and",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "address_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a line chart about the change of the amount of date_address_to over date_address_to , and group by attribute date_address_to .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "266",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Visualize a line chart about the change of the amount of date_address_to over date_address_to , and group by attribute date_address_to .",
    "question_toks": [
      "Visualize",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bin the claim date into the Year interval and count them for visualizing a bar chart , and show in desc by the y-axis .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Year interval and count them for visualizing a bar chart , and show in desc by the y-axis .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "in",
      "desc",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what are the names and average salaries for departments with average salary higher than 42000 ? , list in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC'}",
    "record_name": "627@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the names and average salaries for departments with average salary higher than 42000 ? , list in ascending by the y axis .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "?",
      ",",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "salary",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY'}",
    "record_name": "1998",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the day of the week interval and then shows the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "day",
      "of",
      "the",
      "week",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Bar graph to show the average of amount payment from different payment method code , rank Payment_Method_Code in asc order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2012@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the average of amount payment from different payment method code , rank Payment_Method_Code in asc order .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "different",
      "payment",
      "method",
      "code",
      ",",
      "rank",
      "Payment_Method_Code",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by weekday in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "224",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by weekday in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the amount of date_address_from over the date_address_from , and group by attribute other_details and bin date_address_from by weekday by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "212",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the amount of date_address_from over the date_address_from , and group by attribute other_details and bin date_address_from by weekday by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "amount",
      "of",
      "date_address_from",
      "over",
      "the",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me about the change of the average of monthly_rental over date_address_to , and group by attribute other_details in a line chart .",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "241",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show me about the change of the average of monthly_rental over date_address_to , and group by attribute other_details in a line chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "change",
      "of",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "in",
      "a",
      "line",
      "chart",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find date_address_from and the amount of date_address_from bin date_address_from by weekday , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "248",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find date_address_from and the amount of date_address_from bin date_address_from by weekday , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a scatter chart about the correlation between student_id and monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "240",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Return a scatter chart about the correlation between student_id and monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "Return",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? Get the payment Id , the date and the amount for visualizing a scatter chart .",
    "VQL": "Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': \"SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\", 'binning': ''}, 'VQL': \"Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'\"}",
    "record_name": "2032",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Which Payments were processed with Visa ? Get the payment Id , the date and the amount for visualizing a scatter chart .",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "Get",
      "the",
      "payment",
      "Id",
      ",",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "for",
      "visualizing",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT Payment_ID , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "Payment_ID",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'"
    ]
  },
  {
    "nl_queries": "What is the order date of each booking , and count them by a line chart",
    "VQL": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS', 'binning': 'BIN Order_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR'}",
    "record_name": "861",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "year"
      ],
      "vis": 2
    },
    "question": "What is the order date of each booking , and count them by a line chart",
    "question_toks": [
      "What",
      "is",
      "the",
      "order",
      "date",
      "of",
      "each",
      "booking",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "line",
      "chart"
    ],
    "query": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Order_Date",
      ",",
      "COUNT",
      "(",
      "Order_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Order_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many total credits are offered by each department ? , sort by the bar in desc .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "621@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many total credits are offered by each department ? , sort by the bar in desc .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "bar",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show sum(population) vs mean lifeexpectancy as scatter plot use a different color for each Continent",
    "VQL": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show sum(population) vs mean lifeexpectancy as scatter plot use a different color for each Continent",
    "question_toks": [
      "Show",
      "sum(population)",
      "vs",
      "mean",
      "lifeexpectancy",
      "as",
      "scatter",
      "plot",
      "use",
      "a",
      "different",
      "color",
      "for",
      "each",
      "Continent"
    ],
    "query": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ]
  },
  {
    "nl_queries": "Show the names and the total grades of each high schooler by a bar chart , list by the total number in descending .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC'}",
    "record_name": "2452@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and the total grades of each high schooler by a bar chart , list by the total number in descending .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "the",
      "total",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "by",
      "the",
      "total",
      "number",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many students in each department ? Give me a bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM student GROUP BY dept_name ORDER BY tot_cred",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , COUNT(dept_name) FROM student GROUP BY dept_name ORDER BY tot_cred', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , COUNT(dept_name) FROM student GROUP BY dept_name ORDER BY tot_cred'}",
    "record_name": "658",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many students in each department ? Give me a bar chart .",
    "question_toks": [
      "How",
      "many",
      "students",
      "in",
      "each",
      "department",
      "?",
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM student GROUP BY dept_name ORDER BY tot_cred",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "COUNT",
      "(",
      "dept_name",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "tot_cred"
    ]
  },
  {
    "nl_queries": "compare the number of companies from different industries using a pie chart .",
    "VQL": "Visualize PIE SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
    "db_id": "company_office",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry'}",
    "record_name": "684",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "compare the number of companies from different industries using a pie chart .",
    "question_toks": [
      "compare",
      "the",
      "number",
      "of",
      "companies",
      "from",
      "different",
      "industries",
      "using",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry"
    ]
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , and rank in descending by the x-axis .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC'}",
    "record_name": "3269@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , and rank in descending by the x-axis .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "and",
      "rank",
      "in",
      "descending",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Visualize a scatter chart about the correlation between student_id and monthly_rental .",
    "VQL": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Visualize a scatter chart about the correlation between student_id and monthly_rental .",
    "question_toks": [
      "Visualize",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "monthly_rental",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart , list in desc by the total number .",
    "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) DESC BIN date_incident_end BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) DESC', 'binning': 'BIN date_incident_end BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) DESC BIN date_incident_end BY WEEKDAY'}",
    "record_name": "282@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              45,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        45,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart , list in desc by the total number .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "start",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      "Bin",
      "by",
      "weekday",
      "and",
      "return",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) DESC BIN date_incident_end BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_end",
      ",",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "DESC",
      "BIN",
      "date_incident_end",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the number of players for each hand type Show bar chart , I want to sort X-axis in desc order .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC'}",
    "record_name": "3287@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of players for each hand type Show bar chart , I want to sort X-axis in desc order .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "hand",
      "type",
      "Show",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "X-axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "hand",
      "DESC"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made , and could you order in asc by the Y-axis ?",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made , and could you order in asc by the Y-axis ?",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made",
      ",",
      "and",
      "could",
      "you",
      "order",
      "in",
      "asc",
      "by",
      "the",
      "Y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" ?",
    "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end', 'binning': ''}, 'VQL': 'Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end'}",
    "record_name": "280",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          45,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "the",
      "number",
      "of",
      "end",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?"
    ],
    "query": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_end",
      ",",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "GROUP",
      "BY",
      "date_incident_end"
    ]
  },
  {
    "nl_queries": "Show me about the correlation between student_id and address_id in a scatter chart .",
    "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "274",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show me about the correlation between student_id and address_id in a scatter chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "address_id",
      "in",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "address_id",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled , rank from high to low by the Y-axis .",
    "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC', 'binning': 'BIN Date_Claim_Settled BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR'}",
    "record_name": "2017@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        11,
        "year"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date claim settled y axis the number of date claim settled , rank from high to low by the Y-axis .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "claim",
      "settled",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "settled",
      ",",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) DESC BIN Date_Claim_Settled BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Settled",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of cName and enr .",
    "VQL": "Visualize BAR SELECT cName , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , enr FROM College ORDER BY enr'}",
    "record_name": "2792",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of cName and enr .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "cName",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize BAR SELECT cName , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Bar chart x axis hand y axis the total number , display by the x axis from low to high .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC'}",
    "record_name": "3287@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis hand y axis the total number , display by the x axis from low to high .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "hand",
      "y",
      "axis",
      "the",
      "total",
      "number",
      ",",
      "display",
      "by",
      "the",
      "x",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "hand",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart of mean salary from each dept name , and rank by the X-axis in desc .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "627@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of mean salary from each dept name , and rank by the X-axis in desc .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "mean",
      "salary",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "X-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find date_address_from and the average of monthly_rental bin date_address_from by weekday , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "265",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find date_address_from and the average of monthly_rental bin date_address_from by weekday , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "I want to see trend of the number of date of notes by date of notes , order X in descending order .",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR'}",
    "record_name": "188@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "I want to see trend of the number of date of notes by date of notes , order X in descending order .",
    "question_toks": [
      "I",
      "want",
      "to",
      "see",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "date",
      "of",
      "notes",
      "by",
      "date",
      "of",
      "notes",
      ",",
      "order",
      "X",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "date_of_notes",
      "DESC",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "212",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by weekday .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "A line chart shows the trend of the sum of monthly_rental over date_address_to , and group by attribute date_address_to .",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "A line chart shows the trend of the sum of monthly_rental over date_address_to , and group by attribute date_address_to .",
    "question_toks": [
      "A",
      "line",
      "chart",
      "shows",
      "the",
      "trend",
      "of",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad in a bar chart .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code'}",
    "record_name": "872",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the distinct payment method codes with the number of orders mad in a bar chart .",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "210",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count in a pie chart .",
    "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2502",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count in a pie chart .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "in",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "Give me the comparison about enr over the state by a bar chart .",
    "VQL": "Visualize BAR SELECT state , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , enr FROM College ORDER BY enr'}",
    "record_name": "2794",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me the comparison about enr over the state by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "enr",
      "over",
      "the",
      "state",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT state , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code , and could you show total number in descending order ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC'}",
    "record_name": "2012@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the average amount of payment by each payment method code , and could you show total number in descending order ?",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "could",
      "you",
      "show",
      "total",
      "number",
      "in",
      "descending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many matches were played in each year ? , could you sort in desc by the y-axis ?",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC'}",
    "record_name": "3288@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many matches were played in each year ? , could you sort in desc by the y-axis ?",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?",
      ",",
      "could",
      "you",
      "sort",
      "in",
      "desc",
      "by",
      "the",
      "y-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart for what are the names and the average grades for each high schooler ? , and list by the y axis from low to high .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC'}",
    "record_name": "2453@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the names and the average grades for each high schooler ? , and list by the y axis from low to high .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "and",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year .",
    "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN First_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"', 'binning': 'BIN First_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN First_year BY WEEKDAY'}",
    "record_name": "2498",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        4,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the first year into weekday interval and count the first year .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "first",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "first",
      "year",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "the",
      "first",
      "year",
      "."
    ],
    "query": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN First_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "First_year",
      ",",
      "COUNT",
      "(",
      "First_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "BIN",
      "First_year",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of dept_name and the average of salary , and group by attribute dept_name .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "617",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of dept_name and the average of salary , and group by attribute dept_name .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "average",
      "of",
      "salary",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_to and the sum of monthly_rental bin date_address_to by weekday in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "238",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_to and the sum of monthly_rental bin date_address_to by weekday in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "How many players are there for each hand type Visualize by bar chart , and could you sort by the bar in descending ?",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC'}",
    "record_name": "3287@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many players are there for each hand type Visualize by bar chart , and could you sort by the bar in descending ?",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "bar",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "hand",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart .",
    "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_end BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"', 'binning': 'BIN date_incident_end BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_end BY WEEKDAY'}",
    "record_name": "282",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        45,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "start",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      "Bin",
      "by",
      "weekday",
      "and",
      "return",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_end BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_end",
      ",",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "BIN",
      "date_incident_end",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what are the names and the average grades for each high schooler ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "db_id": "network_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name'}",
    "record_name": "2453",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the names and the average grades for each high schooler ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name"
    ]
  },
  {
    "nl_queries": "Find state and enr , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT state , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , enr FROM College ORDER BY enr'}",
    "record_name": "2794",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find state and enr , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "state",
      "and",
      "enr",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT state , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank by the x-axis from low to high .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ? , and rank by the x-axis from low to high .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "x-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis , and list in asc by the total number .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2036@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the average amount payment as the Y-axis , and list in asc by the total number .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "average",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "and",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the sum of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by weekday by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "224",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the sum of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by weekday by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Draw a bar chart for how many total credits are offered by each department ? , and rank bar from high to low order .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "621@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for how many total credits are offered by each department ? , and rank bar from high to low order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "total",
      "credits",
      "are",
      "offered",
      "by",
      "each",
      "department",
      "?",
      ",",
      "and",
      "rank",
      "bar",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and their total grades for each high schooler ? Show me the result using a bar chart , I want to sort by the y-axis in asc .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC'}",
    "record_name": "2452@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and their total grades for each high schooler ? Show me the result using a bar chart , I want to sort by the y-axis in asc .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "their",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      "Show",
      "me",
      "the",
      "result",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "by",
      "the",
      "y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find date_address_from and the sum of monthly_rental bin date_address_from by weekday , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "264",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find date_address_from and the sum of monthly_rental bin date_address_from by weekday , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Can you draw the trend of the number of actual delivery date over the actual delivery date ? , order X-axis from high to low order .",
    "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC', 'binning': 'BIN Actual_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR'}",
    "record_name": "864@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "year"
      ],
      "vis": 2
    },
    "question": "Can you draw the trend of the number of actual delivery date over the actual delivery date ? , order X-axis from high to low order .",
    "question_toks": [
      "Can",
      "you",
      "draw",
      "the",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "actual",
      "delivery",
      "date",
      "over",
      "the",
      "actual",
      "delivery",
      "date",
      "?",
      ",",
      "order",
      "X-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Actual_Delivery_Date",
      "DESC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Give me a bar chart , that group by location and count them , rank x axis in ascending order .",
    "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC'}",
    "record_name": "2507@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart , that group by location and count them , rank x axis in ascending order .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      ",",
      "that",
      "group",
      "by",
      "location",
      "and",
      "count",
      "them",
      ",",
      "rank",
      "x",
      "axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Location",
      ",",
      "COUNT",
      "(",
      "Location",
      ")",
      "FROM",
      "party",
      "GROUP",
      "BY",
      "Location",
      "ORDER",
      "BY",
      "Location",
      "ASC"
    ]
  },
  {
    "nl_queries": "For each distinct product name , show its average product price .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name'}",
    "record_name": "859",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each distinct product name , show its average product price .",
    "question_toks": [
      "For",
      "each",
      "distinct",
      "product",
      "name",
      ",",
      "show",
      "its",
      "average",
      "product",
      "price",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "210",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the number of courses provided in each year with a group line chart that groups by semester .",
    "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , count(*) FROM SECTION GROUP BY semester ,  year', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year'}",
    "record_name": "647",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ],
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Find the number of courses provided in each year with a group line chart that groups by semester .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "courses",
      "provided",
      "in",
      "each",
      "year",
      "with",
      "a",
      "group",
      "line",
      "chart",
      "that",
      "groups",
      "by",
      "semester",
      "."
    ],
    "query": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "year"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the sum of monthly_rental over the date_address_from bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "246",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the sum of monthly_rental over the date_address_from bin date_address_from by time .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "List the order dates of all the bookings , and count them by a line chart",
    "VQL": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS', 'binning': 'BIN Order_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR'}",
    "record_name": "861",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "year"
      ],
      "vis": 2
    },
    "question": "List the order dates of all the bookings , and count them by a line chart",
    "question_toks": [
      "List",
      "the",
      "order",
      "dates",
      "of",
      "all",
      "the",
      "bookings",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "line",
      "chart"
    ],
    "query": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Order_Date",
      ",",
      "COUNT",
      "(",
      "Order_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Order_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "What is the number of end dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart , and order in ascending by the y-axis .",
    "VQL": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) ASC BIN date_incident_start BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) ASC', 'binning': 'BIN date_incident_start BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) ASC BIN date_incident_start BY WEEKDAY'}",
    "record_name": "283@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              44,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        44,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What is the number of end dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart , and order in ascending by the y-axis .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "end",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      "Bin",
      "by",
      "weekday",
      "and",
      "return",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) ASC BIN date_incident_start BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_start",
      ",",
      "COUNT",
      "(",
      "date_incident_start",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_incident_start",
      ")",
      "ASC",
      "BIN",
      "date_incident_start",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart , and sort total number in ascending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart , and sort total number in ascending order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "day",
      "of",
      "the",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for how many students are in each department ? , and show in descending by the names .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "654@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for how many students are in each department ? , and show in descending by the names .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "?",
      ",",
      "and",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "names",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "A line chart shows the trend of the amount of date_address_to over date_address_to , and group by attribute other_details .",
    "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "249",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ],
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "A line chart shows the trend of the amount of date_address_to over date_address_to , and group by attribute other_details .",
    "question_toks": [
      "A",
      "line",
      "chart",
      "shows",
      "the",
      "trend",
      "of",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      ",",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many departments for each building ? Draw a bar chart .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building'}",
    "record_name": "625",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many departments for each building ? Draw a bar chart .",
    "question_toks": [
      "How",
      "many",
      "departments",
      "for",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "For each distinct product name , show its average product price . Plot them as pie chart .",
    "VQL": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name'}",
    "record_name": "858",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "For each distinct product name , show its average product price . Plot them as pie chart .",
    "question_toks": [
      "For",
      "each",
      "distinct",
      "product",
      "name",
      ",",
      "show",
      "its",
      "average",
      "product",
      "price",
      ".",
      "Plot",
      "them",
      "as",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "212",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by weekday .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "amount",
      "of",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "COUNT",
      "(",
      "date_address_from",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of other_details and the average of monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "219",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of other_details and the average of monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_from and the sum of monthly_rental bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "264",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_from and the sum of monthly_rental bin date_address_from by weekday .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis , and rank Y-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2035@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis , and rank Y-axis in ascending order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "and",
      "rank",
      "Y-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , list from high to low by the total number .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC'}",
    "record_name": "3269@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , list from high to low by the total number .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "list",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "total",
      "number",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "A bar chart about what are the names and number of hours spent training for each player who trains for less than 1500 hours ?",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500'}",
    "record_name": "2790",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about what are the names and number of hours spent training for each player who trains for less than 1500 hours ?",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "what",
      "are",
      "the",
      "names",
      "and",
      "number",
      "of",
      "hours",
      "spent",
      "training",
      "for",
      "each",
      "player",
      "who",
      "trains",
      "for",
      "less",
      "than",
      "1500",
      "hours",
      "?"
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500"
    ]
  },
  {
    "nl_queries": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , display by the names from low to high please .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC'}",
    "record_name": "2607@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , display by the names from low to high please .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "display",
      "by",
      "the",
      "names",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "catalog_entry_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the trend about the frequency of the claim dates .",
    "VQL": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled'}",
    "record_name": "2021",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          17,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Show the trend about the frequency of the claim dates .",
    "question_toks": [
      "Show",
      "the",
      "trend",
      "about",
      "the",
      "frequency",
      "of",
      "the",
      "claim",
      "dates",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements GROUP BY Date_Claim_Settled",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Claim_Settled",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Settled",
      ")",
      "FROM",
      "Settlements",
      "GROUP",
      "BY",
      "Date_Claim_Settled"
    ]
  },
  {
    "nl_queries": "A line chart shows the change of the sum of monthly_rental over date_address_to , and group by attribute date_address_to",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "A line chart shows the change of the sum of monthly_rental over date_address_to , and group by attribute date_address_to",
    "question_toks": [
      "A",
      "line",
      "chart",
      "shows",
      "the",
      "change",
      "of",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to"
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Sum the amount for all the payments processed with Visa by each year using a bar chart , and rank by the y-axis in asc .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Sum the amount for all the payments processed with Visa by each year using a bar chart , and rank by the y-axis in asc .",
    "question_toks": [
      "Sum",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "by",
      "each",
      "year",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many players are there for each hand type ? , sort by the x-axis in ascending .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC'}",
    "record_name": "3287@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many players are there for each hand type ? , sort by the x-axis in ascending .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "x-axis",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "hand",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many matches were played in each year ? , rank by the x-axis in desc .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC'}",
    "record_name": "3288@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many matches were played in each year ? , rank by the x-axis in desc .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?",
      ",",
      "rank",
      "by",
      "the",
      "x-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "year",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize the relationship between ID and salary .",
    "VQL": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT ID , salary FROM instructor ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary'}",
    "record_name": "618",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Visualize the relationship between ID and salary .",
    "question_toks": [
      "Visualize",
      "the",
      "relationship",
      "between",
      "ID",
      "and",
      "salary",
      "."
    ],
    "query": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "ID",
      ",",
      "salary",
      "FROM",
      "instructor",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy , and could you show from low to high by the total number ?",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC'}",
    "record_name": "3269@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart of continent versus mean lifeexpectancy , and could you show from low to high by the total number ?",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "of",
      "continent",
      "versus",
      "mean",
      "lifeexpectancy",
      ",",
      "and",
      "could",
      "you",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a bar graph for the name of the school that has the smallest enrollment in each state , and list total number in asc order .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC'}",
    "record_name": "2798@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar graph for the name of the school that has the smallest enrollment in each state , and list total number in asc order .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "graph",
      "for",
      "the",
      "name",
      "of",
      "the",
      "school",
      "that",
      "has",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      ",",
      "and",
      "list",
      "total",
      "number",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "A line chart shows the change of monthly_rental over date_address_from",
    "VQL": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "267",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "A line chart shows the change of monthly_rental over date_address_from",
    "question_toks": [
      "A",
      "line",
      "chart",
      "shows",
      "the",
      "change",
      "of",
      "monthly_rental",
      "over",
      "date_address_from"
    ],
    "query": "Visualize LINE SELECT date_address_from , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_from",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the names and their total grades for each high schooler ? , and show by the y-axis from high to low please .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC'}",
    "record_name": "2452@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the names and their total grades for each high schooler ? , and show by the y-axis from high to low please .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "their",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "and",
      "show",
      "by",
      "the",
      "y-axis",
      "from",
      "high",
      "to",
      "low",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many players are there for each hand type ?",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand'}",
    "record_name": "3287",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many players are there for each hand type ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?"
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ]
  },
  {
    "nl_queries": "Find the average capacity among rooms in each building with a bar chart , and order in ascending by the y axis please .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC'}",
    "record_name": "624@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the average capacity among rooms in each building with a bar chart , and order in ascending by the y axis please .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "capacity",
      "among",
      "rooms",
      "in",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "avg",
      "(",
      "capacity",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of other_details and the amount of other_details , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "203",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of other_details and the amount of other_details , and group by attribute other_details .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "amount",
      "of",
      "other_details",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "COUNT",
      "(",
      "other_details",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a bar chart on how many students participated in tryouts for each college by descennding count ?",
    "VQL": "Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC'}",
    "record_name": "2802",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on how many students participated in tryouts for each college by descennding count ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "how",
      "many",
      "students",
      "participated",
      "in",
      "tryouts",
      "for",
      "each",
      "college",
      "by",
      "descennding",
      "count",
      "?"
    ],
    "query": "Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "tryout",
      "GROUP",
      "BY",
      "cName",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the names and their average grades of each high schooler with a bar chart , list in asc by the x axis .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2453@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and their average grades of each high schooler with a bar chart , list in asc by the x axis .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "their",
      "average",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "x",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the number of the dates of the assessment notes ? , and could you list by the X-axis from low to high please ?",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR'}",
    "record_name": "188@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "What are the number of the dates of the assessment notes ? , and could you list by the X-axis from low to high please ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?",
      ",",
      "and",
      "could",
      "you",
      "list",
      "by",
      "the",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "please",
      "?"
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "date_of_notes",
      "ASC",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , order in descending by the Y-axis please .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many hosts does each nationality have ? List the nationality and the count Visualize by bar chart , order in descending by the Y-axis please .",
    "question_toks": [
      "How",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "order",
      "in",
      "descending",
      "by",
      "the",
      "Y-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart for what are the names and the average grades for each high schooler ? , sort Y from high to low order .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC'}",
    "record_name": "2453@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the names and the average grades for each high schooler ? , sort Y from high to low order .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "sort",
      "Y",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the amount of date_address_to over the date_address_to bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "205",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the amount of date_address_to over the date_address_to bin date_address_to by time .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "amount",
      "of",
      "date_address_to",
      "over",
      "the",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "db_id": "party_host",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality'}",
    "record_name": "2503",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality . Visualize by bar chart .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality"
    ]
  },
  {
    "nl_queries": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart .",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find the dates on which more than one revisions were made , and the bin the date of latest revision into weekday interval and count them as a bar chart .",
    "question_toks": [
      "Find",
      "the",
      "dates",
      "on",
      "which",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      ",",
      "and",
      "the",
      "bin",
      "the",
      "date",
      "of",
      "latest",
      "revision",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the total credits of courses provided by different department Plot them as bar chart , and display Y in asc order .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC'}",
    "record_name": "621@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the total credits of courses provided by different department Plot them as bar chart , and display Y in asc order .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "credits",
      "of",
      "courses",
      "provided",
      "by",
      "different",
      "department",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "Y",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "sum",
      "(",
      "credits",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the average of monthly_rental over the date_address_from bin date_address_from by weekday .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY'}",
    "record_name": "265",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the average of monthly_rental over the date_address_from bin date_address_from by weekday .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_from",
      "bin",
      "date_address_from",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Bar chart x axis name y axis total number of grade , show by the bar in ascending .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2452@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis name y axis total number of grade , show by the bar in ascending .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "name",
      "y",
      "axis",
      "total",
      "number",
      "of",
      "grade",
      ",",
      "show",
      "by",
      "the",
      "bar",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar graph to show the number of name from different name , list bar from low to high order .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2451@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of name from different name , list bar from low to high order .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "name",
      "from",
      "different",
      "name",
      ",",
      "list",
      "bar",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart , sort from low to high by the y-axis please .",
    "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) ASC BIN date_incident_end BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) ASC', 'binning': 'BIN date_incident_end BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) ASC BIN date_incident_end BY WEEKDAY'}",
    "record_name": "282@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              45,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        45,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by weekday and return a bar chart , sort from low to high by the y-axis please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "start",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      "Bin",
      "by",
      "weekday",
      "and",
      "return",
      "a",
      "bar",
      "chart",
      ",",
      "sort",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "y-axis",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_end) ASC BIN date_incident_end BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_end",
      ",",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_incident_end",
      ")",
      "ASC",
      "BIN",
      "date_incident_end",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_from and the sum of monthly_rental bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "246",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_from and the sum of monthly_rental bin date_address_from by time .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Return a bar chart on how many counties correspond to each police force ? , display in descending by the Police_force please .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC'}",
    "record_name": "709@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on how many counties correspond to each police force ? , display in descending by the Police_force please .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?",
      ",",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "Police_force",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "Police_force",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the names and their average grades of each high schooler , could you list in desc by the y axis ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC'}",
    "record_name": "2453@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and their average grades of each high schooler , could you list in desc by the y axis ?",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "their",
      "average",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      ",",
      "could",
      "you",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "y",
      "axis",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a trend line with sorting the payment day in ascending order to show the average amount of payment by each payment day .",
    "VQL": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC'}",
    "record_name": "2015",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a trend line with sorting the payment day in ascending order to show the average amount of payment by each payment day .",
    "question_toks": [
      "Return",
      "a",
      "trend",
      "line",
      "with",
      "sorting",
      "the",
      "payment",
      "day",
      "in",
      "ascending",
      "order",
      "to",
      "show",
      "the",
      "average",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "day",
      "."
    ],
    "query": "Visualize LINE SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Date_Payment_Made",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 . Show a pie chart .",
    "VQL": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2604",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 . Show a pie chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      ".",
      "Show",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ]
  },
  {
    "nl_queries": "Show the names and the total grades of each high schooler by a bar chart , display y axis in asc order .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC'}",
    "record_name": "2452@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the names and the total grades of each high schooler by a bar chart , display y axis in asc order .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "the",
      "total",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "by",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "y",
      "axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the number of matches happened in each year . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR'}",
    "record_name": "3288",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of matches happened in each year . Plot them as bar chart .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "matches",
      "happened",
      "in",
      "each",
      "year",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many players are there for each hand type ? , and sort in asc by the bar .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC'}",
    "record_name": "3287@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many players are there for each hand type ? , and sort in asc by the bar .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?",
      ",",
      "and",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "hand",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and list names in desc order please .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC'}",
    "record_name": "2605@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart , and list names in desc order please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "names",
      "in",
      "desc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Compare the frequency of each payment method code using a bar chart , and could you display x-axis in descending order please ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC'}",
    "record_name": "2010@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the frequency of each payment method code using a bar chart , and could you display x-axis in descending order please ?",
    "question_toks": [
      "Compare",
      "the",
      "frequency",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "display",
      "x-axis",
      "in",
      "descending",
      "order",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for how many students are in each department ?",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name'}",
    "record_name": "654",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for how many students are in each department ?",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart about the distribution of date_address_to and the amount of date_address_to bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "232",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Visualize a bar chart about the distribution of date_address_to and the amount of date_address_to bin date_address_to by weekday .",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Plot date of latest revision by the number of date of latest revision as a line chart",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "Plot date of latest revision by the number of date of latest revision as a line chart",
    "question_toks": [
      "Plot",
      "date",
      "of",
      "latest",
      "revision",
      "by",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision",
      "as",
      "a",
      "line",
      "chart"
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Display a bar chart for what are the names and the average grades for each high schooler ? , and could you show y-axis in desc order ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC'}",
    "record_name": "2453@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for what are the names and the average grades for each high schooler ? , and could you show y-axis in desc order ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "and",
      "could",
      "you",
      "show",
      "y-axis",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Find date_address_to and the amount of date_address_to bin date_address_to by time , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "205",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Find date_address_to and the amount of date_address_to bin date_address_to by time , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "time",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Find date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by time , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "189",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Find date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by time , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "time",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and could you sort by the X in asc ?",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC'}",
    "record_name": "2503@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality in a bar chart , and could you sort by the X in asc ?",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "by",
      "the",
      "X",
      "in",
      "asc",
      "?"
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "Nationality",
      "ASC"
    ]
  },
  {
    "nl_queries": "Find the name and training hours of players whose hours are below 1500 Show bar chart , and list by the y axis from high to low .",
    "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC'}",
    "record_name": "2790@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the name and training hours of players whose hours are below 1500 Show bar chart , and list by the y axis from high to low .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "training",
      "hours",
      "of",
      "players",
      "whose",
      "hours",
      "are",
      "below",
      "1500",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY HS DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "pName",
      ",",
      "HS",
      "FROM",
      "Player",
      "WHERE",
      "HS",
      "<",
      "1500",
      "ORDER",
      "BY",
      "HS",
      "DESC"
    ]
  },
  {
    "nl_queries": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700'}",
    "record_name": "2607",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities in a bar chart .",
    "question_toks": [
      "Which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700"
    ]
  },
  {
    "nl_queries": "Draw a bar chart for what are the names and the average grades for each high schooler ? , and I want to rank by the bars in descending .",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC'}",
    "record_name": "2453@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Draw a bar chart for what are the names and the average grades for each high schooler ? , and I want to rank by the bars in descending .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      ",",
      "and",
      "I",
      "want",
      "to",
      "rank",
      "by",
      "the",
      "bars",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many departments for each building ? Draw a bar chart , and rank in asc by the how many building .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC'}",
    "record_name": "625@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many departments for each building ? Draw a bar chart , and rank in asc by the how many building .",
    "question_toks": [
      "How",
      "many",
      "departments",
      "for",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "in",
      "asc",
      "by",
      "the",
      "how",
      "many",
      "building",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "building",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis , could you rank by the Y in ascending please ?",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC\", 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR\"}",
    "record_name": "2027@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into Year interval and compute the total amount payment as the Y-axis , could you rank by the Y in ascending please ?",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "Year",
      "interval",
      "and",
      "compute",
      "the",
      "total",
      "amount",
      "payment",
      "as",
      "the",
      "Y-axis",
      ",",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "What are the names and their total grades for each high schooler ? Show me the result using a bar chart , and order x-axis in asc order .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC'}",
    "record_name": "2452@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and their total grades for each high schooler ? Show me the result using a bar chart , and order x-axis in asc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "their",
      "total",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?",
      "Show",
      "me",
      "the",
      "result",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "x-axis",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart that bins the payment date into the Year interval and then shows the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC', 'binning': 'BIN Date_Payment_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR'}",
    "record_name": "1995",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me a bar chart that bins the payment date into the Year interval and then shows the amount of each payment categorized by the payment method code , and then sort the bars in ascending order of date .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "that",
      "bins",
      "the",
      "payment",
      "date",
      "into",
      "the",
      "Year",
      "interval",
      "and",
      "then",
      "shows",
      "the",
      "amount",
      "of",
      "each",
      "payment",
      "categorized",
      "by",
      "the",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "then",
      "sort",
      "the",
      "bars",
      "in",
      "ascending",
      "order",
      "of",
      "date",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Payment_Method_Code ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Date_Payment_Made",
      "ASC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , and rank by the Y from low to high please .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC\"}",
    "record_name": "2030@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Which Payments were processed with Visa ? List the date and the amount using a bar chart , and rank by the Y from low to high please .",
    "question_toks": [
      "Which",
      "Payments",
      "were",
      "processed",
      "with",
      "Visa",
      "?",
      "List",
      "the",
      "date",
      "and",
      "the",
      "amount",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , show Amount_Payment from high to low order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC\"}",
    "record_name": "2030@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart , show Amount_Payment from high to low order .",
    "question_toks": [
      "Show",
      "the",
      "amount",
      "for",
      "all",
      "the",
      "payments",
      "processed",
      "with",
      "Visa",
      "distributing",
      "the",
      "payment",
      "date",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "Amount_Payment",
      "from",
      "high",
      "to",
      "low",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "Amount_Payment",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "Amount_Payment",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart , I want to rank y axis in desc order .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC'}",
    "record_name": "2497@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\" ? Count the last year for a bar chart , I want to rank y axis in desc order .",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "year",
      "of",
      "the",
      "parties",
      "whose",
      "theme",
      "is",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "?",
      "Count",
      "the",
      "last",
      "year",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "I",
      "want",
      "to",
      "rank",
      "y",
      "axis",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "how many students are in each department ?",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name'}",
    "record_name": "654",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "how many students are in each department ?",
    "question_toks": [
      "how",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "What are the number of the dates of the assessment notes ? , could you order Y in desc order ?",
    "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC', 'binning': 'BIN date_of_notes BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY'}",
    "record_name": "187@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "weekday"
      ],
      "vis": 0
    },
    "question": "What are the number of the dates of the assessment notes ? , could you order Y in desc order ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      "?",
      ",",
      "could",
      "you",
      "order",
      "Y",
      "in",
      "desc",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "DESC",
      "BIN",
      "date_of_notes",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the total credits of courses provided by different department Plot them as bar chart , could you sort in ascending by the x-axis ?",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "621@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the total credits of courses provided by different department Plot them as bar chart , could you sort in ascending by the x-axis ?",
    "question_toks": [
      "Find",
      "the",
      "total",
      "credits",
      "of",
      "courses",
      "provided",
      "by",
      "different",
      "department",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "sort",
      "in",
      "ascending",
      "by",
      "the",
      "x-axis",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for how many rooms in each building have a capacity of over 50 ? , could you list from low to high by the X ?",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC'}",
    "record_name": "620@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many rooms in each building have a capacity of over 50 ? , could you list from low to high by the X ?",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "rooms",
      "in",
      "each",
      "building",
      "have",
      "a",
      "capacity",
      "of",
      "over",
      "50",
      "?",
      ",",
      "could",
      "you",
      "list",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "X",
      "?"
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 ?",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?"
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ]
  },
  {
    "nl_queries": "Give me a pie chart to reflect the proportion of other_details and the amount of other_details .",
    "VQL": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "250",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie chart to reflect the proportion of other_details and the amount of other_details .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "chart",
      "to",
      "reflect",
      "the",
      "proportion",
      "of",
      "other_details",
      "and",
      "the",
      "amount",
      "of",
      "other_details",
      "."
    ],
    "query": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "other_details",
      ",",
      "COUNT",
      "(",
      "other_details",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , and display in descending by the X-axis .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC'}",
    "record_name": "3269@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , and display in descending by the X-axis .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "and",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "X-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "DESC"
    ]
  },
  {
    "nl_queries": "how many students are in each department ? , order X from low to high order .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "654@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "how many students are in each department ? , order X from low to high order .",
    "question_toks": [
      "how",
      "many",
      "students",
      "are",
      "in",
      "each",
      "department",
      "?",
      ",",
      "order",
      "X",
      "from",
      "low",
      "to",
      "high",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Visualize the general trend of the number of planned delivery date over the planned delivery date , and list x-axis in ascending order .",
    "VQL": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC', 'binning': 'BIN Planned_Delivery_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR'}",
    "record_name": "865@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "year"
      ],
      "vis": 2
    },
    "question": "Visualize the general trend of the number of planned delivery date over the planned delivery date , and list x-axis in ascending order .",
    "question_toks": [
      "Visualize",
      "the",
      "general",
      "trend",
      "of",
      "the",
      "number",
      "of",
      "planned",
      "delivery",
      "date",
      "over",
      "the",
      "planned",
      "delivery",
      "date",
      ",",
      "and",
      "list",
      "x-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "Planned_Delivery_Date",
      "ASC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find the number of players for each hand type . Show bar chart .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand'}",
    "record_name": "3287",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the number of players for each hand type . Show bar chart .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "hand",
      "type",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ]
  },
  {
    "nl_queries": "Find the total credits of courses provided by different department . Plot them as bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , sum(credits) FROM course GROUP BY dept_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name'}",
    "record_name": "621",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the total credits of courses provided by different department . Plot them as bar chart .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "credits",
      "of",
      "courses",
      "provided",
      "by",
      "different",
      "department",
      ".",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "sum",
      "(",
      "credits",
      ")",
      "FROM",
      "course",
      "GROUP",
      "BY",
      "dept_name"
    ]
  },
  {
    "nl_queries": "What is the lowest salary in departments with average salary greater than the overall average Plot them as bar chart , and could you rank by the bar in desc ?",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC'}",
    "record_name": "619@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the lowest salary in departments with average salary greater than the overall average Plot them as bar chart , and could you rank by the bar in desc ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "by",
      "the",
      "bar",
      "in",
      "desc",
      "?"
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show the average of amount payment from different payment method code , and could you rank in ascending by the the average of amount payment please ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC'}",
    "record_name": "2012@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the average of amount payment from different payment method code , and could you rank in ascending by the the average of amount payment please ?",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "different",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "could",
      "you",
      "rank",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "please",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , display in desc by the Y .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC'}",
    "record_name": "3275@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart , display in desc by the Y .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "display",
      "in",
      "desc",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "sum",
      "(",
      "Population",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about enr over the cName .",
    "VQL": "Visualize BAR SELECT cName , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , enr FROM College ORDER BY enr'}",
    "record_name": "2792",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me the comparison about enr over the cName .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "enr",
      "over",
      "the",
      "cName",
      "."
    ],
    "query": "Visualize BAR SELECT cName , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "Bar graph to show the number of name from different name , display in descending by the y axis .",
    "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC'}",
    "record_name": "2451@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the number of name from different name , display in descending by the y axis .",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "number",
      "of",
      "name",
      "from",
      "different",
      "name",
      ",",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "COUNT",
      "(",
      "name",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "name",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah , and I want to show in ascending by the the number of last year .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC'}",
    "record_name": "2497@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah , and I want to show in ascending by the the number of last year .",
    "question_toks": [
      "Count",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "grpah",
      ",",
      "and",
      "I",
      "want",
      "to",
      "show",
      "in",
      "ascending",
      "by",
      "the",
      "the",
      "number",
      "of",
      "last",
      "year",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "GROUP",
      "BY",
      "Last_year",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "211",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by year and return a bar chart , order Y-axis in asc order please .",
    "VQL": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) ASC BIN date_incident_start BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) ASC', 'binning': 'BIN date_incident_start BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) ASC BIN date_incident_start BY YEAR'}",
    "record_name": "281@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                44,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ],
          "\"NOISE\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              44,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        44,
        "year"
      ],
      "vis": 0
    },
    "question": "What is the number of start dates for incidents with incident type code \"NOISE\" ? Bin by year and return a bar chart , order Y-axis in asc order please .",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "start",
      "dates",
      "for",
      "incidents",
      "with",
      "incident",
      "type",
      "code",
      "\"NOISE\"",
      "?",
      "Bin",
      "by",
      "year",
      "and",
      "return",
      "a",
      "bar",
      "chart",
      ",",
      "order",
      "Y-axis",
      "in",
      "asc",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT date_incident_start , COUNT(date_incident_start) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"  ORDER BY COUNT(date_incident_start) ASC BIN date_incident_start BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_incident_start",
      ",",
      "COUNT",
      "(",
      "date_incident_start",
      ")",
      "FROM",
      "Behavior_Incident",
      "WHERE",
      "incident_type_code",
      "=",
      "\"NOISE\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_incident_start",
      ")",
      "ASC",
      "BIN",
      "date_incident_start",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "What are the different product names ? What is the average product price for each of them Show bar chart , rank by the bar in desc .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC'}",
    "record_name": "859@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the different product names ? What is the average product price for each of them Show bar chart , rank by the bar in desc .",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "product",
      "names",
      "?",
      "What",
      "is",
      "the",
      "average",
      "product",
      "price",
      "for",
      "each",
      "of",
      "them",
      "Show",
      "bar",
      "chart",
      ",",
      "rank",
      "by",
      "the",
      "bar",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "Product_Name",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many players are there for each hand type ? , and sort Y-axis in descending order .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC'}",
    "record_name": "3287@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many players are there for each hand type ? , and sort Y-axis in descending order .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?",
      ",",
      "and",
      "sort",
      "Y-axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "How many players are there for each hand type . Visualize by bar chart .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand",
    "db_id": "wta_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand'}",
    "record_name": "3287",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "How many players are there for each hand type . Visualize by bar chart .",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      ".",
      "Visualize",
      "by",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ]
  },
  {
    "nl_queries": "Show me about the correlation between address_id and monthly_rental in a scatter chart .",
    "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Show me about the correlation between address_id and monthly_rental in a scatter chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "correlation",
      "between",
      "address_id",
      "and",
      "monthly_rental",
      "in",
      "a",
      "scatter",
      "chart",
      "."
    ],
    "query": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "address_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2605",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10",
    "question_toks": [
      "Visualize",
      "a",
      "bar",
      "chart",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10"
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ]
  },
  {
    "nl_queries": "A line chart shows the change of the average of monthly_rental over date_address_to , and group by attribute date_address_to",
    "VQL": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "273",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "A line chart shows the change of the average of monthly_rental over date_address_to , and group by attribute date_address_to",
    "question_toks": [
      "A",
      "line",
      "chart",
      "shows",
      "the",
      "change",
      "of",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to"
    ],
    "query": "Visualize LINE SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis building y axis maximal capacity",
    "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , max(capacity) FROM classroom GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building'}",
    "record_name": "623",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis building y axis maximal capacity",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "building",
      "y",
      "axis",
      "maximal",
      "capacity"
    ],
    "query": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad in a bar chart , and could you list by the X-axis in descending ?",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC'}",
    "record_name": "872@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the distinct payment method codes with the number of orders mad in a bar chart , and could you list by the X-axis in descending ?",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "list",
      "by",
      "the",
      "X-axis",
      "in",
      "descending",
      "?"
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "payment_method_code",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average , show by the Y-axis from low to high .",
    "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC'}",
    "record_name": "619@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              2,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average , show by the Y-axis from low to high .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "is",
      "the",
      "lowest",
      "salary",
      "in",
      "departments",
      "with",
      "average",
      "salary",
      "greater",
      "than",
      "the",
      "overall",
      "average",
      ",",
      "show",
      "by",
      "the",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "min",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "min",
      "(",
      "salary",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Compare the smallest enrollment of schools in each state using a bar chart , and order cName in desc order .",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC'}",
    "record_name": "2798@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the smallest enrollment of schools in each state using a bar chart , and order cName in desc order .",
    "question_toks": [
      "Compare",
      "the",
      "smallest",
      "enrollment",
      "of",
      "schools",
      "in",
      "each",
      "state",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "order",
      "cName",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "cName",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a scatter chart about the correlation between student_id and address_id , and group by attribute other_details .",
    "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "251",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Return a scatter chart about the correlation between student_id and address_id , and group by attribute other_details .",
    "question_toks": [
      "Return",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "address_id",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "address_id",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY'}",
    "record_name": "2499",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      ",",
      "and",
      "count",
      "the",
      "first",
      "year",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me a pie to show the total number from different payment method code .",
    "VQL": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code'}",
    "record_name": "871",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Give me a pie to show the total number from different payment method code .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "pie",
      "to",
      "show",
      "the",
      "total",
      "number",
      "from",
      "different",
      "payment",
      "method",
      "code",
      "."
    ],
    "query": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code"
    ]
  },
  {
    "nl_queries": "Return a line chart about the change of the sum of monthly_rental over date_address_to , and group by attribute date_address_to .",
    "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC'}",
    "record_name": "272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          59,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 2
    },
    "question": "Return a line chart about the change of the sum of monthly_rental over date_address_to , and group by attribute date_address_to .",
    "question_toks": [
      "Return",
      "a",
      "line",
      "chart",
      "about",
      "the",
      "change",
      "of",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "date_address_to",
      "."
    ],
    "query": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "date_address_to",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "201",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by time .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "List the number of departments for each building with a bar chart , and show X in ascending order .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC'}",
    "record_name": "625@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of departments for each building with a bar chart , and show X in ascending order .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "departments",
      "for",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "X",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "building",
      "ASC"
    ]
  },
  {
    "nl_queries": "Display a bar chart for how many rooms in each building have a capacity of over 50 ? , rank from low to high by the y axis .",
    "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC",
    "db_id": "college_2",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC'}",
    "record_name": "620@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for how many rooms in each building have a capacity of over 50 ? , rank from low to high by the y axis .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "rooms",
      "in",
      "each",
      "building",
      "have",
      "a",
      "capacity",
      "of",
      "over",
      "50",
      "?",
      ",",
      "rank",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "classroom",
      "WHERE",
      "capacity",
      ">",
      "50",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show all the actual delivery dates and bin by weekday in a bar chart .",
    "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS', 'binning': 'BIN Actual_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY'}",
    "record_name": "863",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show all the actual delivery dates and bin by weekday in a bar chart .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "actual",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Show me a bar chart for how many players are there for each hand type ? , show by the X-axis in desc .",
    "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC'}",
    "record_name": "3287@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me a bar chart for how many players are there for each hand type ? , show by the X-axis in desc .",
    "question_toks": [
      "Show",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "how",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?",
      ",",
      "show",
      "by",
      "the",
      "X-axis",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "hand",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand",
      "ORDER",
      "BY",
      "hand",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis date of latest revision y axis the number of date of latest revision , and display y axis in ascending order please .",
    "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC', 'binning': 'BIN date_of_latest_revision BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY'}",
    "record_name": "2602@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bar chart x axis date of latest revision y axis the number of date of latest revision , and display y axis in ascending order please .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "date",
      "of",
      "latest",
      "revision",
      "y",
      "axis",
      "the",
      "number",
      "of",
      "date",
      "of",
      "latest",
      "revision",
      ",",
      "and",
      "display",
      "y",
      "axis",
      "in",
      "ascending",
      "order",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) ASC BIN date_of_latest_revision BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "ASC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and display by the Y in ascending .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC'}",
    "record_name": "2503@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "A bar chart about how many hosts does each nationality have ? List the nationality and the count , and display by the Y in ascending .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "about",
      "how",
      "many",
      "hosts",
      "does",
      "each",
      "nationality",
      "have",
      "?",
      "List",
      "the",
      "nationality",
      "and",
      "the",
      "count",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart , and list total number in descending order .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , bin the payment day into the Day of week interval and count them for a bar chart , and list total number in descending order .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "bin",
      "the",
      "payment",
      "day",
      "into",
      "the",
      "Day",
      "of",
      "week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "total",
      "number",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "204",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and list y-axis in ascending order .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC'}",
    "record_name": "3269@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a bar chart to show their average life expectancy , and list y-axis in ascending order .",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "their",
      "average",
      "life",
      "expectancy",
      ",",
      "and",
      "list",
      "y-axis",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , show by the names in asc .",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC'}",
    "record_name": "3269@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , show by the names in asc .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "show",
      "by",
      "the",
      "names",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "Continent",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a bar chart on how many counties correspond to each police force ? , sort by the Y-axis in asc .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC'}",
    "record_name": "709@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart on how many counties correspond to each police force ? , sort by the Y-axis in asc .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "on",
      "how",
      "many",
      "counties",
      "correspond",
      "to",
      "each",
      "police",
      "force",
      "?",
      ",",
      "sort",
      "by",
      "the",
      "Y-axis",
      "in",
      "asc",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a bar chart about the distribution of date_address_from and the average of monthly_rental bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "247",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Draw a bar chart about the distribution of date_address_from and the average of monthly_rental bin date_address_from by time .",
    "question_toks": [
      "Draw",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_from",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "For each continent where the average life expectancy is shorter than 72 , draw a scatter chart shows their average life expectancy and the total population of each continent",
    "VQL": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent'}",
    "record_name": "3272",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "For each continent where the average life expectancy is shorter than 72 , draw a scatter chart shows their average life expectancy and the total population of each continent",
    "question_toks": [
      "For",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "draw",
      "a",
      "scatter",
      "chart",
      "shows",
      "their",
      "average",
      "life",
      "expectancy",
      "and",
      "the",
      "total",
      "population",
      "of",
      "each",
      "continent"
    ],
    "query": "Visualize SCATTER SELECT sum(Population) , avg(LifeExpectancy) FROM country GROUP BY Continent",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday in a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "211",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show me about the distribution of date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "average",
      "of",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing the number of date claim made across date claim made , rank from high to low by the y-axis .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC', 'binning': 'BIN Date_Claim_Made BY YEAR'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR'}",
    "record_name": "2019@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "year"
      ],
      "vis": 0
    },
    "question": "Create a bar chart showing the number of date claim made across date claim made , rank from high to low by the y-axis .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "number",
      "of",
      "date",
      "claim",
      "made",
      "across",
      "date",
      "claim",
      "made",
      ",",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 . Show bar chart .",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2605",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the name and level of catalog structure with level number between 5 and 1 . Show bar chart .",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "1",
      ".",
      "Show",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ]
  },
  {
    "nl_queries": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , and display by the Y-axis from low to high please .",
    "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC'}",
    "record_name": "2607@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          700.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Display a bar chart for which catalog contents has price above 700 dollars ? Show their catalog entry names and capacities , and display by the Y-axis from low to high please .",
    "question_toks": [
      "Display",
      "a",
      "bar",
      "chart",
      "for",
      "which",
      "catalog",
      "contents",
      "has",
      "price",
      "above",
      "700",
      "dollars",
      "?",
      "Show",
      "their",
      "catalog",
      "entry",
      "names",
      "and",
      "capacities",
      ",",
      "and",
      "display",
      "by",
      "the",
      "Y-axis",
      "from",
      "low",
      "to",
      "high",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_entry_name",
      ",",
      "capacity",
      "FROM",
      "Catalog_Contents",
      "WHERE",
      "price_in_dollars",
      ">",
      "700",
      "ORDER",
      "BY",
      "capacity",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show me about the distribution of dept_name and the amount of dept_name , and group by attribute dept_name in a bar chart .",
    "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary'}",
    "record_name": "613",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show me about the distribution of dept_name and the amount of dept_name , and group by attribute dept_name in a bar chart .",
    "question_toks": [
      "Show",
      "me",
      "about",
      "the",
      "distribution",
      "of",
      "dept_name",
      "and",
      "the",
      "amount",
      "of",
      "dept_name",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "dept_name",
      "in",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "COUNT",
      "(",
      "dept_name",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "salary"
    ]
  },
  {
    "nl_queries": "Visualize a pie chart about the proportion of other_details and the sum of monthly_rental .",
    "VQL": "Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "252",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize a pie chart about the proportion of other_details and the sum of monthly_rental .",
    "question_toks": [
      "Visualize",
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "proportion",
      "of",
      "other_details",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "."
    ],
    "query": "Visualize PIE SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "other_details",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart of sum amount payment from each payment method code , rank by the Payment_Method_Code in ascending .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2011@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of sum amount payment from each payment method code , rank by the Payment_Method_Code in ascending .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "sum",
      "amount",
      "payment",
      "from",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "rank",
      "by",
      "the",
      "Payment_Method_Code",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ]
  },
  {
    "nl_queries": "Show the smallest enrollment of each state using a bar chart , and show in descending by the y axis .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC'}",
    "record_name": "2800@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              2,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show the smallest enrollment of each state using a bar chart , and show in descending by the y axis .",
    "question_toks": [
      "Show",
      "the",
      "smallest",
      "enrollment",
      "of",
      "each",
      "state",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "show",
      "in",
      "descending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "min",
      "(",
      "enr",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Please use a bar chart to show the total amount of payment by each payment method code , and rank by the Payment_Method_Code in ascending .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC'}",
    "record_name": "2011@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the total amount of payment by each payment method code , and rank by the Payment_Method_Code in ascending .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "and",
      "rank",
      "by",
      "the",
      "Payment_Method_Code",
      "in",
      "ascending",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "Payment_Method_Code",
      "ASC"
    ]
  },
  {
    "nl_queries": "a pie chart about the number of companies in different industries .",
    "VQL": "Visualize PIE SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
    "db_id": "company_office",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry'}",
    "record_name": "684",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "a pie chart about the number of companies in different industries .",
    "question_toks": [
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "number",
      "of",
      "companies",
      "in",
      "different",
      "industries",
      "."
    ],
    "query": "Visualize PIE SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry"
    ]
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and sort names in ascending order .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC'}",
    "record_name": "3275@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 , and sort names in ascending order .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      ",",
      "and",
      "sort",
      "names",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "ORDER",
      "BY",
      "GovernmentForm",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a bar chart about the distribution of other_details and the amount of other_details , and group by attribute other_details .",
    "VQL": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "203",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart about the distribution of other_details and the amount of other_details , and group by attribute other_details .",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "about",
      "the",
      "distribution",
      "of",
      "other_details",
      "and",
      "the",
      "amount",
      "of",
      "other_details",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "other_details",
      ",",
      "COUNT",
      "(",
      "other_details",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": ", rank from high to low by the bars .",
    "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC",
    "db_id": "company_office",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC'}",
    "record_name": "685@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": ", rank from high to low by the bars .",
    "question_toks": [
      ",",
      "rank",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "bars",
      "."
    ],
    "query": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Industry",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "Companies",
      "GROUP",
      "BY",
      "Industry",
      "ORDER",
      "BY",
      "Industry",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar chart , the-axis is the state , and the Y axis is each state's the smallest enrollment , show by the X from low to high .",
    "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
    "db_id": "soccer_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC'}",
    "record_name": "2800@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart , the-axis is the state , and the Y axis is each state's the smallest enrollment , show by the X from low to high .",
    "question_toks": [
      "Bar",
      "chart",
      ",",
      "the-axis",
      "is",
      "the",
      "state",
      ",",
      "and",
      "the",
      "Y",
      "axis",
      "is",
      "each",
      "state's",
      "the",
      "smallest",
      "enrollment",
      ",",
      "show",
      "by",
      "the",
      "X",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "state",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state",
      "ORDER",
      "BY",
      "state",
      "ASC"
    ]
  },
  {
    "nl_queries": "I want to know the proportion of the total number for each payment method code .",
    "VQL": "Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2009",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "I want to know the proportion of the total number for each payment method code .",
    "question_toks": [
      "I",
      "want",
      "to",
      "know",
      "the",
      "proportion",
      "of",
      "the",
      "total",
      "number",
      "for",
      "each",
      "payment",
      "method",
      "code",
      "."
    ],
    "query": "Visualize PIE SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "Visualize a scatter chart about the correlation between student_id and address_id .",
    "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "274",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Visualize a scatter chart about the correlation between student_id and address_id .",
    "question_toks": [
      "Visualize",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "address_id",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "address_id",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "What is the name of the school that has the smallest enrollment in each state ?",
    "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT cName , min(enr) FROM college GROUP BY state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state'}",
    "record_name": "2798",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the name of the school that has the smallest enrollment in each state ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "school",
      "that",
      "has",
      "the",
      "smallest",
      "enrollment",
      "in",
      "each",
      "state",
      "?"
    ],
    "query": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "cName",
      ",",
      "min",
      "(",
      "enr",
      ")",
      "FROM",
      "college",
      "GROUP",
      "BY",
      "state"
    ]
  },
  {
    "nl_queries": "Bar chart of mean salary from each dept name , list in ascending by the y axis .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC'}",
    "record_name": "627@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart of mean salary from each dept name , list in ascending by the y axis .",
    "question_toks": [
      "Bar",
      "chart",
      "of",
      "mean",
      "salary",
      "from",
      "each",
      "dept",
      "name",
      ",",
      "list",
      "in",
      "ascending",
      "by",
      "the",
      "y",
      "axis",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "salary",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Return a scatter chart about the correlation between address_id and monthly_rental , and group by attribute other_details .",
    "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "253",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                57,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "Return a scatter chart about the correlation between address_id and monthly_rental , and group by attribute other_details .",
    "question_toks": [
      "Return",
      "a",
      "scatter",
      "chart",
      "about",
      "the",
      "correlation",
      "between",
      "address_id",
      "and",
      "monthly_rental",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "."
    ],
    "query": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "address_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and the average grades for each high schooler Plot them as a bar chart , and could you list in desc by the y axis ?",
    "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC'}",
    "record_name": "2453@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and the average grades for each high schooler Plot them as a bar chart , and could you list in desc by the y axis ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "the",
      "average",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "Plot",
      "them",
      "as",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "could",
      "you",
      "list",
      "in",
      "desc",
      "by",
      "the",
      "y",
      "axis",
      "?"
    ],
    "query": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "AVG",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "grade",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and display from high to low by the Y .",
    "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "db_id": "party_host",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC'}",
    "record_name": "2503@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart , and display from high to low by the Y .",
    "question_toks": [
      "Show",
      "different",
      "nationalities",
      "along",
      "with",
      "the",
      "number",
      "of",
      "hosts",
      "of",
      "each",
      "nationality",
      "Visualize",
      "by",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "HOST",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Please use a bar chart to show the total amount of payment by each payment method code , rank total number in ascending order .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC'}",
    "record_name": "2011@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Please use a bar chart to show the total amount of payment by each payment method code , rank total number in ascending order .",
    "question_toks": [
      "Please",
      "use",
      "a",
      "bar",
      "chart",
      "to",
      "show",
      "the",
      "total",
      "amount",
      "of",
      "payment",
      "by",
      "each",
      "payment",
      "method",
      "code",
      ",",
      "rank",
      "total",
      "number",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "Amount_Payment",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "db_id": "product_catalog",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10'}",
    "record_name": "2605",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10"
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10"
    ]
  },
  {
    "nl_queries": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
    "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "db_id": "world_1",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm', 'binning': ''}, 'VQL': 'Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm'}",
    "record_name": "3275",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72 .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      "."
    ],
    "query": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "GovernmentForm",
      ",",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm"
    ]
  },
  {
    "nl_queries": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year , and order by the Y in ascending please .",
    "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY",
    "db_id": "party_host",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC', 'binning': 'BIN Last_year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY'}",
    "record_name": "2499@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Spring\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Teqnology\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        5,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show the total number of the last year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart , bin the last year into weekday interval , and count the first year , and order by the Y in ascending please .",
    "question_toks": [
      "Show",
      "the",
      "total",
      "number",
      "of",
      "the",
      "last",
      "year",
      "of",
      "parties",
      "with",
      "the",
      "theme",
      "\"Spring\"",
      "or",
      "\"Teqnology\"",
      "with",
      "a",
      "bar",
      "chart",
      ",",
      "bin",
      "the",
      "last",
      "year",
      "into",
      "weekday",
      "interval",
      ",",
      "and",
      "count",
      "the",
      "first",
      "year",
      ",",
      "and",
      "order",
      "by",
      "the",
      "Y",
      "in",
      "ascending",
      "please",
      "."
    ],
    "query": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Last_year",
      ",",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "FROM",
      "party",
      "WHERE",
      "Party_Theme",
      "=",
      "\"Spring\"",
      "OR",
      "Party_Theme",
      "=",
      "\"Teqnology\"",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Last_year",
      ")",
      "ASC",
      "BIN",
      "Last_year",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Visualize a pie chart about the proportion of state and enr .",
    "VQL": "Visualize PIE SELECT state , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT state , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize PIE SELECT state , enr FROM College ORDER BY enr'}",
    "record_name": "2793",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize a pie chart about the proportion of state and enr .",
    "question_toks": [
      "Visualize",
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "proportion",
      "of",
      "state",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize PIE SELECT state , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "state",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "What is the average capacity for rooms in each building ? Draw a bar chart , display by the y axis from high to low .",
    "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC'}",
    "record_name": "624@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What is the average capacity for rooms in each building ? Draw a bar chart , display by the y axis from high to low .",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "capacity",
      "for",
      "rooms",
      "in",
      "each",
      "building",
      "?",
      "Draw",
      "a",
      "bar",
      "chart",
      ",",
      "display",
      "by",
      "the",
      "y",
      "axis",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "query": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "avg",
      "(",
      "capacity",
      ")",
      "FROM",
      "classroom",
      "GROUP",
      "BY",
      "building",
      "ORDER",
      "BY",
      "avg",
      "(",
      "capacity",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return the names and surface areas of the 5 largest countries with a pie chart .",
    "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'}",
    "record_name": "3276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Return the names and surface areas of the 5 largest countries with a pie chart .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      "with",
      "a",
      "pie",
      "chart",
      "."
    ],
    "query": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ]
  },
  {
    "nl_queries": "Show all the actual delivery dates and bin by weekday in a bar chart , could you display how many actual delivery date in ascending order ?",
    "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC BIN Actual_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC', 'binning': 'BIN Actual_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC BIN Actual_Delivery_Date BY WEEKDAY'}",
    "record_name": "863@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              61,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        61,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show all the actual delivery dates and bin by weekday in a bar chart , could you display how many actual delivery date in ascending order ?",
    "question_toks": [
      "Show",
      "all",
      "the",
      "actual",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "could",
      "you",
      "display",
      "how",
      "many",
      "actual",
      "delivery",
      "date",
      "in",
      "ascending",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC BIN Actual_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Actual_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Actual_Delivery_Date",
      ")",
      "ASC",
      "BIN",
      "Actual_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Compare the frequency of each payment method code using a bar chart .",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "db_id": "insurance_policies",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code'}",
    "record_name": "2010",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Compare the frequency of each payment method code using a bar chart .",
    "question_toks": [
      "Compare",
      "the",
      "frequency",
      "of",
      "each",
      "payment",
      "method",
      "code",
      "using",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , COUNT(Payment_Method_Code) FROM Payments GROUP BY Payment_Method_Code",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "COUNT",
      "(",
      "Payment_Method_Code",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code"
    ]
  },
  {
    "nl_queries": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend , and sort by the date_of_latest_revision in descending .",
    "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC', 'binning': 'BIN date_of_latest_revision BY MONTH'}, 'VQL': 'Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH'}",
    "record_name": "2603@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        8,
        "month"
      ],
      "vis": 2
    },
    "question": "On which days more than one revisions were made on catalogs , bin the date into weekday interval and count them to show the trend , and sort by the date_of_latest_revision in descending .",
    "question_toks": [
      "On",
      "which",
      "days",
      "more",
      "than",
      "one",
      "revisions",
      "were",
      "made",
      "on",
      "catalogs",
      ",",
      "bin",
      "the",
      "date",
      "into",
      "weekday",
      "interval",
      "and",
      "count",
      "them",
      "to",
      "show",
      "the",
      "trend",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "date_of_latest_revision",
      "in",
      "descending",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_latest_revision",
      ",",
      "COUNT",
      "(",
      "date_of_latest_revision",
      ")",
      "FROM",
      "Catalogs",
      "ORDER",
      "BY",
      "date_of_latest_revision",
      "DESC",
      "BIN",
      "date_of_latest_revision",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "A bar chart shows the distribution of date_address_to and the sum of monthly_rental bin date_address_to by weekday .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "238",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "A bar chart shows the distribution of date_address_to and the sum of monthly_rental bin date_address_to by weekday .",
    "question_toks": [
      "A",
      "bar",
      "chart",
      "shows",
      "the",
      "distribution",
      "of",
      "date_address_to",
      "and",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the sum of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by time by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "201",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the sum of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by time by a bar chart .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "What are the dates of the assessment notes , and count them by a line chart , and display in descending by the X-axis please .",
    "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC', 'binning': 'BIN date_of_notes BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR'}",
    "record_name": "188@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        38,
        "year"
      ],
      "vis": 2
    },
    "question": "What are the dates of the assessment notes , and count them by a line chart , and display in descending by the X-axis please .",
    "question_toks": [
      "What",
      "are",
      "the",
      "dates",
      "of",
      "the",
      "assessment",
      "notes",
      ",",
      "and",
      "count",
      "them",
      "by",
      "a",
      "line",
      "chart",
      ",",
      "and",
      "display",
      "in",
      "descending",
      "by",
      "the",
      "X-axis",
      "please",
      "."
    ],
    "query": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
    "query_toks": [
      "Visualize",
      "LINE",
      "SELECT",
      "date_of_notes",
      ",",
      "COUNT",
      "(",
      "date_of_notes",
      ")",
      "FROM",
      "Assessment_Notes",
      "ORDER",
      "BY",
      "date_of_notes",
      "DESC",
      "BIN",
      "date_of_notes",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Find date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday , and visualize them by a bar chart .",
    "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY'}",
    "record_name": "204",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Find date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday , and visualize them by a bar chart .",
    "question_toks": [
      "Find",
      "date_address_to",
      "and",
      "the",
      "amount",
      "of",
      "date_address_to",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_to",
      "by",
      "weekday",
      ",",
      "and",
      "visualize",
      "them",
      "by",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "COUNT",
      "(",
      "date_address_to",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Find the names and average salaries of all departments whose average salary is greater than 42000 , sort total number in desc order .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC'}",
    "record_name": "627@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Find the names and average salaries of all departments whose average salary is greater than 42000 , sort total number in desc order .",
    "question_toks": [
      "Find",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "of",
      "all",
      "departments",
      "whose",
      "average",
      "salary",
      "is",
      "greater",
      "than",
      "42000",
      ",",
      "sort",
      "total",
      "number",
      "in",
      "desc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "salary",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the average of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by time .",
    "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "db_id": "behavior_monitoring",
    "hardness": "Extra Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_from BY YEAR'}, 'VQL': 'Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR'}",
    "record_name": "202",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                58,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        58,
        "year"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the average of monthly_rental over the date_address_from , and group by attribute other_details and bin date_address_from by time .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "average",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_from",
      ",",
      "and",
      "group",
      "by",
      "attribute",
      "other_details",
      "and",
      "bin",
      "date_address_from",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_from",
      ",",
      "AVG",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_from",
      "BY",
      "YEAR"
    ]
  },
  {
    "nl_queries": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you show from low to high by the total number ?",
    "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "db_id": "world_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC'}",
    "record_name": "3269@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72 , could you show from low to high by the total number ?",
    "question_toks": [
      "Return",
      "a",
      "bar",
      "chart",
      "showing",
      "average",
      "life",
      "expectancy",
      "of",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      ",",
      "could",
      "you",
      "show",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "?"
    ],
    "query": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Continent",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "ORDER",
      "BY",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Draw a pie chart about the proportion of cName and enr .",
    "VQL": "Visualize PIE SELECT cName , enr FROM College ORDER BY enr",
    "db_id": "soccer_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT cName , enr FROM College ORDER BY enr', 'binning': ''}, 'VQL': 'Visualize PIE SELECT cName , enr FROM College ORDER BY enr'}",
    "record_name": "2791",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Draw a pie chart about the proportion of cName and enr .",
    "question_toks": [
      "Draw",
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "proportion",
      "of",
      "cName",
      "and",
      "enr",
      "."
    ],
    "query": "Visualize PIE SELECT cName , enr FROM College ORDER BY enr",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "cName",
      ",",
      "enr",
      "FROM",
      "College",
      "ORDER",
      "BY",
      "enr"
    ]
  },
  {
    "nl_queries": "A scatter chart shows the correlation between student_id and monthly_rental .",
    "VQL": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC'}",
    "record_name": "276",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 3
    },
    "question": "A scatter chart shows the correlation between student_id and monthly_rental .",
    "question_toks": [
      "A",
      "scatter",
      "chart",
      "shows",
      "the",
      "correlation",
      "between",
      "student_id",
      "and",
      "monthly_rental",
      "."
    ],
    "query": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "SCATTER",
      "SELECT",
      "student_id",
      ",",
      "monthly_rental",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bar graph to show the average of amount payment from different payment method code , could you list the average of amount payment from high to low order ?",
    "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC'}",
    "record_name": "2012@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              5,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar graph to show the average of amount payment from different payment method code , could you list the average of amount payment from high to low order ?",
    "question_toks": [
      "Bar",
      "graph",
      "to",
      "show",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "different",
      "payment",
      "method",
      "code",
      ",",
      "could",
      "you",
      "list",
      "the",
      "average",
      "of",
      "amount",
      "payment",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Payment_Method_Code",
      ",",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "FROM",
      "Payments",
      "GROUP",
      "BY",
      "Payment_Method_Code",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "Amount_Payment",
      ")",
      "DESC"
    ]
  },
  {
    "nl_queries": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart , show from high to low by the Y .",
    "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Hard",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC\", 'binning': 'BIN Date_Payment_Made BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY\"}",
    "record_name": "2031@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"Visa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              24,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        24,
        "weekday"
      ],
      "vis": 0
    },
    "question": "For those payments processed with Visa , show me the number of payments of each day of the week using a bar chart , show from high to low by the Y .",
    "question_toks": [
      "For",
      "those",
      "payments",
      "processed",
      "with",
      "Visa",
      ",",
      "show",
      "me",
      "the",
      "number",
      "of",
      "payments",
      "of",
      "each",
      "day",
      "of",
      "the",
      "week",
      "using",
      "a",
      "bar",
      "chart",
      ",",
      "show",
      "from",
      "high",
      "to",
      "low",
      "by",
      "the",
      "Y",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Payment_Made",
      ",",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "FROM",
      "Payments",
      "WHERE",
      "Payment_Method_Code",
      "=",
      "'Visa'",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Payment_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Payment_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "Create a bar chart showing the total number across police force , show by the names in desc .",
    "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
    "db_id": "county_public_safety",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC'}",
    "record_name": "709@x_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Create a bar chart showing the total number across police force , show by the names in desc .",
    "question_toks": [
      "Create",
      "a",
      "bar",
      "chart",
      "showing",
      "the",
      "total",
      "number",
      "across",
      "police",
      "force",
      ",",
      "show",
      "by",
      "the",
      "names",
      "in",
      "desc",
      "."
    ],
    "query": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Police_force",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "county_public_safety",
      "GROUP",
      "BY",
      "Police_force",
      "ORDER",
      "BY",
      "Police_force",
      "DESC"
    ]
  },
  {
    "nl_queries": "What are the names and average salaries for departments with average salary higher than 42000 Plot them as bar chart , list in asc by the Y-axis .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC'}",
    "record_name": "627@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              5,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and average salaries for departments with average salary higher than 42000 Plot them as bar chart , list in asc by the Y-axis .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "list",
      "in",
      "asc",
      "by",
      "the",
      "Y-axis",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "AVG",
      "(",
      "salary",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "Bar chart x axis name y axis total number of grade , and order from low to high by the total number of grade .",
    "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "db_id": "network_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC'}",
    "record_name": "2452@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Bar chart x axis name y axis total number of grade , and order from low to high by the total number of grade .",
    "question_toks": [
      "Bar",
      "chart",
      "x",
      "axis",
      "name",
      "y",
      "axis",
      "total",
      "number",
      "of",
      "grade",
      ",",
      "and",
      "order",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "total",
      "number",
      "of",
      "grade",
      "."
    ],
    "query": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "name",
      ",",
      "SUM",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "name",
      "ORDER",
      "BY",
      "SUM",
      "(",
      "grade",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "For each distinct product name , show its average product price , I want to sort in asc by the x-axis .",
    "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC'}",
    "record_name": "859@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "For each distinct product name , show its average product price , I want to sort in asc by the x-axis .",
    "question_toks": [
      "For",
      "each",
      "distinct",
      "product",
      "name",
      ",",
      "show",
      "its",
      "average",
      "product",
      "price",
      ",",
      "I",
      "want",
      "to",
      "sort",
      "in",
      "asc",
      "by",
      "the",
      "x-axis",
      "."
    ],
    "query": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Product_Name",
      ",",
      "avg",
      "(",
      "Product_Price",
      ")",
      "FROM",
      "PRODUCTS",
      "GROUP",
      "BY",
      "Product_Name",
      "ORDER",
      "BY",
      "Product_Name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a bar chart for the total number of each dept name , and sort from low to high by the bar .",
    "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "654@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          29,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              29,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a bar chart for the total number of each dept name , and sort from low to high by the bar .",
    "question_toks": [
      "Give",
      "me",
      "a",
      "bar",
      "chart",
      "for",
      "the",
      "total",
      "number",
      "of",
      "each",
      "dept",
      "name",
      ",",
      "and",
      "sort",
      "from",
      "low",
      "to",
      "high",
      "by",
      "the",
      "bar",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , and could you sort Y-axis from high to low order ?",
    "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "db_id": "product_catalog",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC'}",
    "record_name": "2605@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          5.0,
          10.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10 , and could you sort Y-axis from high to low order ?",
    "question_toks": [
      "Give",
      "me",
      "a",
      "histogram",
      "for",
      "what",
      "are",
      "the",
      "name",
      "and",
      "level",
      "of",
      "catalog",
      "structure",
      "with",
      "level",
      "number",
      "between",
      "5",
      "and",
      "10",
      ",",
      "and",
      "could",
      "you",
      "sort",
      "Y-axis",
      "from",
      "high",
      "to",
      "low",
      "order",
      "?"
    ],
    "query": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "catalog_level_name",
      ",",
      "catalog_level_number",
      "FROM",
      "Catalog_Structure",
      "WHERE",
      "catalog_level_number",
      "BETWEEN",
      "5",
      "AND",
      "10",
      "ORDER",
      "BY",
      "catalog_level_number",
      "DESC"
    ]
  },
  {
    "nl_queries": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart , and rank y axis in descending order .",
    "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY",
    "db_id": "insurance_policies",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC', 'binning': 'BIN Date_Claim_Made BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY'}",
    "record_name": "2020@y_name@DESC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              16,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        10,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Bin the claim date into the Day of Week interval and count them for visualizing a bar chart , and rank y axis in descending order .",
    "question_toks": [
      "Bin",
      "the",
      "claim",
      "date",
      "into",
      "the",
      "Day",
      "of",
      "Week",
      "interval",
      "and",
      "count",
      "them",
      "for",
      "visualizing",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "rank",
      "y",
      "axis",
      "in",
      "descending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Date_Claim_Made",
      ",",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "FROM",
      "Settlements",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Date_Claim_Made",
      ")",
      "DESC",
      "BIN",
      "Date_Claim_Made",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "List the distinct payment method codes with the number of orders mad Show bar chart , and display X in asc order .",
    "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC'}",
    "record_name": "872@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            14
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                79,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          79,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              79,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the distinct payment method codes with the number of orders mad Show bar chart , and display X in asc order .",
    "question_toks": [
      "List",
      "the",
      "distinct",
      "payment",
      "method",
      "codes",
      "with",
      "the",
      "number",
      "of",
      "orders",
      "mad",
      "Show",
      "bar",
      "chart",
      ",",
      "and",
      "display",
      "X",
      "in",
      "asc",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "payment_method_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "INVOICES",
      "GROUP",
      "BY",
      "payment_method_code",
      "ORDER",
      "BY",
      "payment_method_code",
      "ASC"
    ]
  },
  {
    "nl_queries": "Give me the comparison about the sum of monthly_rental over the date_address_to bin date_address_to by time .",
    "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC', 'binning': 'BIN date_address_to BY MONTH'}, 'VQL': 'Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH'}",
    "record_name": "230",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                59,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        59,
        "month"
      ],
      "vis": 0
    },
    "question": "Give me the comparison about the sum of monthly_rental over the date_address_to bin date_address_to by time .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "comparison",
      "about",
      "the",
      "sum",
      "of",
      "monthly_rental",
      "over",
      "the",
      "date_address_to",
      "bin",
      "date_address_to",
      "by",
      "time",
      "."
    ],
    "query": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "date_address_to",
      ",",
      "SUM",
      "(",
      "monthly_rental",
      ")",
      "FROM",
      "Student_Addresses",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC",
      "BIN",
      "date_address_to",
      "BY",
      "MONTH"
    ]
  },
  {
    "nl_queries": "Visualize a pie chart about the proportion of other_details and the amount of other_details .",
    "VQL": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "db_id": "behavior_monitoring",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC'}",
    "record_name": "250",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                61,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          61,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 1
    },
    "question": "Visualize a pie chart about the proportion of other_details and the amount of other_details .",
    "question_toks": [
      "Visualize",
      "a",
      "pie",
      "chart",
      "about",
      "the",
      "proportion",
      "of",
      "other_details",
      "and",
      "the",
      "amount",
      "of",
      "other_details",
      "."
    ],
    "query": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC",
    "query_toks": [
      "Visualize",
      "PIE",
      "SELECT",
      "other_details",
      ",",
      "COUNT",
      "(",
      "other_details",
      ")",
      "FROM",
      "Student_Addresses",
      "GROUP",
      "BY",
      "other_details",
      "ORDER",
      "BY",
      "monthly_rental",
      "DESC"
    ]
  },
  {
    "nl_queries": "Return a histogram on how many matches were played in each year ? , order Y in ascending order .",
    "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC",
    "db_id": "wta_1",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC'}",
    "record_name": "3288@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "Return a histogram on how many matches were played in each year ? , order Y in ascending order .",
    "question_toks": [
      "Return",
      "a",
      "histogram",
      "on",
      "how",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?",
      ",",
      "order",
      "Y",
      "in",
      "ascending",
      "order",
      "."
    ],
    "query": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY count(*) ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "year",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC"
    ]
  },
  {
    "nl_queries": "List the number of departments for each building with a bar chart .",
    "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building",
    "db_id": "college_2",
    "hardness": "Easy",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT building , COUNT(building) FROM department GROUP BY building', 'binning': ''}, 'VQL': 'Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building'}",
    "record_name": "625",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "List the number of departments for each building with a bar chart .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "departments",
      "for",
      "each",
      "building",
      "with",
      "a",
      "bar",
      "chart",
      "."
    ],
    "query": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "building",
      ",",
      "COUNT",
      "(",
      "building",
      ")",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "building"
    ]
  },
  {
    "nl_queries": "Show all the planned delivery dates and bin by weekday in a bar chart , and list by the Y from low to high .",
    "VQL": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC BIN Planned_Delivery_Date BY WEEKDAY",
    "db_id": "cre_Drama_Workshop_Groups",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC', 'binning': 'BIN Planned_Delivery_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC BIN Planned_Delivery_Date BY WEEKDAY'}",
    "record_name": "862@y_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                60,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              60,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": [
        60,
        "weekday"
      ],
      "vis": 0
    },
    "question": "Show all the planned delivery dates and bin by weekday in a bar chart , and list by the Y from low to high .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "planned",
      "delivery",
      "dates",
      "and",
      "bin",
      "by",
      "weekday",
      "in",
      "a",
      "bar",
      "chart",
      ",",
      "and",
      "list",
      "by",
      "the",
      "Y",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC BIN Planned_Delivery_Date BY WEEKDAY",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "Planned_Delivery_Date",
      ",",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "FROM",
      "BOOKINGS",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "Planned_Delivery_Date",
      ")",
      "ASC",
      "BIN",
      "Planned_Delivery_Date",
      "BY",
      "WEEKDAY"
    ]
  },
  {
    "nl_queries": "What are the names and average salaries for departments with average salary higher than 42000 Plot them as bar chart , and sort by the X-axis from low to high .",
    "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "db_id": "college_2",
    "hardness": "Medium",
    "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC'}",
    "record_name": "627@x_name@ASC",
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null,
      "binning": null,
      "vis": 0
    },
    "question": "What are the names and average salaries for departments with average salary higher than 42000 Plot them as bar chart , and sort by the X-axis from low to high .",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "average",
      "salaries",
      "for",
      "departments",
      "with",
      "average",
      "salary",
      "higher",
      "than",
      "42000",
      "Plot",
      "them",
      "as",
      "bar",
      "chart",
      ",",
      "and",
      "sort",
      "by",
      "the",
      "X-axis",
      "from",
      "low",
      "to",
      "high",
      "."
    ],
    "query": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
    "query_toks": [
      "Visualize",
      "BAR",
      "SELECT",
      "dept_name",
      ",",
      "AVG",
      "(",
      "salary",
      ")",
      "FROM",
      "instructor",
      "GROUP",
      "BY",
      "dept_name",
      "ORDER",
      "BY",
      "dept_name",
      "ASC"
    ]
  }
]